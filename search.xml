<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>5G</title>
      <link href="/2024/04/18/5G/"/>
      <url>/2024/04/18/5G/</url>
      
        <content type="html"><![CDATA[<h1 id="知识点整理"><a href="#知识点整理" class="headerlink" title="知识点整理"></a>知识点整理</h1><h2 id="5G无线技术知识点"><a href="#5G无线技术知识点" class="headerlink" title="5G无线技术知识点"></a>5G无线技术知识点</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>算法</title>
      <link href="/2024/03/06/%E7%AE%97%E6%B3%95/"/>
      <url>/2024/03/06/%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>“自适应排序”是一种排序算法的特性，指的是算法能够根据输入数据的特定属性（如已经部分排序的程度）来调整其性能。具有自适应性的排序算法在处理部分已排序的数据时，会比在处理完全随机数据时表现出更高的效率。</p><h1 id="蓝桥杯"><a href="#蓝桥杯" class="headerlink" title="蓝桥杯"></a>蓝桥杯</h1><h2 id="刷题20240310"><a href="#刷题20240310" class="headerlink" title="刷题20240310"></a>刷题20240310</h2><p>1.<strong>问题描述</strong></p><p>给定一个长度为n的数列，将这个数列按从小到大的顺序排列。1&lt;&#x3D;n&lt;&#x3D;200</p><p><strong>输入格式</strong></p><p>　　第一行为一个整数n。<br>　　第二行包含n个整数，为待排序的数，每个整数的绝对值小于10000。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bubbleSortPlus</span><span class="params">(<span class="type">int</span>*nums,<span class="type">int</span> length)</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = length<span class="number">-1</span>;i&gt;<span class="number">0</span>;i--)&#123;</span><br><span class="line"><span class="type">bool</span> flags;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;i;j++)&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(nums[j]&gt;nums[j+<span class="number">1</span>])&#123;</span><br><span class="line"><span class="built_in">swap</span>(nums[j],nums[j+<span class="number">1</span>]);</span><br><span class="line">flags = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!flags)&#123;<span class="keyword">break</span>;&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> arrayLength;</span><br><span class="line">cin&gt;&gt;arrayLength;</span><br><span class="line"><span class="type">int</span> *myArray = <span class="keyword">new</span> <span class="type">int</span>[arrayLength];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;arrayLength;i++)&#123;</span><br><span class="line">cin&gt;&gt;myArray[i];</span><br><span class="line">&#125; </span><br><span class="line"><span class="built_in">bubbleSortPlus</span>(myArray,arrayLength); </span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;arrayLength;i++)&#123;</span><br><span class="line">cout&lt;&lt;myArray[i]&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span>[] myArray;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>❕动态数组的定义，内存释放</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">int *myArray = new int[length]</span><br><span class="line"></span><br><span class="line">delete[] myArray</span><br></pre></td></tr></table></figure><h2 id="刷题20240311"><a href="#刷题20240311" class="headerlink" title="刷题20240311"></a>刷题20240311</h2><p>获取字符ASCII</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">string numHex = &quot;39&quot;;</span><br><span class="line"></span><br><span class="line">int num = numHex[i]-48; </span><br></pre></td></tr></table></figure><h2 id="刷题20240312"><a href="#刷题20240312" class="headerlink" title="刷题20240312"></a>刷题20240312</h2><p>1.<strong>问题描述</strong><br>给定n个十六进制正整数，输出它们对应的八进制数。</p><p><strong>输入格式</strong><br>输入的第一行为一个正整数n （1&lt;&#x3D;n&lt;&#x3D;10）。<br>接下来n行，每行一个由0<del>9、大写字母A</del>F组成的字符串，表示要转换的十六进制正整数，每个十六进制数长度不超过100000。</p><p><strong>输出格式</strong><br>输出n行，每行为输入对应的八进制正整数。</p><p>  这题原本打算先将16进制转10进制，然后再转8进制，理论上是可以的，但是当16进制数很大时，整型就无法全部保存。下面是之前写的。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sstream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function">string <span class="title">transHex</span><span class="params">(<span class="type">const</span> string&amp;numHex)</span></span>&#123;</span><br><span class="line">    stringstream ss;</span><br><span class="line">    ss &lt;&lt; hex &lt;&lt; numHex; <span class="comment">// 将十六进制字符串转换为十进制数</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> decimal;</span><br><span class="line">    ss &gt;&gt; decimal;</span><br><span class="line"></span><br><span class="line">    string numOx;</span><br><span class="line">    <span class="keyword">while</span> (decimal) &#123;</span><br><span class="line">        <span class="type">int</span> remainder = decimal % <span class="number">8</span>;</span><br><span class="line">        stringstream ss2;</span><br><span class="line">        ss2 &lt;&lt; remainder;</span><br><span class="line">        numOx = ss2.<span class="built_in">str</span>() + numOx;</span><br><span class="line">        decimal /= <span class="number">8</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> numOx;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> count;</span><br><span class="line">cin&gt;&gt;count;</span><br><span class="line"><span class="function">vector&lt;string&gt; <span class="title">numHex</span><span class="params">(count)</span></span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;count;i++)&#123;</span><br><span class="line">cin&gt;&gt;numHex[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;count;i++)&#123;</span><br><span class="line">cout&lt;&lt;<span class="built_in">transHex</span>(numHex[i])&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>后面又看网上的，说先转2进制然后再转8进制</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//思路：100000位的十六进制数，这么大的数不好直接处理，以二进制字符串转换为八进制即可 </span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="keyword">while</span>(n--)&#123;</span><br><span class="line">string s;</span><br><span class="line">cin&gt;&gt;s;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> len1 = s.<span class="built_in">length</span>();</span><br><span class="line">string res1=<span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="comment">//将16进制转换为二进制字符串 </span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;len1;i++)&#123;</span><br><span class="line"><span class="keyword">switch</span>(s[i])&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;0&#x27;</span>: res1 += <span class="string">&quot;0000&quot;</span>; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;1&#x27;</span>: res1 += <span class="string">&quot;0001&quot;</span>; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;2&#x27;</span>: res1 += <span class="string">&quot;0010&quot;</span>; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;3&#x27;</span>: res1 += <span class="string">&quot;0011&quot;</span>; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;4&#x27;</span>: res1 += <span class="string">&quot;0100&quot;</span>; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;5&#x27;</span>: res1 += <span class="string">&quot;0101&quot;</span>; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;6&#x27;</span>: res1 += <span class="string">&quot;0110&quot;</span>; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;7&#x27;</span>: res1 += <span class="string">&quot;0111&quot;</span>; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;8&#x27;</span>: res1 += <span class="string">&quot;1000&quot;</span>; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;9&#x27;</span>: res1 += <span class="string">&quot;1001&quot;</span>; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;A&#x27;</span>: res1 += <span class="string">&quot;1010&quot;</span>; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;B&#x27;</span>: res1 += <span class="string">&quot;1011&quot;</span>; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;C&#x27;</span>: res1 += <span class="string">&quot;1100&quot;</span>; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;D&#x27;</span>: res1 += <span class="string">&quot;1101&quot;</span>; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;E&#x27;</span>: res1 += <span class="string">&quot;1110&quot;</span>; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;F&#x27;</span>: res1 += <span class="string">&quot;1111&quot;</span>; <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//二进制字符串每四个数就是一个16进制数，每3个数就是一个8进制数，这里可能存在缺0的情况，需要补充</span></span><br><span class="line"><span class="type">int</span> len2=res1.<span class="built_in">length</span>() ;</span><br><span class="line"><span class="keyword">switch</span>(len2%<span class="number">3</span>)&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>: res1 = <span class="string">&quot;00&quot;</span>+res1; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>: res1 = <span class="string">&quot;0&quot;</span>+res1; <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//此时的res1就是一个合法的二进制表示8进制的字符串了,下面开始生成八进制字符串了 </span></span><br><span class="line">string res2=<span class="string">&quot;&quot;</span>;</span><br><span class="line">len2=res1.<span class="built_in">length</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;len2;i+=<span class="number">3</span>)&#123;</span><br><span class="line">string t = res1.<span class="built_in">substr</span>(i,<span class="number">3</span>); </span><br><span class="line"><span class="comment">// 避免因为000带来导致转为为八进制时候有前导0 </span></span><br><span class="line"><span class="keyword">if</span> (i==<span class="number">0</span>&amp;&amp;t==<span class="string">&quot;000&quot;</span>) res2+=<span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">else</span> res2 += (<span class="number">4</span>*((t[<span class="number">0</span>])-<span class="string">&#x27;0&#x27;</span>)+ <span class="number">2</span>*((t[<span class="number">1</span>])-<span class="string">&#x27;0&#x27;</span> )+ ((t[<span class="number">2</span>])-<span class="string">&#x27;0&#x27;</span>))+<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;res2&lt;&lt;endl;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>  ❗在C++语言中，<code>substr</code>函数是<code>std::string</code>类的成员函数，用于提取字符串的子串</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">string str = <span class="string">&quot;Hello, world!&quot;</span>;</span><br><span class="line">string sub = str.<span class="built_in">substr</span>(<span class="number">7</span>, <span class="number">5</span>); <span class="comment">// 从位置7开始，长度为5的子串，即&quot;world&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>  ❗有一个表示<strong>整数的数字</strong>，想要将其<strong>转换为对应的 ASCII 字符</strong>，可以简单地将其与字符 <code>&#39;0&#39;</code> 相加，这样就会得到对应的 ASCII 字符。</p><h2 id="刷题20240312-1"><a href="#刷题20240312-1" class="headerlink" title="刷题20240312"></a>刷题20240312</h2><p><strong>10进制转16进制</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;string&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">long long num;</span><br><span class="line">cin&gt;&gt;num;</span><br><span class="line">string strHex = &quot;&quot;;</span><br><span class="line">if(num == 0)&#123;</span><br><span class="line">cout&lt;&lt;0;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line">while(num)&#123;</span><br><span class="line">int n = num %16;</span><br><span class="line">if(n==10)&#123;strHex= &#x27;A&#x27;+strHex;&#125;</span><br><span class="line">else if(n==11)&#123;strHex= &#x27;B&#x27;+strHex;&#125;</span><br><span class="line">else if(n==12)&#123;strHex= &#x27;C&#x27;+strHex;&#125;</span><br><span class="line">else if(n==13)&#123;strHex= &#x27;D&#x27;+strHex;&#125;</span><br><span class="line">else if(n==14)&#123;strHex= &#x27;E&#x27;+strHex;&#125;</span><br><span class="line">else if(n==15)&#123;strHex= &#x27;F&#x27;+strHex;&#125;</span><br><span class="line">else&#123;</span><br><span class="line">char x = n+&#x27;0&#x27;;</span><br><span class="line">strHex = string(1,x)+strHex;</span><br><span class="line">&#125;</span><br><span class="line">num = num/16;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;strHex;</span><br><span class="line"></span><br><span class="line">return 0;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//string构造函数来将字符 x 转换为一个字符串</span><br><span class="line">string(1,charN)</span><br></pre></td></tr></table></figure><p><strong>问题描述</strong></p><p>  123321是一个非常特殊的数，它从左边读和从右边读是一样的。<br>  输入一个正整数n， 编程求所有这样的五位和六位十进制数，满足各位数字之和等于n 。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;string&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">int num;</span><br><span class="line">cin&gt;&gt;num;</span><br><span class="line">for(int i=10000;i&lt;=999999;i++)&#123;</span><br><span class="line">int flag = 1;</span><br><span class="line">int count = i;</span><br><span class="line"> int sum = 0;</span><br><span class="line"> string str;</span><br><span class="line"> while(count)&#123;</span><br><span class="line"> int a= count%10;</span><br><span class="line"> sum+=a;</span><br><span class="line"> char x = a+&#x27;0&#x27;;</span><br><span class="line">str = string(1,x)+str;</span><br><span class="line"> count=count/10;</span><br><span class="line">&#125;</span><br><span class="line">if(sum!=num)&#123;continue;&#125;</span><br><span class="line"></span><br><span class="line">for(int i=0;i&lt;str.length()/2;i++)&#123;</span><br><span class="line">if(str[i] != str[str.length()-i-1])&#123;</span><br><span class="line">flag = 0;</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">if(flag == 1)&#123;cout&lt;&lt;i&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的方法是对每一个数字进行判断，比较慢。下面的方法直接找回文数字</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">int n;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"></span><br><span class="line">for (int i=1;i&lt;=9;i++)</span><br><span class="line">for (int j=0;j&lt;=9;j++)</span><br><span class="line">for (int k=0;k&lt;=9;k++)</span><br><span class="line">if (2*i+2*j+k==n)</span><br><span class="line">cout&lt;&lt;i&lt;&lt;j&lt;&lt;k&lt;&lt;j&lt;&lt;i&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">for (int i=1;i&lt;=9;i++)</span><br><span class="line">for (int j=0;j&lt;=9;j++)</span><br><span class="line">for (int k=0;k&lt;=9;k++)</span><br><span class="line">if (2*i+2*j+2*k==n)</span><br><span class="line">cout&lt;&lt;i&lt;&lt;j&lt;&lt;k&lt;&lt;k&lt;&lt;j&lt;&lt;i&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>问题描述</strong></p><p>  1221是一个非常特殊的数，它从左边读和从右边读是一样的，编程求所有这样的四位十进制数。</p><p><strong>输出格式</strong></p><p>  按从小到大的顺序输出满足条件的四位十进制数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">for(int i=1;i&lt;=9;i++)</span><br><span class="line">for(int j=0;j&lt;=9;j++)</span><br><span class="line">cout&lt;&lt;i&lt;&lt;j&lt;&lt;j&lt;&lt;i&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>问题描述</strong></p><p>　　153是一个非常特殊的数，它等于它的每位数字的立方和，即153&#x3D;1*1*1+5*5*5+3*3*3。编程求所有满足这种条件的三位十进制数。</p><p><strong>输出格式</strong></p><p>　　按从小到大的顺序输出满足条件的三位十进制数，每个数占一行。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">for(int i=100;i&lt;1000;i++)&#123;</span><br><span class="line">int count = i;</span><br><span class="line">int sum = 0;</span><br><span class="line">while(count)&#123;</span><br><span class="line">int num = count%10;</span><br><span class="line">sum = sum + num*num*num;</span><br><span class="line">count=count/10;</span><br><span class="line">&#125;</span><br><span class="line">if(i==sum)&#123;cout&lt;&lt;i&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>问题描述</strong></p><p>  杨辉三角形又称Pascal三角形，它的第i+1行是(a+b)i的展开式的系数。</p><p>  它的一个重要性质是：三角形中的每个数字等于它两肩上的数字相加。</p><p><strong>输入格式</strong></p><p>  输入包含一个数n。</p><p><strong>输出格式</strong></p><p>  输出杨辉三角形的前n行。每一行从这一行的第一个数开始依次输出，中间使用一个空格分隔。请不要在前面输出多余的空格。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="type">int</span> lst[n+<span class="number">2</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;=n+<span class="number">1</span>;i++)&#123;</span><br><span class="line">lst[i]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">lst[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=i;j&gt;<span class="number">0</span>;j--)&#123;</span><br><span class="line">lst[j]+=lst[j<span class="number">-1</span>];</span><br><span class="line">cout&lt;&lt;lst[j]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>memset</code> 是一个 C 标准库函数，用于将一块内存区域的前几个字节设置为特定的值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;cstring&gt;</span><br></pre></td></tr></table></figure><p><strong>问题描述</strong></p><p>  给出一个包含n个整数的数列，问整数a在数列中的第一次出现是第几个。</p><p><strong>输入格式</strong></p><p>第一行包含一个整数n。</p><p>第二行包含n个非负整数，为给定的数列，数列中的每个数都不大于10000。</p><p>第三行包含一个整数a，为待查找的数。</p><p><strong>输出格式</strong></p><p>  如果a在数列中出现了，输出它第一次出现的位置(位置从1开始编号)，否则输出-1。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;math.h&gt;</span><br><span class="line">abs()//求绝对值</span><br></pre></td></tr></table></figure><h2 id="刷题20240312-2"><a href="#刷题20240312-2" class="headerlink" title="刷题20240312"></a>刷题20240312</h2><p>递归Fib</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">int fib(int n)&#123;</span><br><span class="line">if(n&lt;3)&#123;return 1;&#125;</span><br><span class="line">else&#123;</span><br><span class="line">return fib(n-1)+fib(n-2);s</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>设置输出的小数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iomanip&gt;</span><br><span class="line">double s = 3.254534;</span><br><span class="line">cout&lt;&lt;fixed&lt;&lt;setprecision(3)&lt;&lt;s;//3.254</span><br></pre></td></tr></table></figure><p>下面是统计一串字符里面出现次数最多的字母（小写），字母最多26个，输入可以用getchar();</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">int count[26]=&#123;0&#125;,max=0,i;</span><br><span class="line">  char ch;</span><br><span class="line">  while((ch=getchar())!=&#x27;\n&#x27;)</span><br><span class="line">    count[ch-&#x27;a&#x27;]++;</span><br><span class="line">  for(i=1;i&lt;26;i++)</span><br><span class="line">    if(count[i]&gt;count[max])</span><br><span class="line">      max=i;</span><br><span class="line">  printf(&quot;%c\n%d&quot;,max+&#x27;a&#x27;,count[max]);</span><br><span class="line">  return 0;</span><br></pre></td></tr></table></figure><h2 id="算法动态规划20240315"><a href="#算法动态规划20240315" class="headerlink" title="算法动态规划20240315"></a>算法动态规划20240315</h2><p><strong>动态规划将小问题的解汇集成大问题的答案</strong></p><h3 id="初探"><a href="#初探" class="headerlink" title="初探"></a>初探</h3><p>问题：给定一个共有 n 阶的楼梯，你每步可以上 1 阶或者 2 阶，请问有多少种方案可以爬到楼顶？</p><p>爬到n阶，那么上一次必然是爬了1阶或者2阶，所以</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;vector&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">//给定一个共有 n 阶的楼梯，</span><br><span class="line">//每步可以上 1 阶或者 2 阶，</span><br><span class="line">//请问有多少种方案可以爬到楼顶？ </span><br><span class="line"></span><br><span class="line">void backtrack(vector&lt;int&gt; &amp;choices, int state, int n,vector&lt;int&gt; &amp;res)&#123;</span><br><span class="line">//当爬到n阶时，方案数量加1</span><br><span class="line">if(state == n)&#123;</span><br><span class="line">res[0]++;</span><br><span class="line">&#125;</span><br><span class="line">//遍历所有选择</span><br><span class="line">for(auto &amp;choice : choices)&#123;</span><br><span class="line">if(state+choice &gt; n)&#123;</span><br><span class="line">continue;</span><br><span class="line">&#125;</span><br><span class="line">backtrack(choices,state+choice,n,res);</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line">int main()&#123;</span><br><span class="line">int n;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line">vector&lt;int&gt; choices = &#123;1,2&#125;;//可以选择爬1，或2阶 </span><br><span class="line">int state = 0; //从第0阶开始</span><br><span class="line">vector&lt;int&gt; res = &#123;0&#125;;//使用res[0]记录方案数量</span><br><span class="line">backtrack(choices,state,n,res);</span><br><span class="line">cout&lt;&lt;res[0];</span><br><span class="line">return 0;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id="数组vector"><a href="#数组vector" class="headerlink" title="数组vector"></a>数组vector</h3><p><strong>定义</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">//T代表数据类型</span><br><span class="line">vector&lt;T&gt; v1;</span><br><span class="line">vector&lt;T&gt; v2(v1) = vector&lt;T&gt;v2 = v1; //使用v2中所有元素初始化v1</span><br><span class="line">vector&lt;T&gt; v3(n,val);//v3元素中包含了n个值为val的元素</span><br><span class="line">vector&lt;T&gt; v4(n);//v4包含n个默认值初始化的元素</span><br><span class="line">vector&lt;T&gt;v5&#123;a,b,c,d&#125;;//使用a,b,c,d初始化v5</span><br><span class="line"></span><br><span class="line">v.push_back(val);//向 vector 的尾端添加值为 val 的元素。</span><br><span class="line">//注意：vector 不支持 push_front 操作。</span><br><span class="line">v.pop_back(val);//删除尾元素，返回void。vector同样 不支持 pop_front 操作。</span><br><span class="line"></span><br><span class="line">v.back();//返回最后一个元素的引用v.end();</span><br><span class="line">v.front()://返回第一个元素的引用v.begin();</span><br><span class="line"></span><br><span class="line">v.size();//求长度</span><br><span class="line">min(v[0],v[1]);//比较求小</span><br><span class="line"></span><br><span class="line">//二维数组,定义了n+1行,3列的数组，并且初始化为0</span><br><span class="line">vector&lt;vector&lt;int&gt;&gt; dp(n+1 ， vector&lt;int&gt;(3,0));</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="动态规划问题特性"><a href="#动态规划问题特性" class="headerlink" title="动态规划问题特性"></a>动态规划问题特性</h3><ul><li><p>分治算法递归地将原问题划分为多个<strong>相互独立的子问题</strong>，直至最小子问题，并在回溯中合并子问题的解，最终得到原问题的解。</p></li><li><p>动态规划也对问题进行递归分解，但与分治算法的主要区别是，<strong>动态规划中的子问题是相互依赖的</strong>，在分解过程中会出现许多重叠子问题。</p></li><li><p>回溯算法在尝试和回退中穷举所有可能的解，并通过剪枝避免不必要的搜索分支。原问题的解由一系列决策步骤构成，我们可以将每个决策步骤之前的子序列看作一个子问题。</p><p>实际上，动态规划常用来求解最优化问题，它们不仅包含重叠子问题，还具有另外两大特性：<strong>最优子结构</strong>、<strong>无后效性</strong>。</p><p>这便可以引出最优子结构的含义：<strong>原问题的最优解是从子问题的最优解构建得来的</strong>。</p><p>无后效性是动态规划能够有效解决问题的重要特性之一，其定义为：<strong>给定一个确定的状态，它的未来发展只与当前状态有关，而与过去经历的所有状态无关</strong>。</p><p>以爬楼梯问题为例，给定状态 i ，它会发展出状态 i+1 和状态 i+2 ，分别对应跳 1 步和跳 2 步。在做出这两种选择时，我们无须考虑状态 i 之前的状态，它们对状态 i 的未来没有影响。</p></li></ul><h3 id="动态规划解题思路"><a href="#动态规划解题思路" class="headerlink" title="动态规划解题思路"></a>动态规划解题思路</h3><ol><li>如何判断一个问题是不是动态规划问题？</li><li>求解动态规划问题该从何处入手，完整步骤是什么？</li></ol><p>  <strong>问题判断：</strong>如果一个问题包含重叠子问题、最优子结构，并满足无后效性，那么它通常适合用动态规划求解。然而，我们很难从问题描述中直接提取出这些特性。因此我们通常会放宽条件，<strong>先观察问题是否适合使用回溯（穷举）解决</strong>。</p><p>  在此基础上，动态规划问题还有一些判断的“加分项”。</p><ul><li><p>问题包含最大（小）或最多（少）等最优化描述。</p></li><li><p>问题的状态能够使用一个列表、多维矩阵或树来表示，并且一个状态与其周围的状态存在递推关系。</p><p>相应地，也存在一些“减分项”。</p></li><li><p>问题的目标是找出所有可能的解决方案，而不是找出最优解。</p></li><li><p>问题描述中有明显的排列组合的特征，需要返回具体的多个方案。</p><p>动态规划的解题流程会因问题的性质和难度而有所不同，但通常遵循以下步骤：描述决策，定义状态，建立dp表，推导状态转移方程，确定边界条件等。</p></li></ul><p>0-1 背包问题</p><p><img src="image-20240318211759433.png" alt="image-20240318211759433"></p><p><img src="image-20240318211809516.png" alt="image-20240318211809516"></p><h2 id="刷题20240328"><a href="#刷题20240328" class="headerlink" title="刷题20240328"></a>刷题20240328</h2><h3 id="礼物"><a href="#礼物" class="headerlink" title="礼物"></a>礼物</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//取消输入输出缓存，加快cin、cout运算时间</span><br><span class="line">ios::sync_with_stdio(false);</span><br><span class="line"></span><br><span class="line">//万能头文件</span><br><span class="line"></span><br><span class="line">#include&lt;bits/stdc++.h&gt;</span><br></pre></td></tr></table></figure><h3 id="跳马"><a href="#跳马" class="headerlink" title="跳马"></a>跳马</h3><p>dps的理解：</p><ol><li>明确结束的条件是什么，退出递归</li><li>边界条件是什么，比如迷宫的话就有墙</li><li>走入下一步之后的标记，然后进行“递”，以及“归”之后对之前的标记的取消</li><li>将代码优化，</li></ol><h2 id="刷题20240329"><a href="#刷题20240329" class="headerlink" title="刷题20240329"></a>刷题20240329</h2><h3 id="试题-算法训练-数的潜能"><a href="#试题-算法训练-数的潜能" class="headerlink" title="试题 算法训练 数的潜能"></a>试题 算法训练 数的潜能</h3><p><a href="https://zhuanlan.zhihu.com/p/95902286">算法学习笔记(4)：快速幂 - 知乎 (zhihu.com)</a></p><h2 id="20240331"><a href="#20240331" class="headerlink" title="20240331"></a>20240331</h2><h3 id="试题-算法训练-娜神平衡"><a href="#试题-算法训练-娜神平衡" class="headerlink" title="试题 算法训练 娜神平衡"></a>试题 算法训练 娜神平衡</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;algorithm&gt;</span><br><span class="line"></span><br><span class="line">abs();//求绝对值</span><br><span class="line"></span><br><span class="line">vector&lt;int&gt; vec;</span><br><span class="line">vec.size()//求长度</span><br><span class="line">sort(vec.begin(), vec.end())//对vec进行排序</span><br><span class="line">vec.push_back(i); //尾部添加i</span><br><span class="line">vec.pop_back();//删除尾部元素</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="20240404"><a href="#20240404" class="headerlink" title="20240404"></a>20240404</h2><h3 id="C-指针-引用"><a href="#C-指针-引用" class="headerlink" title="C++指针 引用"></a>C++指针 引用</h3><p><strong>指针</strong>用来存放数据的地址。定义指针变量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">int a;</span><br><span class="line">int* b = &amp;a;</span><br><span class="line">a=1;</span><br><span class="line">cout&lt;&lt;&quot;b:&quot;&lt;&lt;b&lt;&lt;&quot;\n&quot;;//输出一个地址</span><br><span class="line">cout&lt;&lt;&quot;*b:&quot;&lt;&lt;*b&lt;&lt;&quot;\n&quot;;//输出a的值</span><br><span class="line">//这里指针变量的类型是和代表的数的类型是一致的</span><br><span class="line">//比如：double* p = &amp;a;就是错误的</span><br></pre></td></tr></table></figure><p><strong>引用</strong>当作是一种别名，并且对别名的操作，原数据也会改变。和取地址区别开</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">void defin(int &amp;a)&#123;</span><br><span class="line">a = 1;</span><br><span class="line">&#125;</span><br><span class="line">int main()&#123;</span><br><span class="line">int a = 10;</span><br><span class="line">defin(a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="CCF"><a href="#CCF" class="headerlink" title="CCF"></a>CCF</h1><h2 id="20240422"><a href="#20240422" class="headerlink" title="20240422"></a>20240422</h2><p>1.<strong>double</strong>类型在数值大的情况下会用e的形式表示，1e6 &#x3D; 10^6</p><p>2.Python 中的 <strong>eval()</strong> 函数用于动态执行一个字符串表达式,并返回表达式的计算结果。它的主要作用是将字符串当作有效的表达式来求值并返回计算结果。此时乘法是用*,除法要&#x2F;&#x2F;</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>网络安全</title>
      <link href="/2024/03/04/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
      <url>/2024/03/04/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="1"><a href="#1" class="headerlink" title="1"></a>1</h1><ol><li><strong>SQL注入（SQL Injection）测试</strong>：SQL注入是一种常见的网络安全漏洞，攻击者利用此漏洞通过在应用程序的输入字段中插入恶意的SQL语句来<strong>执行未经授权的数据库操作</strong>。SQL注入测试旨在发现这种漏洞，以便开发人员可以修补它们。测试者尝试通过在输入字段中插入各种SQL语句，包括但不限于恶意查询、更新或删除数据库中的数据，以验证是否存在漏洞。通过这种测试，开发团队可以修复潜在的漏洞，从而增强应用程序的安全性。</li><li><strong>跨站脚本（XSS）测试</strong>：跨站脚本是另一种常见的网络安全漏洞，攻击者利用此漏洞将恶意脚本注入到网页中，从而在用户浏览页面时执行恶意操作。XSS测试旨在检测网站或应用程序中的潜在XSS漏洞。测试者尝试在各种输入字段中插入恶意脚本，例如JavaScript代码，以验证是否存在漏洞。通过这种测试，开发团队可以修复潜在的XSS漏洞，以防止攻击者利用它们对用户进行攻击。</li></ol><p>在网站中，通常的情况是：</p><ol><li><p><strong>index.html</strong>：通常是网站的主页或默认页面。它可能包含有关网站的概述、导航链接以及其他内容。</p></li><li><p><strong>admin.html</strong>：这通常是管理员页面，用于管理网站或应用程序的各种功能。管理员页面通常需要身份验证，并提供对用户、内容或系统设置的访问权限。</p></li><li><p><strong>system.html</strong>：这通常是系统管理页面，用于管理网站或应用程序的后端系统功能。这可能包括对数据库、服务器设置、日志等的访问和管理。</p></li></ol><p>相似的页面可能包括：</p><ul><li><strong>login.html</strong>：用于用户登录的页面。</li><li><strong>register.html</strong>：用于用户注册的页面。</li><li><strong>profile.html</strong>：用户个人资料页面，允许用户查看和编辑其个人信息。</li><li><strong>contact.html</strong>：联系页面，允许用户发送消息或反馈给网站管理员。</li><li><strong>about.html</strong>：关于页面，提供有关网站或组织的信息和历史。</li></ul><p>HTTP（Hypertext Transfer Protocol）是一种用于传输超文本的协议。在Web开发中，有两种主要的HTTP请求方法：GET和POST。它们在如何向服务器发送数据以及如何从服务器接收响应方面有所不同。</p><ol><li><p><strong>GET请求</strong>：</p><ul><li>GET请求用于从服务器获取数据。通常用于获取页面、图片、文件等资源，以及通过URL参数将数据发送给服务器。</li><li>数据通过URL的查询字符串（query string）发送，参数和值之间用<code>?</code>分隔，参数之间用<code>&amp;</code>分隔，例如：<code>http://example.com/page?name=John&amp;age=30</code>。</li><li>GET请求的数据会显示在URL中，因此不适合传输敏感信息。</li><li>GET请求可以被缓存，以及被添加到浏览器的历史记录中。</li><li>由于数据以明文形式传输，对于较大的数据量或包含敏感信息的数据，不适合使用GET请求。</li></ul></li><li><p><strong>POST请求</strong>：</p><ul><li>POST请求用于向服务器提交数据。通常用于提交表单数据、上传文件等操作。</li><li>数据通过请求的主体（body）发送，而不是URL，因此不会在URL中暴露数据。</li><li>POST请求的数据不会被缓存，也不会被添加到浏览器的历史记录中。</li><li>POST请求可以发送大量数据，也更安全，因为数据不会显示在URL中，但仍然可以使用HTTPS协议进行加密。</li><li>POST请求适用于敏感信息或需要更多安全性的情况。</li></ul></li></ol><p>总的来说，GET请求适合用于获取数据，并且可以通过URL直接访问，而POST请求适合用于提交数据，特别是涉及敏感信息的情况，因为数据不会在URL中暴露。</p><ul><li><strong>BurpSuite：</strong> Burp Suite是进行Web应用安全测试集成平台。它的各种工具无缝地工作在一起，以支持整个测试过程中，从最初的映射和应用程序的攻击面分析，通过发现和利用安全漏洞。</li></ul><h2 id="基础配置课程"><a href="#基础配置课程" class="headerlink" title="基础配置课程"></a>基础配置课程</h2><h3 id="BurpSuite初配置"><a href="#BurpSuite初配置" class="headerlink" title="BurpSuite初配置"></a>BurpSuite初配置</h3><p><strong>设置JVM内存大小</strong>，Java虚拟机（Java Virtual Machine）的缩写，负责在不同的计算机平台上执行Java字节码（Java bytecode）。</p><p>  Burp Suite自己会自动分配最大的可用内存，具体实际分配了多少内存，默认一般为64M。</p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar Xmx128M BurpLoader.jar</span><br></pre></td></tr></table></figure><p>  <strong>配置BurpSuite代理</strong></p><p>  Burp Suite代理工具是以拦截代理的方式，拦截所有通过代理的网络流量，如客户端的请求数据、服务器端的返回信息等。Burp Suite主要拦截http和https协议的流量，通过拦截，Burp Suite以中间人的方式，可以对客户端请求数据、服务端返回做各种处理，以达到安全评估测试的目的。</p><p>  BurpSuite上：在Proxy（代理）上的options里的Running查看是否勾选。</p><p>  浏览器代理：选项-高级-网络-设置-选择手动代理，http代理一栏填写127.0.0.1，端口一栏写8080（浏览器会不同）</p><h3 id="BurpSuite之Proxy模块"><a href="#BurpSuite之Proxy模块" class="headerlink" title="BurpSuite之Proxy模块"></a>BurpSuite之Proxy模块</h3><p>  拦截功能确认：Proxy-Intercept,可以看到Intercept is on.</p><p>  打开浏览器，输入网址，此时数据流量会经过Burp Proxy并暂停，直到带点击Forward.</p><p>  拦截流量的消息分析：Raw，headers，Hex，Params</p><p>  Forward功能是当你查看过消息或者重新编辑过消息之后，点击此按钮，<strong>将发送消息至服务器端</strong>。</p><p>  Action的功能是除了将当前请求的消息传递到<code>Spider、Scanner、Repeater、Intruder、Sequencer、Decoder、Comparer</code>组件外，还可以做一些请求消息的修改，如改变GET或者POST请求方式、改变请求body的编码，同时也可以改变请求消息的拦截设置。如不再拦截此主机的消息、不再拦截此IP地址的消息、不再拦截此种文件类型的消息、不再拦截此目录的消息，也可以指定针对此消息拦截它的服务器端返回消息：</p><h3 id="SSL与高级代理"><a href="#SSL与高级代理" class="headerlink" title="SSL与高级代理"></a>SSL与高级代理</h3><p>  HTTPS协议是为了数据传输安全的需要，在HTTP原有的基础上，加入了安全套接字层SSL协议，通过CA证书来验证服务器的身份，并对通信消息进行加密。</p><p>  SSL隐形代理，配置hosts文件，Windows操作系统下的目录位置<code>C:\Windows/System32/drivers/etc/hosts</code>，而Linux或者Unix下的目录为<code>/etc/hosts</code>，记事本打开该文件，添加如下行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1 example.com</span><br></pre></td></tr></table></figure><p>  这样的意义就是把所有关于<code>example.com</code>的请求指向本机。</p><h2 id="常用模块系列"><a href="#常用模块系列" class="headerlink" title="常用模块系列"></a>常用模块系列</h2><h3 id="BurpSuite之Target模块"><a href="#BurpSuite之Target模块" class="headerlink" title="BurpSuite之Target模块"></a>BurpSuite之Target模块</h3><p><strong>目标域设置Target Scope</strong></p><p>  这里域名或主机名就是我们说的作用域；如果我们想限制得更为细粒度化，比如，你只想拦截login目录下的所有请求，这时我们也可以在此设置，此时，作用域就是目录。</p><p><img src="image-20240306163219236.png" alt="image-20240306163219236"></p><p><strong>站点地图 Site Map</strong></p><p>  在使用攻击面分析功能时，需要注意，此功能主要是针对站点地图中的请求URL进行分析，如果某些URL没有记录，则不会被分析到。同时，在实际使用中，存在很点站点使用伪静态，如果请求的URL中不带有参数，则分析时无法区别，只能当做静态URL来分析。</p><p><strong>攻击面分析</strong></p><p>  攻击面分析是Burp Suite 交互工具（Engagement tools）中的功能，打开Analyze Target。</p><p>  能看到概况、动态URL、静态URL、参数4个视图</p><h3 id="BurpSuite之Spider模块"><a href="#BurpSuite之Spider模块" class="headerlink" title="BurpSuite之Spider模块"></a>BurpSuite之Spider模块</h3><p>  Burp Spider的功能主要使用于大型的应用系统测试，它能在很短的时间内帮助我们快速地了解系统的结构和分布情况</p><p><strong>Spider控制</strong>control</p><p>  Spider 状态除了显示当前进度、传输情况、请求队列等统计信息外，还有Spider运行&#x2F;暂停按钮与清空队列按钮，分别用来控制Spider是否运行和队列中的数据管理。而Spider 作用域是用来控制Spider的抓取范围，从图中我们可以看到有两种控制方式，一种是使用上一章讲的Target Scope，另一种是用户自定义。当我们选中用户自定义按钮</p><p><strong>可选项设置Options</strong></p><p>  Spider可选项设置由抓取设置、抓取代理设置、表单提交设置、应用登陆设置、蜘蛛引擎设置、请求消息头设置六个部分组成。</p><h3 id="BurpSuite之Scanner模块"><a href="#BurpSuite之Scanner模块" class="headerlink" title="BurpSuite之Scanner模块"></a>BurpSuite之Scanner模块</h3><p>  Burp Scanner的功能主要是用来自动检测web系统的各种漏洞，我们可以使用Burp Scanner代替我们手工去对系统进行普通漏洞类型的渗透测试，</p><p>  Burp Scanner基本使用主要分为以下14个步骤：</p><ol><li>确认Burp Suite正常启动并完成浏览器代理的配置。</li><li>进入Burp Proxy，关闭代理拦截功能，快速的浏览需要扫描的域或者URL模块。当我们浏览时，默认情况下，Burp Scanner会扫描通过代理服务的请求，并对请求的消息进行分析来辨别是非存在系统漏洞。同时，当我们打开Burp Target时，也会在站点地图中显示请求的URL树。</li></ol><h2 id="扩展模块系列"><a href="#扩展模块系列" class="headerlink" title="扩展模块系列"></a>扩展模块系列</h2><h3 id="intruder模块"><a href="#intruder模块" class="headerlink" title="intruder模块"></a>intruder模块</h3><p>  它的工作原理是：Intruder在原始请求数据的基础上，通过修改各种请求参数，以获取不同的请求应答。每一次请求中，Intruder通常会携带一个或多个有效攻击载荷（Payload),在不同的位置进行攻击重放，通过应答数据的比对分析来获得需要的特征数据</p><p>暴力破解</p><h3 id="Repeater模块"><a href="#Repeater模块" class="headerlink" title="Repeater模块"></a>Repeater模块</h3><p>  使用Repeater来进行请求与响应的消息验证分析，比如修改请求参数，验证输入的漏洞；修改请求参数，验证逻辑越权；从拦截历史记录中，捕获特征性的请求消息进行请求重放。</p><h3 id="Comparer模块"><a href="#Comparer模块" class="headerlink" title="Comparer模块"></a>Comparer模块</h3><p>  提供一个可视化的差异比对功能，来对比分析两次数据之间的区别。使用中的场景可能是：</p><ol><li>枚举用户名过程中，对比分析登录成功和失败时，服务器端反馈结果的区别。</li><li>使用 Intruder 进行攻击时，对于不同的服务器端响应，可以很快的分析出两次响应的区别在哪里。</li><li>进行SQL注入的盲注测试时，比较两次响应消息的差异，判断响应结果与注入条件的关联关系。</li></ol><h3 id="Decoder模块"><a href="#Decoder模块" class="headerlink" title="Decoder模块"></a>Decoder模块</h3><p>  Burp Decoder的功能比较简单，作为Burp Suite中一款编码解码工具，它能对原始数据进行各种编码格式和散列的转换。其界面如下图，主要由输入域、输出域、编码解码选项三大部分组成。</p><h2 id="高级功能系列"><a href="#高级功能系列" class="headerlink" title="高级功能系列"></a>高级功能系列</h2><h3 id="数据查找和扩展功能的使用"><a href="#数据查找和扩展功能的使用" class="headerlink" title="数据查找和扩展功能的使用"></a>数据查找和扩展功能的使用</h3><p>  BurpSuite高级功能在界面布局上主要集中在两大块，一是菜单栏，另一个是右击菜单的Engagement tools。 </p><p>  <strong>Burp</strong> 菜单下包含的数据查找（Search）、组件状态存储、组件状态恢复三部分。</p><ul><li>数据查找（Search） 数据查找功能主要用来快速搜索Target、Proxy、Repeater三个组件中的请求和应答消息的内容，</li><li>组件状态存储和恢复，与组件状态和恢复相关的子菜单比较多，分别是： Save state 保存当前Burp的状态，主要保存站点地图、Proxy历史日志、扫描的结果和正在扫描的队列、Repeater当前和历史记录、Suite其他工具组件的所有配置信息。当我们点击【Save state】时，Burp将会提示我们是否只保存Scope中的数据</li></ul><p><strong>Intruder</strong>菜单主要用于自动化攻击的相关配置。</p><ul><li><code>Start attack</code> 开始发起攻击</li><li><code>Open save attack</code> 重新加载之前保存的Intruder攻击文件</li><li><code>Save attack config、Load attack config、Copy - attack config</code>，主要控制Intruder的攻击配置信息</li><li><code>Automatic payload position</code>主要用于控制payload的使用方式：替换参数值或者追加参数值</li><li><code>Configure predefined payload lists</code>用于控制Burp默认的payload字典值，当我们点击此菜单时，会弹出payload字典配置文件的界面，</li></ul><p><strong>Repeater</strong> Intruder菜单主要用于Repeater工具的控制</p><ul><li><code>Update Content-Length</code> 当执行Repeater操作时，自动更新消息头中的Content-Length</li><li><code>Unpack gzip /deflate</code> 解压压缩文件</li><li><code>Follow redirections</code> 跳转控制，可以选择从不跳转、同一站点内跳转、Scope内跳转、始终跳转四种的其中之一</li><li><code>Process cookie in redirections</code> 跳转的同时是否处理Cookie View主要控制Repeater面板整个布局</li></ul><p><strong>了解Engagement tools</strong></p><p><img src="image-20240306182301394.png" alt="image-20240306182301394"></p><ul><li><p><code>Find references</code>是指对选中的某条Http消息获取其referer信息</p></li><li><p><strong>Discover content</strong>是指对选中的某条Http消息，根据其url路径，进行目录枚举和文件枚举操作。当我们点击后，将弹出其配置界面。</p></li><li><p><strong>Schedule task</strong>任务时间表 任务时间表的功能主要是把当前选中的url作为初始路径，然后进行多种任务的选择，进入任务时间表进行执行。</p></li><li><p><strong>Generate CSRF Poc</strong>生成CSRF的POC 此功能的作用是，依据选中的http消息，自动生成CSRF的POC内容。当我们把POC的内容保存为HTML即可执行。</p><p>CSRF（Cross-Site Request Forgery，跨站请求伪造）漏洞是一种网络安全漏洞，它利用了用户已经通过认证的会话来执行未经用户授权的操作。攻击者在这种攻击中会通过某种方式诱使受害者在不知情的情况下执行恶意操作，例如在受害者登录了某个网站后，攻击者通过操纵另一个网站的内容，使受害者的浏览器向目标网站发送恶意请求。</p></li></ul><h3 id="BurpSuite全局参数设置和使用"><a href="#BurpSuite全局参数设置和使用" class="headerlink" title="BurpSuite全局参数设置和使用"></a>BurpSuite全局参数设置和使用</h3><p><strong>Burp 网络连接设置（Connections）</strong></p><ul><li><p>平台身份认证（Platform Authentication）</p></li><li><p>上游代理服务器（Upstream Proxy Servers）</p></li><li><p>Socks代理.这些设置允许我们配置Burp使用SOCKS代理的方式进行所有传出的通信，但此设置只在TCP层生效，所有出站请求将通过这个代理发送。</p></li><li><p>超时设置（Timeouts）</p></li><li><p>主机名或域名解析.我们可以指定主机名映射到IP地址，来覆盖本地计算机提供的DNS解析。</p></li><li><p>Scope之外的请求</p></li></ul><p><strong>会话(Session)设置</strong></p><p>  会话处理规则（Session Handling Rules） 如下图所示，Burp允许自定义会话处理规则的列表，这能让我们细粒度地控制Burp如何处理应用程序的会话处理机制和相关功能。</p><h3 id="BurpSuite应用商店插件的使用"><a href="#BurpSuite应用商店插件的使用" class="headerlink" title="BurpSuite应用商店插件的使用"></a>BurpSuite应用商店插件的使用</h3><h2 id="组合技巧系列"><a href="#组合技巧系列" class="headerlink" title="组合技巧系列"></a>组合技巧系列</h2><h3 id="学习BurpSuiteb目录与文件扫描测试"><a href="#学习BurpSuiteb目录与文件扫描测试" class="headerlink" title="学习BurpSuiteb目录与文件扫描测试"></a>学习BurpSuiteb目录与文件扫描测试</h3><h3 id="使用sqlmap插件"><a href="#使用sqlmap插件" class="headerlink" title="使用sqlmap插件"></a>使用sqlmap插件</h3><p>  在<code>OWSAP Top 10</code>中，注入型漏洞是排在第一位的，而在注入型漏洞中，SQL注入是远比命令行注入、Xpath注入、Ldap注入更常见。这就是本章要讲述的主要内容：在web应用程序的渗透测试中，如何使用Burp和Sqlmap的组合来进行SQL注入漏洞的测试。</p><h3 id="BurpSuite配合sqlmap工具实现被动式注入发现"><a href="#BurpSuite配合sqlmap工具实现被动式注入发现" class="headerlink" title="BurpSuite配合sqlmap工具实现被动式注入发现"></a>BurpSuite配合sqlmap工具实现被动式注入发现</h3><ul><li><p><code>-l</code>:从文件读取http请求</p></li><li><p><code>--batch</code>:自动扫描时为防止中断，会自动选择yes</p></li><li><p><code>--smart</code>:（可选），启发式快速判断，节约时间</p><p>csv文件打开后，在一个完整的链接后面如果存在请求类型和参数名之类的值，则说明此链接是存在注入的，如上图，<code>http://172.16.12.2:80/dwva/vulnerabilities/sqli/test.php?id=1</code>，是get请求的id参数存在注入漏洞。</p></li></ul><h3 id="BurpSuiteb获取数据测试"><a href="#BurpSuiteb获取数据测试" class="headerlink" title="BurpSuiteb获取数据测试"></a>BurpSuiteb获取数据测试</h3><h3 id="BurpSuite暴力破解后台测试"><a href="#BurpSuite暴力破解后台测试" class="headerlink" title="BurpSuite暴力破解后台测试"></a>BurpSuite暴力破解后台测试</h3><h3 id="Burpsuite暴力破解一句话木马"><a href="#Burpsuite暴力破解一句话木马" class="headerlink" title="Burpsuite暴力破解一句话木马"></a>Burpsuite暴力破解一句话木马</h3><h3 id="BurpSuite突破文件上传"><a href="#BurpSuite突破文件上传" class="headerlink" title="BurpSuite突破文件上传"></a>BurpSuite突破文件上传</h3><h2 id="网络扫描实验"><a href="#网络扫描实验" class="headerlink" title="网络扫描实验"></a>网络扫描实验</h2><h3 id="使用SoftPerfect-Network-Scanner扫描网络"><a href="#使用SoftPerfect-Network-Scanner扫描网络" class="headerlink" title="使用SoftPerfect Network Scanner扫描网络"></a>使用SoftPerfect Network Scanner扫描网络</h3><h2 id="缓冲区溢出漏洞分析"><a href="#缓冲区溢出漏洞分析" class="headerlink" title="缓冲区溢出漏洞分析"></a>缓冲区溢出漏洞分析</h2><h3 id="基本的栈溢出原理"><a href="#基本的栈溢出原理" class="headerlink" title="基本的栈溢出原理"></a>基本的栈溢出原理</h3><ul><li><p>两个汇编指令</p><ul><li>push <code>将数据压入栈</code></li><li>pop <code>将数据弹出栈</code></li></ul></li><li><p>什么是栈溢出？</p><p><code>栈溢出就是缓冲区溢出的一种。 由于缓冲区溢出而使得有用的存储单元被改写,往往会引发不可预料的后果。程序在运行过程中，为了临时存取数据的需要，一般都要分配一些内存空间，通常称这些空间为缓冲区。如果向缓冲区中写入超过其本身长度的数据，以致于缓冲区无法容纳，就会造成缓冲区以外的存储单元被改写，这种现象就称为缓冲区溢出。</code></p></li><li><p>栈溢出原理</p><p><code>栈溢出就是不顾栈中分配的局部数据块大小，向该数据块写入了过多的数据，导致数据越界，结果覆盖了老的栈数据。 或者解释为 在长字符串中嵌入一段代码，并将过程的返回地址覆盖为这段代码的地址，这样当过程返回时，程序就转而开始执行这段自编的代码了.</code></p></li><li><p>汇编知识</p><p><strong>mov</strong> <code>赋值语句</code></p><p><strong>call</strong> <code>在执行call命令时，程序会执行两个操作</code></p><ul><li>1.向堆栈中压入下一行程序的地址</li><li>2.JMP到call的子程序地址处</li></ul><p><strong>RET</strong> <code>与call命令想类似，在执行ret命令的同时，程序也会执行以下两个操作</code></p><ul><li>1.将当前的ESP中指向的地址出栈</li><li>2.JMP到这个地址</li></ul></li></ul><h1 id="创新实践项目"><a href="#创新实践项目" class="headerlink" title="创新实践项目"></a>创新实践项目</h1><h2 id="修改系统注册表"><a href="#修改系统注册表" class="headerlink" title="修改系统注册表"></a>修改系统注册表</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">AddReg</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::string regName = <span class="string">&quot;Software\\Microsoft\\Windows\\CurrentVersion\\Run&quot;</span>;</span><br><span class="line">    std::string szBuf = <span class="string">&quot;C:\\Windows\\notepad.exe&quot;</span>;</span><br><span class="line">    HKEY hKey = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">RegOpenKey</span>(HKEY_CURRENT_USER, regName.<span class="built_in">c_str</span>(), &amp;hKey) == ERROR_SUCCESS)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">RegSetValueEx</span>(hKey, <span class="string">&quot;Hacked&quot;</span>, <span class="number">0</span>, REG_EXPAND_SZ, (LPBYTE)szBuf.<span class="built_in">c_str</span>(), szBuf.<span class="built_in">length</span>() + <span class="number">1</span>) == ERROR_SUCCESS)</span><br><span class="line">        &#123;</span><br><span class="line">            std::cout &lt;&lt; <span class="string">&quot;Registry key added successfully.&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            std::cerr &lt;&lt; <span class="string">&quot;Error: Unable to set registry value.&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">RegCloseKey</span>(hKey);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        std::cerr &lt;&lt; <span class="string">&quot;Error: Unable to open registry key.&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">AddReg</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="系统管理"><a href="#系统管理" class="headerlink" title="系统管理"></a>系统管理</h2><h3 id="使用CurrProcess和Process-Explorer来查看进程信息"><a href="#使用CurrProcess和Process-Explorer来查看进程信息" class="headerlink" title="使用CurrProcess和Process Explorer来查看进程信息"></a>使用CurrProcess和Process Explorer来查看进程信息</h3><p>Process Explorer”转存一份 explorer.exe的虚拟内存映像dmp文件，用来分析进程</p><h3 id="使用Event-Log-Explorer查看Windows系统日志"><a href="#使用Event-Log-Explorer查看Windows系统日志" class="headerlink" title="使用Event Log Explorer查看Windows系统日志"></a>使用Event Log Explorer查看Windows系统日志</h3><h3 id="使用EVTSYS和Kiwi-Syslog-Server记录windows日志"><a href="#使用EVTSYS和Kiwi-Syslog-Server记录windows日志" class="headerlink" title="使用EVTSYS和Kiwi Syslog Server记录windows日志"></a>使用EVTSYS和Kiwi Syslog Server记录windows日志</h3><h3 id="使用Multimon来实时检测系统"><a href="#使用Multimon来实时检测系统" class="headerlink" title="使用Multimon来实时检测系统"></a>使用Multimon来实时检测系统</h3><h3 id="使用regscanner检索注册表信息"><a href="#使用regscanner检索注册表信息" class="headerlink" title="使用regscanner检索注册表信息"></a>使用regscanner检索注册表信息</h3><h3 id="使用system-scanner检测进程信息"><a href="#使用system-scanner检测进程信息" class="headerlink" title="使用system scanner检测进程信息"></a>使用system scanner检测进程信息</h3>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>pytorch</title>
      <link href="/2023/12/01/pytorch/"/>
      <url>/2023/12/01/pytorch/</url>
      
        <content type="html"><![CDATA[<h1 id="Anaconda"><a href="#Anaconda" class="headerlink" title="Anaconda"></a>Anaconda</h1><h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#更新conda</span><br><span class="line">conda update -n base conda</span><br><span class="line">#创建虚拟环境 python3.9</span><br><span class="line">conda create -n python3.9 python=3.9</span><br><span class="line">#显示所有的虚拟环境</span><br><span class="line">conda env list</span><br><span class="line">conda info --envs</span><br><span class="line">#激活虚拟环境</span><br><span class="line">conda activate env_name</span><br><span class="line">#关闭虚拟环境</span><br><span class="line">conda deactivate</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="更新、卸载等"><a href="#更新、卸载等" class="headerlink" title="更新、卸载等"></a>更新、卸载等</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#查看以及安装的文件包</span><br><span class="line">conda list</span><br><span class="line">#查看指定虚拟环境下的安装包</span><br><span class="line">conda list -n env_name</span><br><span class="line">#更新文件包</span><br><span class="line">conda update package_name</span><br><span class="line">#删除文件包</span><br><span class="line">conda uninstall package_name</span><br><span class="line">#删除虚拟环境</span><br><span class="line">conda remove -n env_name --all</span><br></pre></td></tr></table></figure><h3 id="查看、添加、删除源"><a href="#查看、添加、删除源" class="headerlink" title="查看、添加、删除源"></a>查看、添加、删除源</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">#查看源</span><br><span class="line">conda config --show channels</span><br><span class="line">#添加源</span><br><span class="line">conda config --add channels 源名</span><br><span class="line">#删除</span><br><span class="line">conda config --remove channels 源名</span><br><span class="line">channels:</span><br><span class="line">#清华</span><br><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/</span><br><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/</span><br><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge/</span><br><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/pytorch/</span><br><span class="line">#上交</span><br><span class="line">conda config --add channels https://mirrors.sjtug.sjtu.edu.cn/anaconda/pkgs/main/</span><br><span class="line">conda config --add channels https://mirrors.sjtug.sjtu.edu.cn/anaconda/pkgs/free/</span><br><span class="line">conda config --add channels https://mirrors.sjtug.sjtu.edu.cn/anaconda/cloud/conda-forge/</span><br><span class="line">#中国科学技术大学</span><br><span class="line">conda config --add channels https://mirrors.ustc.edu.cn/anaconda/pkgs/main/</span><br><span class="line">conda config --add channels https://mirrors.ustc.edu.cn/anaconda/pkgs/free/</span><br><span class="line">conda config --add channels https://mirrors.ustc.edu.cn/anaconda/cloud/conda-forge/</span><br><span class="line">#阿里</span><br><span class="line">conda config --add channels http://mirrors.aliyun.com/pypi/simple/</span><br><span class="line">#中国科技大学</span><br><span class="line">conda config --add channels https://pypi.mirrors.ustc.edu.cn/simple/</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="PyQt5"><a href="#PyQt5" class="headerlink" title="PyQt5"></a>PyQt5</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#查看环境</span><br><span class="line">conda info --envs </span><br><span class="line"></span><br><span class="line">#进入环境</span><br><span class="line">activate 环境名</span><br><span class="line"></span><br><span class="line">#安装pyqt</span><br><span class="line">pip install -i https://pypi.tuna.tsinghua.edu.cn/simple PyQt5</span><br><span class="line"></span><br><span class="line">#安装pyqt-tools</span><br><span class="line">pip install -i https://pypi.tuna.tsinghua.edu.cn/simple PyQt5-tools </span><br><span class="line"></span><br><span class="line">#PyQt-Fluent-Widgets插件安装</span><br><span class="line">pip install &quot;PyQt-Fluent-Widgets[full]&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="CUDA"><a href="#CUDA" class="headerlink" title="CUDA"></a>CUDA</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ol><li><p>打开NVIDIA 控制面板</p></li><li><p>点击左下角系统信息</p><p><img src="image-20231201212239360.png" alt="image-20231201212239360"></p></li><li><p>在第一行可以看到驱动程序版本</p><p><img src="image-20231201212303772.png" alt="image-20231201212303772"></p></li><li><p>再点击组件可以看到GPU驱动版本</p><p><img src="image-20231201212338688.png" alt="image-20231201212338688"></p></li></ol><p>版本要求<a href="https://docs.nvidia.com/cuda/cuda-toolkit-release-notes/index.html#title-resolved-issues">1. CUDA 12.3 Update 1 发行说明 — 发行说明 12.3 文档 (nvidia.com)</a></p><p>下载CUDA Toolkit<a href="https://developer.nvidia.com/cuda-toolkit-archive">CUDA Toolkit Archive | NVIDIA Developer</a></p><ul><li><strong>定义：</strong> CUDA（Compute Unified Device Architecture）是由 NVIDIA 提供的一种并行计算平台和应用程序编程接口（API）。CUDA Toolkit 包含了一组用于在 NVIDIA GPU 上进行<strong>并行计算的工具和库</strong>。</li><li><strong>用途：</strong> CUDA Toolkit 允许开发者使用 GPU 加速执行计算密集型任务，特别是适用于深度学习、科学计算、模拟等领域。它提供了一种在 GPU 上运行通用计算任务的编程模型。</li></ul><p>下载cudnn<a href="https://developer.nvidia.com/rdp/cudnn-archive">cuDNN 存档 |NVIDIA 开发者</a></p><ul><li><strong>定义：</strong> cuDNN 是 NVIDIA 提供的<strong>深度神经网络库</strong>，用于在 GPU 上进行深度学习任务。它是为深度神经网络提供高性能、高效率的实现而设计的。</li><li><strong>用途：</strong> cuDNN 通过提供高度优化的原语和功能，加速了深度学习模型的训练和推断过程。它为深度学习框架提供了基本的构建模块，如卷积、池化、归一化等，使这些框架能够更高效地在 NVIDIA GPU 上运行。</li></ul><p>CUDA安装完成（建议默认路径），cudnn下载后解压三个文件夹至CUDA的如下安装目录覆盖，即可完成安装</p><p><img src="image-20231201220603897.png" alt="image-20231201220603897"></p><p>在系统环境变量里查看是否CUDA环境配置成功，没有可以手动配置</p><p><img src="image-20231201220801200.png" alt="image-20231201220801200"></p><p>然后用Win+R快捷键输入cmd打开终端，输入nvcc -V,如下图所示表示安装cuda成功</p><p><img src="image-20231201220858002.png" alt="image-20231201220858002"></p><p>打开CUDA安装目录下的extras，然后打开demo_suit，然后在文件位置处输入cmd，能打开对应位置的命令行，在命令行中输入bandwidthTest.exe 和 deviceQuery.exe，出现如下说明cudnn安装成功</p><p><img src="image-20231201221051469.png" alt="image-20231201221051469"></p><p><img src="image-20231201221111293.png" alt="image-20231201221111293"></p><p><img src="image-20231201221139985.png" alt="image-20231201221139985"></p><h1 id="Pytorch"><a href="#Pytorch" class="headerlink" title="Pytorch"></a>Pytorch</h1><h2 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h2><p>打开指定的虚拟环境</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda activate env_name</span><br></pre></td></tr></table></figure><p>进入Pytorch官网<a href="https://pytorch.org/">PyTorch</a>，找到合适自己电脑的版本</p><p><img src="image-20231201221403932.png" alt="image-20231201221403932"></p><p>复制这个命令到Anaconda Powershell Prompt（此时已经在指定的虚拟环境），确认下载即可</p><p><strong>测试是否安装成功：</strong></p><p>依次输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">python</span><br><span class="line">import torch</span><br><span class="line">torch.__version__</span><br><span class="line">torch.cuda.is_available()</span><br></pre></td></tr></table></figure><p>显示True即成功</p><h1 id="SSH"><a href="#SSH" class="headerlink" title="SSH"></a>SSH</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#进入power shell</span><br><span class="line">ssh -t username@your_windows_machine powershell</span><br><span class="line">#cmd进入powershell</span><br><span class="line">powershell</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>cmd操作txt文件</strong></p><p>注意，在 <code>echo</code> 命令和 <code>&gt;</code> 或 <code>&gt;&gt;</code> 之间有一个空格。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">echo. &gt; filename.txt #新建txt文件</span><br><span class="line">echo hellp &gt;&gt; a.txt  #追加</span><br><span class="line">echo hellp &gt; a.txt  #覆盖</span><br><span class="line">more a.txt #从头读取</span><br><span class="line">more +2 a.txt #从第二行开始读取</span><br><span class="line">del filename.txt#删除txt文件，回收站没有</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>clean code</title>
      <link href="/2023/11/27/clean-code/"/>
      <url>/2023/11/27/clean-code/</url>
      
        <content type="html"><![CDATA[<h1 id="一"><a href="#一" class="headerlink" title="一"></a>一</h1><p>使用能透露意图的名字</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public List&lt;int[]&gt; getThem() &#123;</span><br><span class="line">List&lt;int[]&gt; list1 = new ArrayList&lt;int[]&gt;();</span><br><span class="line">for (int[] x : theList)</span><br><span class="line">if (x[0] == 4)</span><br><span class="line">list1.add(x);</span><br><span class="line">return list1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public List&lt;int[]&gt; getFlaggedCells() &#123;</span><br><span class="line">List&lt;int[]&gt; flaggedCells = new ArrayList&lt;int[]&gt;();</span><br><span class="line">for (int[] cell : gameBoard)</span><br><span class="line">if (cell[STATUS_VALUE] == FLAGGED)</span><br><span class="line">flaggedCells.add(cell);</span><br><span class="line">return flaggedCells;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public List&lt;Cell&gt; getFlaggedCells() &#123;</span><br><span class="line">List&lt;Cell&gt; flaggedCells = new ArrayList&lt;Cell&gt;();</span><br><span class="line">for (Cell cell : gameBoard)</span><br><span class="line">if (cell.isFlagged())</span><br><span class="line">flaggedCells.add(cell);</span><br><span class="line">return flaggedCells;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>数据结构</title>
      <link href="/2023/11/23/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
      <url>/2023/11/23/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h1 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h1><p><strong>首元结点：</strong>是指链表中存储第一个数据元素的结点</p><p><strong>头结点：</strong>是在首元结点之前附设的一个结点，其指针域指向首元结点，头结点的数据域可以不存储任何信息</p><p><strong>头指针：</strong>是指向链表中第一个结点的指针，若有头结点，<strong>则指向头结点</strong>；若没有头结点，<strong>则指向首元结点</strong></p><h1 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h1><p>**&amp;**是取地址</p><p>*****是取值</p><p>指针间接赋值：</p><ol><li>两个变量：普通变量、指针变量</li><li>建立关系 指针变量&#x3D;&amp;普通变量</li><li>通过 *运算符赋值 *指针变量&#x3D;值</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">int a = 0;</span><br><span class="line">int* b = &amp;a;//&amp;a代表的数据类型是int*</span><br><span class="line">cout&lt;&lt;b&lt;&lt;endl;  //把int*看作一个数据类型，而b就是代表&amp;a,也就是地址</span><br><span class="line">cout&lt;&lt;a&lt;&lt;endl;</span><br><span class="line">cout&lt;&lt;&amp;a&lt;&lt;endl;</span><br><span class="line">cout&lt;&lt;*b&lt;&lt;endl;</span><br></pre></td></tr></table></figure><p><img src="image-20231123195007882.png" alt="image-20231123195007882"></p><h2 id="const修饰的指针变量"><a href="#const修饰的指针变量" class="headerlink" title="const修饰的指针变量"></a>const修饰的指针变量</h2><h3 id="修饰普通变量"><a href="#修饰普通变量" class="headerlink" title="修饰普通变量"></a>修饰普通变量</h3><h4 id="C语言"><a href="#C语言" class="headerlink" title="C语言"></a>C语言</h4><p>在C语言中，const修饰的<strong>全局变量保存在常量区</strong>，既不能通过变量名去修改，也不能通过地址去修改。</p><p><strong>const修饰的局部变量</strong>，存在栈区，虽然不能通过const修饰的变量去修改栈区的内容，但是可以通过地址去改变。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">const int c = 1;</span><br><span class="line">int main() &#123;</span><br><span class="line">const int a = 123;</span><br><span class="line">printf(&quot;a修改前:%d\n&quot;, a);</span><br><span class="line">int* b = &amp;a;</span><br><span class="line">*b = 456;</span><br><span class="line">printf(&quot;a修改后:%d\n&quot;, a);</span><br><span class="line"></span><br><span class="line">    printf(&quot;c修改前:%d\n&quot;, c);</span><br><span class="line">int *d = &amp;c;</span><br><span class="line">*d = 4;</span><br><span class="line">printf(&quot;c修改后:%d\n&quot;, c);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="image-20231123201519812.png" alt="image-20231123201519812">、</p><p>在这里c修改后的并没有输出来，</p><h4 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h4><p>在C++中，const修饰的<strong>全局变量</strong>与C语言中的情况是一样的，既<strong>不能</strong>通过变量名去修改，也不能通过地址去修改。const修饰的<strong>局部变量</strong>既不能通过变量名修改局部变量的值，也<strong>不能</strong>通过地址来改变const修饰的局部变量的值。  </p><h3 id="修饰指针类型"><a href="#修饰指针类型" class="headerlink" title="修饰指针类型"></a>修饰指针类型</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">int a = 10;</span><br><span class="line">int b = 20;</span><br><span class="line">const int* c = &amp;a;</span><br><span class="line">printf(&quot;a的地址:%p\n&quot;, &amp;a);//000000000062FE14</span><br><span class="line">printf(&quot;b的地址:%p\n&quot;, &amp;b);//000000000062FE10</span><br><span class="line">printf(&quot;c修改前:%p\n&quot;, c);//000000000062FE14 = a</span><br><span class="line">c = &amp;b;//无问题</span><br><span class="line">printf(&quot;c修改后:%p\n&quot;, c);//000000000062FE10 = b</span><br><span class="line"></span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="image-20231123202413669.png" alt="image-20231123202413669"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">int a = 10;</span><br><span class="line">int b = 20;</span><br><span class="line">const int* c = &amp;a;</span><br><span class="line"></span><br><span class="line">c = &amp;b;//ok：可以修改指针变量的值</span><br><span class="line">//*c = 99;//err：不可以修改指针对应的内存空间的值</span><br><span class="line"></span><br><span class="line">printf(&quot;%d\n&quot;, *c);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>const 修饰<code>指针类型</code></strong> 可以修改指针变量的值，不可以修改指针指向内存空间的值。</p><h3 id="修饰指针变量"><a href="#修饰指针变量" class="headerlink" title="修饰指针变量"></a>修饰指针变量</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">int a = 10;</span><br><span class="line">int b = 20;</span><br><span class="line">int* const c = &amp;a;</span><br><span class="line">//c = &amp;b;//err</span><br><span class="line">*c = 200;//ok</span><br><span class="line"></span><br><span class="line">printf(&quot;%d\n&quot;, a);//200</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>const 修饰<code>指针变量</code></strong> 可以修改指针指向内存空间的值，不可以修改指针变量的值 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">int* const c;</span><br><span class="line">const int* c;</span><br></pre></td></tr></table></figure><h2 id="gt-和-的区别"><a href="#gt-和-的区别" class="headerlink" title="-&gt;和.的区别"></a>-&gt;和.的区别</h2><p><code>-&gt;</code> 用于访问指针指向的结构体成员，而 <code>.</code> 用于直接访问结构体的成员。</p><ol><li><code>-&gt;</code>（箭头操作符）：<ul><li>用于访问结构体或联合体的成员，通过指向结构体或联合体的<strong>指针</strong>。</li><li>通常用于指针变量，例如 <code>ptr-&gt;member</code> 表示访问指针 <code>ptr</code> 指向的结构体或联合体的成员。</li><li>比如，<code>ptr-&gt;member</code> 等同于 <code>(*ptr).member</code>。</li></ul></li><li><code>.</code>（点操作符）：<ul><li>用于访问结构体或联合体的成员，通过结构体或联合体的<strong>实例</strong>。</li><li>通常用于直接访问结构体或联合体的成员，例如 <code>structInstance.member</code> 表示访问结构体 <code>structInstance</code> 的成员。</li><li>只能用于结构体或联合体的实例，不能用于指针。</li></ul></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">struct Point &#123;</span><br><span class="line">    int x;</span><br><span class="line">    int y;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    struct Point p1 = &#123;10, 20&#125;;</span><br><span class="line">    struct Point* ptr = &amp;p1;</span><br><span class="line"></span><br><span class="line">    // 使用箭头操作符访问指针指向的结构体成员</span><br><span class="line">    printf(&quot;Using -&gt;: %d\n&quot;, ptr-&gt;x);</span><br><span class="line"></span><br><span class="line">    // 使用点操作符访问结构体成员</span><br><span class="line">    printf(&quot;Using .: %d\n&quot;, p1.x);</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="C-STL"><a href="#C-STL" class="headerlink" title="C++ STL"></a>C++ STL</h1><h2 id="map-amp-unordered-map"><a href="#map-amp-unordered-map" class="headerlink" title="map &amp; unordered_map"></a>map &amp; unordered_map</h2><p>1.首先是定义</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;map&gt;</span><br><span class="line">map&lt;int,string&gt;mp;//中间的是数据类型</span><br></pre></td></tr></table></figure><p>2.常用的函数以及操作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">//插入操作,直接类似数组赋值</span><br><span class="line">mp[0] = &quot;abc&quot;;</span><br><span class="line">//查找,如果找到会返回该元素的迭代器,否则it指向mp.end(),这里mp.end()并不指向元素，空的</span><br><span class="line">auto it = mp.find(0);</span><br><span class="line">//map的开始结束迭代器</span><br><span class="line">auto it = mp.begin();指向第一个元素</span><br><span class="line">auto it = mp.end();指向最后一个元素的后一位</span><br><span class="line">//判空</span><br><span class="line">mp.empty();空则返回true</span><br><span class="line">//返回元素个数</span><br><span class="line">int len = mp.size();</span><br><span class="line">//insert,因为元素键在map中是唯一的，所以插入操作首先检查给定键是否已存在于map中，如果键已存在于map中，则它不会插入map中</span><br><span class="line">mp.insert(pair&lt;int,char&gt;(4,&#x27;d&#x27;));</span><br><span class="line">//earse删除一个</span><br><span class="line">mp.earse(1);</span><br><span class="line">//清空clear</span><br><span class="line">mp.clear();</span><br><span class="line">//判断键的个数，map低层是红黑树，所以count只能是0或1</span><br><span class="line">int c = mp.count(1);</span><br></pre></td></tr></table></figure><p>说一下unordered_map 和map不同它是无序的。内部实现机理不同，map是共黑树，unordered_map是哈希表，unordered_map的查找时间复杂度可达到O(1)</p><p>有顺序要求时用map高效一些，而对于查找问题，unordered_map更高效</p><h1 id="大小写转换"><a href="#大小写转换" class="headerlink" title="大小写转换"></a>大小写转换</h1><p>1.string类用algorithm的方法</p><p>transform(str.begin(),str.end(),str.begin(),::tolower);</p><p>记得::tolower前面有::,　而且是::tolower，不是::tolower(),</p><p>类似的toupper</p><p>2.string手写</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">string str;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">void mytolower(string&amp; s)&#123;</span><br><span class="line">    int len=s.size();</span><br><span class="line">    for(int i=0;i&lt;len;i++)&#123;</span><br><span class="line">        if(s[i]&gt;=&#x27;A&#x27;&amp;&amp;s[i]&lt;=&#x27;Z&#x27;)&#123;</span><br><span class="line">            s[i]+=32;//+32转换为小写</span><br><span class="line">            //s[i]=s[i]-&#x27;A&#x27;+&#x27;a&#x27;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">void mytoupper(string&amp; s)&#123;</span><br><span class="line">    int len=s.size();</span><br><span class="line">    for(int i=0;i&lt;len;i++)&#123;</span><br><span class="line">        if(s[i]&gt;=&#x27;a&#x27;&amp;&amp;s[i]&lt;=&#x27;z&#x27;)&#123;</span><br><span class="line">            s[i]-=32;//+32转换为小写</span><br><span class="line">            //s[i]=s[i]-&#x27;a&#x27;+&#x27;A&#x27;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.char数组</p><p>tolower()和toupper()</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>OS</title>
      <link href="/2023/11/09/OS/"/>
      <url>/2023/11/09/OS/</url>
      
        <content type="html"><![CDATA[<h1 id="深入理解计算机系统"><a href="#深入理解计算机系统" class="headerlink" title="深入理解计算机系统"></a>深入理解计算机系统</h1><h2 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h2><h3 id="信息就是位-上下文"><a href="#信息就是位-上下文" class="headerlink" title="信息就是位+上下文"></a>信息就是位+上下文</h3><p>区分不同数据对象的方法是这些数据对象的上下文</p><h3 id="程序被其他程序翻译成不同的格式"><a href="#程序被其他程序翻译成不同的格式" class="headerlink" title="程序被其他程序翻译成不同的格式"></a>程序被其他程序翻译成不同的格式</h3><p>Unix系统上，从源文件到目标文件的转化是由<strong>编译器驱动程序</strong>完成的</p><p>gcc -o hello hello.c</p><p>这个编译过程可以分为4个阶段，执行这4个阶段的程序（<strong>预处理器、编译器、汇编器和链接器</strong>）一起构成了<strong>编译系统</strong>（compilation system）</p><p><img src="image-20231109094037637.png" alt="image-20231109094037637"></p><h1 id="王道计算机考研"><a href="#王道计算机考研" class="headerlink" title="王道计算机考研"></a>王道计算机考研</h1><h2 id="第一章-1"><a href="#第一章-1" class="headerlink" title="第一章"></a>第一章</h2><h3 id="1-1"><a href="#1-1" class="headerlink" title="1.1"></a>1.1</h3><p>什么是操作系统(Operating System OS)：</p><ol><li><p>是系统资源的管理者：控制和管理整个计算机系统的硬件和软件资源，并合理地组织调用计算机的工作和资源的分配</p><p>提供的功能：处理机管理，储存器管理，文件管理，设备管理</p><p>目标：安全，高效</p></li><li><p>向上层提供方便易用的服务：以提供给用户和其他软件方便的接口和环境</p><p>GUI(Graphical User Interface)：图形化用户接口</p><p>联机命令接口(&#x3D;交互式命令接口)：比如Windows的cmd命令行，用户说一句，系统做一个命令</p><p>脱机命令接口(&#x3D;批处理命令接口)：用户说一堆命令，系统执行一堆命令</p><p>程序接口：可以在程序中进行系统调用来使用程序接口。普通用户不能直接使用程序接口，只能通过程序代码间接使用</p><p>有的教材中：系统调用&#x3D;广义指令</p><p>有的教材中l:命令接口和程序接口统称用户接口</p><p><img src="image-20231115204939920.png" alt="image-20231115204939920"></p></li><li><p>是最接近硬件的一层软件：是计算机系统中最基本的系统软件</p><p>需要实现对硬件机器的拓展</p></li></ol><p><img src="image-20231115203852131.png" alt="image-20231115203852131"></p><p>操作系统的四个特征：并发、共享、虚拟、异步</p><p><strong>并发：</strong>一段时间上看着像同时运行，但是在某一时刻只有一个运行(并行的某一时刻同时运行)</p><p><strong>共享：</strong>有互斥共享和同时共享</p><p>虚拟：把物理上的实体变为若干个逻辑上的对应物</p><p>​（一个程序需要放入内存并分配CPU才能执行）一个游戏需要4G运行内存，其他的程序也需要一些内存，但我的电脑只有4G，可是它们可以同时运行。—-虚拟存储技术中的空分复用技术</p><p>​单核CPU可以运行多个程序，CPU不是已经被分配给某程序吗—–时分复用技术-微观上处理机在各个小的时间段内交替着为各个进程服务</p><p>异步：程序不是一次性执行完的，中间可能多停，以不可预知的速度前进</p><h3 id="1-2-OS的发展和分类"><a href="#1-2-OS的发展和分类" class="headerlink" title="1.2 OS的发展和分类"></a>1.2 OS的发展和分类</h3><p><img src="image-20231116201841112.png" alt="image-20231116201841112"></p><p>分时操作系统不能优先处理一些紧急任务。对每个用户&#x2F;作业都是公平的</p><p>实时操作系统可以优先响应一些紧急任务</p><p>​硬实时系统、软实时操作系统</p><h3 id="1-3"><a href="#1-3" class="headerlink" title="1.3"></a>1.3</h3><p><strong>运行机制</strong></p><p>CPU中有一个寄存器叫程序状态字寄存器（PSW），其中有个二进制位，1表示内核态，0表示用户态</p><p>内核态—-&gt;用户态：执行一条特权指令–修改PSW的标志位为“用户态”，这个动作说明操作系统将注定让出CPU使用权</p><p>用户态—&gt;内核态：由“中断”引发，硬件自动完成变态过程，触发中断信号意味着操作系统将强行夺回CPU使用权</p><p><img src="image-20231117175532495.png" alt="image-20231117175532495"></p><p><strong>中断和异常</strong></p><p>应用程序请求操作系统内核的服务，会执行一条特殊的指令–陷入指令，会引发内中断</p><p><strong>系统调用</strong></p><p>应用程序通过系统调用来请求获得操作系统内核的服务</p><p>共享资源的操作</p><p><strong>操作系统体系结构</strong></p><p>变态的过程是有成本的，要消耗时间，频繁地变态会降低系统性能</p><p><strong>操作系统引导 boot</strong></p><p>主引导记录（MBR）:包含磁盘引导程序和分区表</p><p><strong>虚拟机</strong></p><p><strong>第一类虚拟机管理程序</strong> Virtual Machine Monitor VMM，<strong>直接运行在硬件上</strong>，处在内核空间 </p><p>每个虚拟机的操作系统运行在虚拟内核空间，实际上是运行在用户态的</p><p><img src="image-20231119132350833.png" alt="image-20231119132350833"></p><p><strong>第二类VMM</strong> ，运行在宿主操作。VirtualBox、VMware</p><p><img src="image-20231119132459404.png" alt="image-20231119132459404"></p><p><img src="image-20231119133539062.png" alt="image-20231119133539062"></p><h2 id="第二章"><a href="#第二章" class="headerlink" title="第二章"></a>第二章</h2><p>进程控制块（PCB Process Control Block）</p><p>PCB是进程存在的唯一标志，当进程被创建时，操作系统为创建PCB。</p><h1 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h1><h2 id="实验1"><a href="#实验1" class="headerlink" title="实验1"></a>实验1</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">mkdir 新建目录</span><br><span class="line">rmdir 删除目录</span><br><span class="line">rmdir dir1 //删除目录dir1，但dir1目录下必须为空</span><br><span class="line">rmdir -r dir1 //全部删除</span><br><span class="line">cp [options] 源文件  目标文件   //复制文件或目录</span><br><span class="line">-f:强行覆盖已经存在的目标文件</span><br><span class="line">-i:在强行覆盖已经存在的目标文件时给出提示</span><br><span class="line">-R:整个目录复制</span><br><span class="line">rm 删除文件</span><br><span class="line">rm file? //删除文件名有五个字符，且前四个为file</span><br><span class="line">rm f* //是你出文件名以f为字首的所有文件</span><br><span class="line">touch 新建文件</span><br><span class="line">mv 文件和文件夹的移动和重命名</span><br><span class="line"></span><br><span class="line">//编译</span><br><span class="line">gcc -o filename filename.c</span><br><span class="line">//执行</span><br><span class="line">./filename</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>vim</strong></p><p>文件的保存和退出：</p><h2 id="实验2"><a href="#实验2" class="headerlink" title="实验2"></a>实验2</h2><p><code>fork()</code> 调用<strong>返回两次</strong>是因为它在创建新进程时会创建当前进程的一个副本，而这<strong>两个副本都将继续执行</strong>。下面是详细的解释：</p><p><strong>父进程中：</strong></p><ol><li><ul><li>在父进程中，<code>fork()</code> 返回新创建的子进程的PID（进程ID）。</li><li>父进程获得的返回值是非零的，通常是子进程的PID。这样，父进程可以通过返回值判断它是在父进程中执行的代码块。</li></ul></li><li><p><strong>子进程中：</strong></p><ul><li>在子进程中，<code>fork()</code> 返回0。</li><li>子进程的返回值是0，用于区分它是在子进程中执行的代码块。</li></ul></li></ol><p>这样，通过检查 <code>fork()</code> 的返回值，程序可以在父子进程中采取不同的执行路径。这种设计的灵活性使得程序能够在创建新进程后采取适当的行动。</p><ul><li><p><strong>并发执行：</strong> <code>fork()</code> 创建了两个相同的进程，它们可以在同一时刻并发执行。这样可以充分利用多核处理器的性能。</p></li><li><p><strong>独立的执行环境：</strong> 父子进程各自拥有独立的地址空间。这意味着它们可以独立地运行，互不影响。子进程的状态（变量值等）不受父进程的影响，反之亦然。</p></li><li><p><strong>灵活性：</strong> 通过在父子进程中检查 <code>fork()</code> 的返回值，程序可以选择在不同的执行路径中采取不同的行动。这是一种创建并发、灵活的方式。</p></li></ul><p>总体来说，<code>fork()</code> 的返回两次是为了让程序能够在父子进程之间进行不同的操作，以实现更灵活和并发的程序设计。</p><p>**getpid()**：获取当前进程的PID（进程ID）</p><p>**getppid()**： 获取当前进程的父进程的PID（父进程ID）</p><p>**wait()**：系统调用，用于父进程等待其子进程结束</p><p>父子进程相互独立，不会因为父进程结束而子进程结束，但是子进程的父进程ppid改变了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;sys/types.h&gt;</span><br><span class="line">#include &lt;sys/wait.h&gt;</span><br><span class="line">#include &lt;unistd.h&gt;</span><br><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line"> pid_t  pid=fork();</span><br><span class="line">// ② </span><br><span class="line">if(pid==0)</span><br><span class="line">&#123;</span><br><span class="line"> sleep(3);</span><br><span class="line"> printf(&quot;Child: pid=%d, ppid=%d\n&quot;, getpid(), getppid());</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line"> printf(&quot;Parent: Child=%d, pid=%d, ppid=%d\n&quot;, pid, getpid(), getppid());</span><br><span class="line">// wait(NULL);</span><br><span class="line"> printf(&quot;After Child ends.\n&quot;);</span><br><span class="line">&#125;</span><br><span class="line">printf(&quot;In which process?\n&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="image-20231118203038573.png" alt="image-20231118203038573"></p><p>这里父进程先执行完，显示的子进程是8536，自己的进程是8535.</p><p>而下面子进程输出的父进程pid改变了，这里先让子进程休眠3秒保证父进程先执行完。</p><p>当父进程在 执行完并退出后，子进程的父进程 ID (<code>ppid</code>) 就会变为 1，即切换到 init 进程的 ID，但是这里我的输出是1617。</p><p>这里查看了pid&#x3D;1617是什么进程</p><p><img src="image-20231118204032210.png" alt="image-20231118204032210"></p><p>是systemd进程，然后对其进行了解，<strong>systemd</strong>是一个系统和服务管理器，是一个系统初始化和管理的主要组件，用于替代传统的<strong>init</strong>系统</p><h2 id="实验3"><a href="#实验3" class="headerlink" title="实验3"></a>实验3</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;unistd.h&gt;</span><br><span class="line"></span><br><span class="line">int lockf(int fd, int cmd, off_t len);</span><br><span class="line"></span><br><span class="line">lockf(1,1,0)和lockf(1,0,0)</span><br><span class="line">#对标准输出进行加锁操作，即试图将标准输出锁定，阻止其他进程写入</span><br><span class="line">#对标准输出进行解锁操作，即释放之前加锁的标准输出，允许其他进程写入</span><br></pre></td></tr></table></figure><p>SIGALRM：当使用 <code>alarm</code> 函数设置一个定时器，并且指定了一个计时时间（秒数），当计时时间到达时，操作系统会向进程发送 <code>SIGALRM</code> 信号，这样就触发了定时器的到期事件。</p><p>在 C 语言中，可以使用 <code>signal</code> 函数或 <code>sigaction</code> 函数来为 <code>SIGALRM</code> 信号注册一个处理函数，以定义在信号到来时要执行的操作。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">signal(SIGALRM, alarm_handler);</span><br></pre></td></tr></table></figure><p><code>signal(SIGINT, SIG_IGN)</code> 的作用是将中断信号 <code>SIGINT</code> 的处理方式设置为忽略</p><p><strong>一个错误</strong></p><p>在 C 语言中，运算符的优先级会影响表达式的求值顺序。在这里，<code>&gt;</code> 运算符的优先级高于 <code>=</code> 运算符，因此在没有明确括号的情况下，条件表达式会先进行 <code>fork() &gt; 0</code> 的比较，然后再将结果赋给 <code>p1</code> 和 <code>p2</code>。</p><p>具体来说：</p><ul><li><p><code>if(p1=fork() &gt; 0)</code> 将先计算 <code>fork() &gt; 0</code>，得到一个布尔值（1 或 0），然后将该布尔值赋给 <code>p1</code>。这样，<code>p1</code> 的值始终是 0 或 1，并不是预期的子进程的 PID。</p></li><li><p>同理，<code>if(p2=fork() &gt; 0)</code> 也会导致类似的问题。</p></li></ul><p>为了正确地获取子进程的 PID，应该在 <code>fork()</code> 前添加括号，确保先执行 <code>fork()</code>，然后再进行比较，如下所示：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ((p1 = fork()) &gt; <span class="number">0</span>)</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ((p2 = fork()) &gt; <span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>这样就保证了先执行 <code>fork()</code>，然后再将结果赋给 <code>p1</code> 和 <code>p2</code>。</p><p><strong>管道</strong></p><p>存储管道的文件描述符，fd[0]用于读取，fd[1]用于写入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">int fd[2];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//管道写入，读取</span><br><span class="line">write(fd[1],outpipe,50);</span><br><span class="line">//fd[1] 表示管道写入端</span><br><span class="line">//outpipe 存储消息的字符数组</span><br><span class="line">//50 写入的字节数</span><br><span class="line">read(fd[0],inpipe,50);</span><br><span class="line">//fd[0] 表示管道读取端</span><br><span class="line">//outpipe 存储消息的字符数组</span><br><span class="line">//50 读取的字节数</span><br></pre></td></tr></table></figure><h2 id="实验4"><a href="#实验4" class="headerlink" title="实验4"></a>实验4</h2><p><strong>消息队列</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msgqid = msgget(MSGKEY, 0777 | IPC_CREAT);</span><br></pre></td></tr></table></figure><ul><li>MSGKEY 是消息队列的关键字，用于唯一标识一个消息队列，通常有开发者指定，并在不同进程间共享，以便它们能访问同一个消息队列</li><li>0777是消息队列的权限设置</li><li>IPC_CREAT 标识表示如果消息队列不存在就创建一个新的</li><li>mdgqid 是一个变量，用于存储获取或创建的消息队列的ID</li></ul><p><strong>发送消息</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msgsnd(msgqid,&amp;msg,1030,0); </span><br></pre></td></tr></table></figure><ul><li><code>msgqid</code>：消息队列的ID，表示将消息发送到哪个消息队列。</li><li><code>&amp;msg</code>：指向存储消息内容的结构体的指针。在这里，<code>msg</code> 应该是一个结构体，其中包含了消息的内容，包括消息类型（<code>mtype</code>）和其他信息。</li><li><code>1030</code>：消息的大小，以字节为单位。这里表示消息的大小为 1030 字节。消息的大小要小于或等于消息队列的限制。</li><li><code>0</code>：消息发送的标志位，通常设为 0 表示阻塞式发送。如果设置为非零值，可以控制发送消息的行为，例如设置为 <code>IPC_NOWAIT</code> 表示非阻塞发送。</li></ul><p><strong>接收消息</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msgrcv(msgqid, &amp;msg, 1030, 0, 0);</span><br></pre></td></tr></table></figure><ul><li><code>msgqid</code>：消息队列的ID，表示从哪个消息队列接收消息。</li><li><code>&amp;msg</code>：指向存储接收到的消息内容的结构体的指针。在这里，<code>msg</code> 应该是一个结构体，用于存储接收到的消息的内容，包括消息类型（<code>mtype</code>）和其他信息。</li><li><code>1030</code>：消息的大小，以字节为单位。这里表示期望接收的消息的最大大小为 1030 字节。实际接收到的消息大小不会超过这个值。</li><li><code>0</code>：消息的类型。如果为 0，表示接收队列中的第一条消息。如果指定了其他值，只有类型匹配的消息才会被接收。</li><li><code>0</code>：接收消息的标志位，通常设为 0 表示阻塞式接收。如果设置为非零值，可以控制接收消息的行为，例如设置为 <code>IPC_NOWAIT</code> 表示非阻塞接收。</li></ul><p><strong>阻塞式接收</strong>指的是当接收方尝试从消息队列中接收消息时，<strong>如果队列为空，接收方会被阻塞（暂停执行）</strong>，直到队列中有消息可供接收为止。这种方式保证了接收方只有在有消息可以处理的情况下才会继续执行。</p><p><strong>释放消息队列</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msgctl(msgqid, IPC_RMID,0);</span><br></pre></td></tr></table></figure><ul><li><code>msgqid</code>：表示要操作的消息队列的标识符（ID）。</li><li><code>IPC_RMID</code>：表示要执行的操作。在这里，<code>IPC_RMID</code> 表示删除消息队列。</li><li><code>0</code>：通常情况下，这个参数可以不用管，可以设置为 0。</li></ul><p><strong>创建或获取一个共享内存标识符</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shmid = shmget(SHMKEY, 1024, 0777 | IPC_CREAT);</span><br></pre></td></tr></table></figure><p>这段代码使用 <code>shmget</code> 函数创建或获取一个共享内存标识符（Shared Memory Identifier）。具体参数和含义如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shmid = shmget(SHMKEY, 1024, 0777 | IPC_CREAT);</span><br></pre></td></tr></table></figure><ul><li><code>SHMKEY</code>：共享内存的键值，是一个整数。在不同的进程之间，通过相同的键值可以访问同一块共享内存。通常，这个键值是一个事先定义好的常数。</li><li><code>1024</code>：表示共享内存的大小，单位是字节。在这里，共享内存的大小为 1024 字节。</li><li><code>0777 | IPC_CREAT</code>：表示创建共享内存区域的访问权限。<code>0777</code> 是八进制表示的权限位，这里表示读、写、执行权限。<code>IPC_CREAT</code> 表示如果没有找到具有给定键值的共享内存，则创建一个新的。</li><li><code>shmid</code>：是 <code>shmget</code> 返回的共享内存标识符，可以用于后续的共享内存操作。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shmctl(shmid, IPC_RMID, 0);</span><br></pre></td></tr></table></figure><ul><li><code>shmid</code>：是由 <code>shmget</code> 返回的共享内存标识符，用于指定要操作的共享内存区域。</li><li><code>IPC_RMID</code>：是 <code>shmctl</code> 的命令参数，表示要执行的操作是删除共享内存区域。</li><li><code>0</code>：是额外的参数，通常设置为 0。</li></ul><h1 id="计算机操作系统"><a href="#计算机操作系统" class="headerlink" title="计算机操作系统"></a>计算机操作系统</h1><h2 id="第四章存储器管理"><a href="#第四章存储器管理" class="headerlink" title="第四章存储器管理"></a>第四章存储器管理</h2><p>页面大小4KB，为什么是B不是b</p><p>按字节寻址，每个地址是3位</p><h1 id="头歌"><a href="#头歌" class="headerlink" title="头歌"></a>头歌</h1><h2 id="课1"><a href="#课1" class="headerlink" title="课1"></a>课1</h2><h3 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h3><p>Linux中<strong>创建文件</strong>的常用命令是<code>touch</code>，命令格式如下：<code>touch filename</code></p><p><strong>删除文件</strong>的命令<code>rm</code>,  rm [命令选项] filename</p><p>常用命令选项：</p><p>-f：强制删除</p><p>-r：递归处理，将指定目录下的所有文件与子目录一并处理</p><p>-i：删除已有文件或目录之前先询问用户</p><h3 id="目录操作"><a href="#目录操作" class="headerlink" title="目录操作"></a>目录操作</h3><p><strong>创建文件夹</strong><code>mkdir</code>，mkdir [命令选项] dirname</p><p>常用命令选项： <code>-p或--parents</code> 若所要建立目录的上层目录目前尚未建立，则会一并建立上层目录；</p><p><strong>删除文件夹</strong>：rmdir [命令选项] dirname</p><p>常用命令选项：<code>-p或--parents：删除指定目录后，若该目录的上层目录已变成空目录，则将其一并删除；</code></p><p><strong>文件和文件夹的拷贝</strong>：cp [命令选项] 源文件 目的文件</p><p>常见命令选项：</p><ol><li><code>-f：强行复制文件或目录，不论目标文件或目录是否已存在；</code></li><li><code>-i：覆盖既有文件之前先询问用户；</code></li><li><code>-p：保留源文件或目录的属性；</code></li><li><code>-R/r：递归处理，将指定目录下的所有文件与子目录一并处理。</code></li></ol><p><strong>文件和文件夹的移动&#x2F;重命名</strong>：</p><p>mv [命令选项] 源文件 目标文件</p><p>常见命令选项：</p><ol><li><code>-f：强行复制文件或目录，不论目标文件或目录是否已存在； </code></li><li><code>-i：覆盖既有文件之前先询问用户；</code></li><li><code>-p：保留源文件或目录的属性；</code></li><li><code>-R/r：递归处理，将指定目录下的所有文件与子目录一并处理&#39;。</code></li></ol><h3 id="文件查看命令"><a href="#文件查看命令" class="headerlink" title="文件查看命令"></a>文件查看命令</h3><p><code>cat</code></p><p><code>cat</code>命令用于连接文件并打印到标准输出设备上，有很多叫它“猫咪”命令，但<code>cat</code>命令其实是 concatenate（连续）的缩写，即连续显示文本内容。<code>cat</code>命令常常用于查看内容较少的文件，因为文件太大时，前面的内容就滚出屏幕，看不到了。</p><p><code>head</code></p><p><code>head</code>命令可用于查看文件的开头部分的内容，有一个常用的参数<code>-n</code>用于显示行数，默认为 10，即显示 10 行的内容。</p><p><code>tail</code></p><p><code>tail</code>命令和<code>head</code>反过来的，用途是依照要求将指定的文件的最后部分输出到标准设备，通常是终端，通俗讲来，就是把某个档案文件的最后几行显示到终端上，假设该档案有更新，<code>tail</code>会自己主动刷新，确保你看到最新的档案内容。</p><p><code>nl</code></p><p><code>nl</code>命令将指定的文件添加行号标注后写到标准输出。空行不显示行号。</p><h3 id="文件编辑基本命令"><a href="#文件编辑基本命令" class="headerlink" title="文件编辑基本命令"></a>文件编辑基本命令</h3><p>对于文件的编辑操作可以使用<code>vi/vim</code>编辑器，<code>vim</code>是<code>vi</code>的升级版，二者操作基本上相同。 对于编辑器的基本命令如下： <code>vi filename</code>：打开文件。 键盘输入<code>i</code>或者<code>a</code>进行编辑：最底下出现<code>insert</code>就进入编辑模式可以进行编辑了。 键盘按<code>Esc</code>键：退出编辑模式。 键盘输入<code>:q！</code>：强制退出编辑并不保存。 键盘输入<code>:wq</code>或者<code>:x</code>：保存文件并退出。</p><h3 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h3><p><strong>新建用户</strong></p><p>useradd [命令参数] 名称  &#x2F;&#x2F;root用户，否则 sudo  </p><ol><li><code>-d&lt;登入目录&gt;：指定用户登入时的启始目录；</code></li><li><code>-D：查看或变更预设值；</code></li><li><code>-g&lt;群组&gt;：指定用户所属的群组；</code></li><li><code>-m：自动建立用户的登入目录；</code></li><li><code>-M：不要自动建立用户的登入目录；</code></li><li><code>-s：指定用户登入后所使用的shell。</code></li></ol><p>Linux用户信息保存在**&#x2F;etc&#x2F;passwd**文件中</p><p><strong>密码设置</strong></p><p>passwd 参数 用户名 &#x2F;&#x2F;root</p><ol><li><code>-d 删除密码；</code></li><li><code>-l 停止账号使用；</code></li><li><code>-S 显示密码信息。</code></li></ol><p>Linux中用户的密码存放在**&#x2F;etc&#x2F;shadow**文件中</p><p><strong>用户登录</strong></p><p><code>su</code>命令用于切换当前用户身份到其他用户身份，变更时须输入所要变更的用户帐号的密码。  </p><p>当使用<code>su</code>命令切换用户后，使用<code>exit</code>命令退出当前身份，返回原有登录用户身份。 </p><p>注：如果当前用户身份是 root，则使用 su 命令切换到其他用户的时候不需要相应用户的密码。</p><p>su 用户名</p><p><code>su</code>命令所有使用者都可以执行。</p><p><strong>删除用户</strong></p><p>userdel 参数 用户名</p><ol><li><code>-f：强制删除用户，即使用户当前已登录；</code></li><li><code>-r：删除用户的同时，删除与用户相关的所有文件。</code></li></ol><h3 id="文件管理"><a href="#文件管理" class="headerlink" title="文件管理"></a>文件管理</h3><p>文件的访问权限分为只读，只写和可执行三种。</p><p>只读权限表示只允许读其内容，而禁止对其做任何的更改操作。</p><p>只写权限表示允许修改文件的内容。</p><p>可执行权限表示允许将该文件作为一个程序执行。</p><p><strong>修改文件权限</strong></p><p>chmod [who] [+ 或 - 或 &#x3D;] [mode] 文件名</p><p>who参数如下：</p><ol><li><code>u 表示“用户（user）”，即文件或目录的所有者；</code></li><li><code>g 表示“同组（group）用户”，即与文件属主有相同组ID的所有用户；</code></li><li><code>o 表示“其他（others）用户”；</code></li><li><code>a 表示“所有（all）用户”，它是系统默认值。</code></li></ol><p>操作符如下：</p><ol><li><code>+：添加某个权限；</code></li><li><code>-：取消某个权限；</code></li><li><code>=：赋予给定权限并取消其他所有权限。</code></li></ol><p>mode如下：</p><ol><li><code>r 可读； </code>    &#x3D; 4</li><li><code>w 可写；</code>    &#x3D; 2</li><li><code>x 可执行。</code>  &#x3D;  1</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">chmod a=r filename</span><br><span class="line">chmod a=rw,g=r filename</span><br><span class="line">chmod 754 filaname</span><br></pre></td></tr></table></figure><h2 id="课2"><a href="#课2" class="headerlink" title="课2"></a>课2</h2><h3 id="外部中断"><a href="#外部中断" class="headerlink" title="外部中断"></a>外部中断</h3><h2 id="科3"><a href="#科3" class="headerlink" title="科3"></a>科3</h2><h1 id="共享文件夹挂载"><a href="#共享文件夹挂载" class="headerlink" title="共享文件夹挂载"></a>共享文件夹挂载</h1><p><a href="https://baijiahao.baidu.com/s?id=1766883145908707916&wfr=spider&for=pc">VMware虚拟机Ubuntu共享文件夹 (baidu.com)</a></p><p><code>sudo /usr/bin/vmhgfs-fuse .host:/VMsharedFile /mnt/hgfs -o allow_other -o uid=1000</code></p><p>这个命令使用了 <code>sudo</code> 权限来运行 <code>/usr/bin/vmhgfs-fuse</code> 工具，将<code>.host:/VMsharedFile</code> 挂载到本地目录 <code>/mnt/hgfs</code> 上。</p><p>解释这个命令的不同部分的含义：</p><ul><li><code>sudo</code>：以超级用户权限运行命令，因为挂载操作通常需要管理员权限。</li><li><code>/usr/bin/vmhgfs-fuse</code>：<code>vmhgfs-fuse</code> 是一个工具，用于将 VMware 中的共享文件夹挂载到虚拟机的本地文件系统上。</li><li><code>.host:/VMsharedFile</code>：指定要挂载的共享文件夹的路径，<code>.host:</code>是 VMware 中的特殊表示，用于表示主机系统。（**在输入命令的时候.host:&#x2F;不要变，别用你主机的名称：C:或者D:**）</li><li><code>/mnt/hgfs</code>：指定挂载点的目录，这是一个本地目录，用于将共享文件夹的内容映射到虚拟机中。</li><li><code>-o allow_other</code>：选项用于允许其他用户访问挂载点上的文件。</li><li><code>-o uid=1000</code>：选项指定挂载点上文件的所有者用户ID，这里设置为<code>1000</code>。</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ISE</title>
      <link href="/2023/10/28/ISE/"/>
      <url>/2023/10/28/ISE/</url>
      
        <content type="html"><![CDATA[<h1 id="B站”杨冬信安”部分知识点整理"><a href="#B站”杨冬信安”部分知识点整理" class="headerlink" title="B站”杨冬信安”部分知识点整理"></a>B站”杨冬信安”部分知识点整理</h1><h3 id="网络信息安全的基本属性"><a href="#网络信息安全的基本属性" class="headerlink" title="网络信息安全的基本属性"></a><strong>网络信息安全的基本属性</strong></h3><p>机密性：不泄露给非授权用户</p><p>完整性：未授权不能改</p><p>可用性：及时获取网络信息和服务</p><p>可控性：可管理、可支配</p><p>抗抵赖性：防止用户否认其活动行为</p><p>三要素：CIA ：机密性、可用性、完整性</p><h3 id="网络信息安全的基本功能："><a href="#网络信息安全的基本功能：" class="headerlink" title="网络信息安全的基本功能："></a><strong>网络信息安全的基本功能：</strong></h3><p>防御、检测、应急、恢复</p><h3 id="国家密码分类："><a href="#国家密码分类：" class="headerlink" title="国家密码分类："></a><strong>国家密码分类：</strong></h3><p>绝密、机密、秘密</p><h3 id="密码分类："><a href="#密码分类：" class="headerlink" title="密码分类："></a><strong>密码分类：</strong></h3><p>普通密码、核心密码、商用密码</p><h3 id="等保测评的流程："><a href="#等保测评的流程：" class="headerlink" title="等保测评的流程："></a><strong>等保测评的流程：</strong></h3><p>定级、备案。建设整改、等级测评。运营维护（监督管理）</p><p>三级等保每年都测评</p><h3 id="网络攻击的一般过程："><a href="#网络攻击的一般过程：" class="headerlink" title="网络攻击的一般过程："></a><strong>网络攻击的一般过程：</strong></h3><ol><li>隐藏攻击源</li><li>收集攻击目标的信息</li><li>挖掘目标的漏洞信息</li><li>获取目标的访问权限</li><li>隐藏攻击行为</li><li>实施攻击</li><li>开辟后门</li><li>清除攻击痕迹</li></ol><p>分为进入前和进入后</p><h3 id="常见的端口扫描技术："><a href="#常见的端口扫描技术：" class="headerlink" title="常见的端口扫描技术："></a><strong>常见的端口扫描技术：</strong></h3><p><img src="image-20231028143210907.png" alt="image-20231028143210907"></p><h3 id="DDOS常用的攻击手段"><a href="#DDOS常用的攻击手段" class="headerlink" title="DDOS常用的攻击手段"></a>DDOS<strong>常用的攻击手段</strong></h3><p>HTTP FLood攻击、SYN Flood攻击、DNS放大攻击</p><p>针对DDoS<strong>攻击的网络流量清洗基本原理：</strong></p><ol><li><strong>流量监测：</strong> 网络流量监测系统持续监视进入网络的流量，检测异常的流量模式，例如突然的大流量。</li><li><strong>流量分析：</strong> 监测系统分析流量的特征，例如数据包的大小、来源、目标等，以确定是否存在异常。基于先前的攻击数据和模式，系统可以识别新的DDoS攻击。</li><li><strong>攻击识别：</strong> 利用各种算法和规则，系统识别可能是DDoS攻击的流量。这些规则可以包括识别频繁请求、源IP地址的异常行为、特定协议使用异常等。</li><li><strong>分离恶意流量：</strong> 一旦识别出恶意流量，系统将其与合法流量分离。这通常涉及使用防火墙、入侵检测系统（IDS）、入侵防御系统（IPS）等设备进行分离和封锁。</li><li><strong>清洗和过滤：</strong> 恶意流量被清洗，即过滤掉DDoS攻击流量，确保只有合法的流量进入网络。这可以通过硬件设备、软件算法或云服务来完成。</li><li><strong>传输合法流量：</strong> 清洗后的合法流量被允许继续传输到目标服务器，确保合法用户的请求得以处理。</li><li><strong>实时调整和学习：</strong> 清洗系统通常具备实时调整策略的能力，可以根据攻击的演变调整防御策略。同时，系统也可能具备机器学习算法，能够学习新的攻击模式，提高自身的识别能力。</li></ol><h3 id="国产密码算法："><a href="#国产密码算法：" class="headerlink" title="国产密码算法："></a><strong>国产密码算法：</strong></h3><p><img src="image-20231028143437964.png" alt="image-20231028143437964"></p><h3 id="密码分析攻击的五种类型："><a href="#密码分析攻击的五种类型：" class="headerlink" title="密码分析攻击的五种类型："></a><strong>密码分析攻击的五种类型：</strong></h3><p><img src="image-20231028143514142.png" alt="image-20231028143514142"></p><h3 id="常见密码算法："><a href="#常见密码算法：" class="headerlink" title="常见密码算法："></a>常见密码算法：</h3><p><strong>对称：</strong>DES，AES，IDEA</p><p>DES算法中S盒：<br><img src="image-20231028155822677.png" alt="image-20231028155822677"></p><p><img src="image-20231028143621053.png" alt="image-20231028143621053"></p><p><strong>非对称：</strong>RSA，ECC</p><p><img src="image-20231028143640601.png" alt="image-20231028143640601"></p><h3 id="BLP机密性模型："><a href="#BLP机密性模型：" class="headerlink" title="BLP机密性模型："></a>BLP<strong>机密性模型：</strong></h3><p>简单安全特性：下读（下毒）</p><p>*特性：上写</p><p><img src="image-20231028143953216.png" alt="image-20231028143953216"></p><h3 id="信息保障模型："><a href="#信息保障模型：" class="headerlink" title="信息保障模型："></a><strong>信息保障模型：</strong></h3><p><img src="image-20231028143936964.png" alt="image-20231028143936964"></p><h3 id="软件安全能力成熟度模型："><a href="#软件安全能力成熟度模型：" class="headerlink" title="软件安全能力成熟度模型："></a><strong>软件安全能力成熟度模型：</strong></h3><p><img src="image-20231028144105131.png" alt="image-20231028144105131"></p><h3 id="机房功能区域组成："><a href="#机房功能区域组成：" class="headerlink" title="机房功能区域组成："></a><strong>机房功能区域组成：</strong></h3><p><img src="image-20231028144231297.png" alt="image-20231028144231297"></p><h3 id="自主访问控制："><a href="#自主访问控制：" class="headerlink" title="自主访问控制："></a><strong>自主访问控制：</strong></h3><p><img src="image-20231028144308433.png" alt="image-20231028144308433"></p><h3 id="Linux访问控制："><a href="#Linux访问控制：" class="headerlink" title="Linux访问控制："></a>Linux<strong>访问控制：</strong></h3><p><img src="image-20231028144342406.png" alt="image-20231028144342406"></p><h3 id="防火墙功能："><a href="#防火墙功能：" class="headerlink" title="防火墙功能："></a><strong>防火墙功能：</strong></h3><p><img src="image-20231028144545070.png" alt="image-20231028144545070"></p><h3 id="防火墙防御体系结构类型："><a href="#防火墙防御体系结构类型：" class="headerlink" title="防火墙防御体系结构类型："></a><strong>防火墙防御体系结构类型：</strong></h3><p>基于双宿主主机防火墙、基于代理型防火墙、基于屏蔽子网的防火墙。</p><p><img src="image-20231028144458949.png" alt="image-20231028144458949"></p><h3 id="VPN类型："><a href="#VPN类型：" class="headerlink" title="VPN类型："></a>VPN<strong>类型：</strong></h3><p><img src="image-20231028144603987.png" alt="image-20231028144603987"></p><h4 id="VPN实现技术：IPsec"><a href="#VPN实现技术：IPsec" class="headerlink" title="VPN实现技术：IPsec"></a>VPN<strong>实现技术：IPsec</strong></h4><p><img src="image-20231028144815868.png" alt="image-20231028144815868"></p><h4 id="VPN实现技术：SSL"><a href="#VPN实现技术：SSL" class="headerlink" title="VPN实现技术：SSL"></a>VPN<strong>实现技术：SSL</strong></h4><p><img src="image-20231028144851857.png" alt="image-20231028144851857"></p><h3 id="入侵检测模型："><a href="#入侵检测模型：" class="headerlink" title="入侵检测模型："></a><strong>入侵检测模型：</strong></h3><p><img src="image-20231028144935575.png" alt="image-20231028144935575"></p><h4 id="基于误用的入侵检测技术："><a href="#基于误用的入侵检测技术：" class="headerlink" title="基于误用的入侵检测技术："></a><strong>基于误用的入侵检测技术：</strong></h4><p>利用系统和软件的漏洞技术进行攻击</p><p><img src="image-20231102232109355.png" alt="image-20231102232109355"></p><p><strong>依赖：</strong>攻击模式库</p><p><img src="image-20231028145049813.png" alt="image-20231028145049813"></p><h4 id="基于异常的入侵检测技术："><a href="#基于异常的入侵检测技术：" class="headerlink" title="基于异常的入侵检测技术："></a><strong>基于异常的入侵检测技术：</strong></h4><p><img src="image-20231102232226838.png" alt="image-20231102232226838"></p><p><strong>依赖：</strong>异常模型</p><p><img src="image-20231028145134371.png" alt="image-20231028145134371"></p><h4 id="入侵检测系统"><a href="#入侵检测系统" class="headerlink" title="入侵检测系统"></a>入侵检测系统</h4><p><strong>常见体系结构</strong>：基于主机的入侵检测系统、基于网络的入侵检测系统、分布式入侵检测系统。</p><p><strong>入侵检测相关指标：</strong>可靠性，可用性，可扩展性，时效性，准确性，安全性。</p><p><strong>入侵检测系统部署方法：</strong></p><ol><li>根据组织或公司的安全策略要求，<strong>确定</strong>IDS要监测的<strong>对象</strong>或保护网段</li><li>在监测对象或保护网段，<strong>安装IDS探测器</strong>，<strong>采集</strong>网络入侵检测所需要的信息</li><li><strong>针对</strong>监测对象或保护网段的<strong>安全需求</strong>，<strong>制定</strong>响应的检测<strong>策略</strong></li><li>依据检测策略，<strong>选用</strong>合适的<strong>IDS结构类型</strong></li><li>在IDS上，<strong>配置入侵检测规则</strong></li><li><strong>测试</strong>验证IDS的安全策略时候正常执行</li><li><strong>运行和维护IDS</strong></li></ol><h3 id="网络入侵检测系统Snort"><a href="#网络入侵检测系统Snort" class="headerlink" title="网络入侵检测系统Snort"></a><strong>网络入侵检测系统Snort</strong></h3><p><img src="image-20231028145206915.png" alt="image-20231028145206915"></p><p><img src="image-20231028153014367.png" alt="image-20231028153014367"></p><h3 id="网络物理隔离系统与类型："><a href="#网络物理隔离系统与类型：" class="headerlink" title="网络物理隔离系统与类型："></a><strong>网络物理隔离系统与类型：</strong></h3><p><img src="image-20231028145300762.png" alt="image-20231028145300762"></p><p><img src="image-20231028145313091.png" alt="image-20231028145313091"></p><h3 id="网络安全审计系统："><a href="#网络安全审计系统：" class="headerlink" title="网络安全审计系统："></a><strong>网络安全审计系统：</strong></h3><p><img src="image-20231028145349860.png" alt="image-20231028145349860"></p><h3 id="网络安全漏洞威胁："><a href="#网络安全漏洞威胁：" class="headerlink" title="网络安全漏洞威胁："></a><strong>网络安全漏洞威胁：</strong></h3><p><img src="image-20231028145414675.png" alt="image-20231028145414675"></p><h1 id="刷题知识点整理"><a href="#刷题知识点整理" class="headerlink" title="刷题知识点整理"></a>刷题知识点整理</h1><h3 id="法律法规"><a href="#法律法规" class="headerlink" title="法律法规"></a>法律法规</h3><p><img src="image-20231028155633753.png" alt="image-20231028155633753"></p><p><img src="image-20231101215132168.png" alt="image-20231101215132168"></p><p><img src="image-20231028155924911.png" alt="image-20231028155924911"></p><p><img src="image-20231028155948042.png" alt="image-20231028155948042"></p><h3 id="水印："><a href="#水印：" class="headerlink" title="水印："></a>水印：</h3><p><img src="image-20231028150400738.png" alt="image-20231028150400738"></p><p><img src="image-20231031175220289.png" alt="image-20231031175220289"></p><h3 id="漏洞利用类蠕虫"><a href="#漏洞利用类蠕虫" class="headerlink" title="漏洞利用类蠕虫"></a><strong>漏洞利用类蠕虫</strong></h3><p><img src="image-20231028150452576.png" alt="image-20231028150452576"></p><h3 id="远程控制木马："><a href="#远程控制木马：" class="headerlink" title="远程控制木马："></a><strong>远程控制木马：</strong></h3><p><img src="image-20231028150518951.png" alt="image-20231028150518951"></p><h3 id="CA和RA功能："><a href="#CA和RA功能：" class="headerlink" title="CA和RA功能："></a><strong>CA和RA功能：</strong></h3><p>RA：注册机构，认证注册信息的合法性、批准证书的申请和批准撤销证书的申请</p><p>CA：证书机构，签发证书，证书废止和更新</p><h3 id="后缀："><a href="#后缀：" class="headerlink" title="后缀："></a><strong>后缀：</strong></h3><p><img src="image-20231028150956009.png" alt="image-20231028150956009"></p><h3 id="恶意代码类型前缀："><a href="#恶意代码类型前缀：" class="headerlink" title="恶意代码类型前缀："></a><strong>恶意代码类型前缀：</strong></h3><p><img src="image-20231028151020547.png" alt="image-20231028151020547"></p><h3 id="操作系统的安全机制："><a href="#操作系统的安全机制：" class="headerlink" title="操作系统的安全机制："></a><strong>操作系统的安全机制：</strong></h3><p>安全审计机制、可信路径机制、标识与鉴别机制、客体重用机制、访问控制机制</p><h3 id="Android平台数据存储方式："><a href="#Android平台数据存储方式：" class="headerlink" title="Android平台数据存储方式："></a>Android<strong>平台数据存储方式：</strong></h3><ul><li><p>文件存储数据</p></li><li><p>网络存储数据</p></li><li><p>使用SharedPreferences存储</p><p>当你使用手机上的某个应用程序时，你可能会选择一些设置，比如主题颜色、字体大小、登录状态等。这些选择是应用程序使用 <code>SharedPreferences</code> 存储起来的。它是一个小抽屉，可以帮助应用程序保存你的个性化设置，以便你下次使用应用时可以保持你之前的选择。</p></li><li><p>SQLite数据库存储</p></li><li><p>使用ContentProvider存储</p><p>在Android应用程序中，ContentProvider 提供了一种数据共享的机制。它允许一个应用程序（或组件）共享它的数据给其他应用程序使用，而不需要暴露数据的具体存储方式。其他应用程序可以通过 ContentProvider 查询、插入、更新和删除数据，就像向图书管理员借书一样。这种机制确保了数据的安全性和隐私性，同时也方便了不同应用程序之间的数据交换。</p></li></ul><h3 id="网卡接收数据帧状态："><a href="#网卡接收数据帧状态：" class="headerlink" title="网卡接收数据帧状态："></a><strong>网卡接收数据帧状态：</strong></h3><p><img src="image-20231028152613762.png" alt="image-20231028152613762"></p><h3 id="衡量密码体制安全性的基本准则："><a href="#衡量密码体制安全性的基本准则：" class="headerlink" title="衡量密码体制安全性的基本准则："></a><strong>衡量密码体制安全性的基本准则：</strong></h3><p><img src="image-20231028152734239.png" alt="image-20231028152734239"></p><h3 id="恶意代码："><a href="#恶意代码：" class="headerlink" title="恶意代码："></a><strong>恶意代码：</strong></h3><p><img src="image-20231028152844889.png" alt="image-20231028152844889"></p><p><img src="image-20231028152853340.png" alt="image-20231028152853340"></p><p>病毒：能够自我复制和传播，通常无法远程控制</p><p>蠕虫：不断自我复制导致电脑<strong>变慢</strong>，可以远程控制</p><p><img src="image-20231031174433132.png" alt="image-20231031174433132"></p><p>特洛伊木马：具备很好的<strong>隐藏</strong>能力，悄悄的<strong>窃取</strong>用户<strong>信息</strong></p><h3 id="Android"><a href="#Android" class="headerlink" title="Android:"></a><strong>Android:</strong></h3><p>Android系统是一个开源的移动终端操作系统，分为：</p><p>Linux内核层、系统运行库层、应用程序框架层、应用程序层</p><p><img src="image-20231028153303298.png" alt="image-20231028153303298"></p><p><strong>系统安全机制：</strong></p><p><img src="image-20231028153357371.png" alt="image-20231028153357371"></p><p>应用程序权限信息声明在：<strong>AndroidMainifest.xml</strong></p><p>Android 开发主要组件：</p><p>Activities（活动）、Broadcast Receivers（广播接收器）、Services（服务）、Content Providers（内容提供者）</p><h3 id="域名："><a href="#域名：" class="headerlink" title="域名："></a><strong>域名：</strong></h3><p>域名”<a href="http://www.humen.com" 在dns查询包中的表示形式为 ">www.humen.com&quot;在DNS查询包中的表示形式为</a></p><p>037777770568756d656e03636f6d00</p><p>解释：</p><ul><li>03表示接下来的标签长度为3个字节。</li><li>777777表示”www”，每个字母对应一个ASCII码。</li><li>05表示接下来的标签长度为5个字节。</li><li>68756<em>d</em>656<em>e</em>表示”humen”，每个字母对应一个ASCII码。</li><li>03表示接下来的标签长度为3个字节。</li><li>636<em>f</em>6<em>d</em>表示”com”，每个字母对应一个ASCII码。</li><li>00表示域名的结束。</li></ul><h3 id="防火墙："><a href="#防火墙：" class="headerlink" title="防火墙："></a><strong>防火墙：</strong></h3><p>防火墙是层层过滤的，实际是按照配置规则的顺序从上到下，从前到后进行过滤的。</p><p>如果匹配成功规则，即明确表示是拒绝(DROP)还是接收(ACCEPT)，数据包就不再向下匹配新的规则。</p><p>如果规则中没有明确表明是阻止还是通过的，也就是没有匹配规则，向下进行匹配，直到匹配默认规则得到明确的阻止还是通过。</p><p>防火墙的默认规则是所有规则都匹配完才会匹配的。</p><p><img src="image-20231031211219739.png" alt="image-20231031211219739"></p><p><img src="image-20231031212520752.png" alt="image-20231031212520752"></p><p>对于表的顺序是：</p><p>raw–&gt;mangle–&gt;nat–&gt;filter</p><p>数据包进来还是先PREROUTING链，然后按照上面的那个表的顺序匹配规则。就如下图所示，会先进行raw表里的PREROUTING链匹配，然后mangle、nat表。</p><p><img src="image-20231031211534604.png" alt="image-20231031211534604"></p><p><strong>基本语法：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">iptables  [-t 表名]  管理选项  [链名]  [匹配条件]  [-j 控制类型]</span><br><span class="line">iptables -t filter -A INPUT -s 192.168.0.1 -j DROP</span><br><span class="line">命令      指定表      指定链    -s            -j DROP已读不回</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">选项</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">-A</td><td align="left">在指定链末尾追加一条</td></tr><tr><td align="left">-P</td><td align="left">指定默认规则</td></tr><tr><td align="left">-D</td><td align="left">删除</td></tr><tr><td align="left">-L</td><td align="left">查看</td></tr><tr><td align="left">-n</td><td align="left">查看时显示更详细信息，常跟-L一起使用</td></tr><tr><td align="left">-t</td><td align="left">指定表，不指定默认是filter</td></tr><tr><td align="left">-i</td><td align="left">insert拒绝类规则放在所有规则最上面</td></tr></tbody></table><table><thead><tr><th>指定匹配</th><th>说明</th></tr></thead><tbody><tr><td>-p</td><td>指定要匹配的协议类型，如TCP,UDP</td></tr><tr><td>-s</td><td>指定源IP地址或地址范围</td></tr><tr><td>-d</td><td>指定目标IP或地址范围</td></tr><tr><td>-sport</td><td>指定源端口号</td></tr><tr><td>-dport</td><td>指定目标端口号</td></tr><tr><td>-j</td><td>满足条件之后执行的动作</td></tr></tbody></table><table><thead><tr><th>动作</th><th>说明</th></tr></thead><tbody><tr><td>ACCEPT</td><td>允许数据包通过</td></tr><tr><td>DROP</td><td>丢弃数据包，<strong>不给出回应</strong></td></tr><tr><td>REJECT</td><td>拒绝数据包通过，<strong>会返回一个响应信息</strong></td></tr></tbody></table><p><img src="image-20231028153920907.png" alt="image-20231028153920907"></p><p><img src="image-20231030162712870.png" alt="image-20231030162712870"></p><p><strong>白名单安全机制和黑名单安全机制：</strong>默认允许的就是黑名单安全机制</p><p><img src="image-20231030165912313.png" alt="image-20231030165912313"></p><p><strong>四表五链+规则：</strong></p><p>表：相同功能的集合</p><p>  <img src="image-20231030225016377.png" alt="image-20231030225016377"></p><p> <strong>传统防火墙是否能够有效地保护虚拟主机安全</strong>：</p><p>​传统防火墙通常被设计用来保护企业网络边界，监控和过滤进入和离开网络的数据流量。然而，在虚拟化环境中，虚拟主机（VMs）的网络通信通常在内部网络中进行，而不是通过企业网络的边界。因此，传统防火墙可能无法提供足够的保护虚拟主机安全所需的细粒度控制和安全性。</p><h3 id="设备安全："><a href="#设备安全：" class="headerlink" title="设备安全："></a>设备安全：</h3><p>网络设备之间的远程运维采用的安全通信方式：SSH,VPN</p><p>Ubuntu系统中的日志文件都位于&#x2F;var&#x2F;log目录，其中的登录认证日志都在auth.log文件中</p><p>Ubuntu系统的配置基本在&#x2F;etc目录下，</p><p>“&gt;”：是改写原有文件的内容</p><p>“&gt;&gt;”：在原有文件内容的后面进行追加</p><p>Linux系统服务管理程序是systemctl，其语法就是命令+动作+服务命令：systemctl restart ssh</p><p>命令历史记录都在每个用户home目录下的.bash_history文件中，home目录可以用~表示，组合就是：</p><p>rm ~&#x2F;.bash_history</p><h3 id="Windows系统"><a href="#Windows系统" class="headerlink" title="Windows系统"></a>Windows系统</h3><p><img src="image-20231031174830184.png" alt="image-20231031174830184"></p><p>查看系统端口开放情况：<strong>netstat</strong></p><h3 id="Linux系统"><a href="#Linux系统" class="headerlink" title="Linux系统"></a>Linux系统</h3><p><img src="image-20231031173802187.png" alt="image-20231031173802187"></p><p><img src="image-20231031174215718.png" alt="image-20231031174215718"></p><p><img src="image-20231031174344693.png" alt="image-20231031174344693"></p><p><img src="image-20231031175000737.png" alt="image-20231031175000737"></p><p>查看系统端口开放情况：<strong>netstat</strong></p><p><img src="image-20231102215505578.png" alt="image-20231102215505578"></p><h3 id="端口号"><a href="#端口号" class="headerlink" title="端口号"></a>端口号</h3><ol><li><p><strong>80&#x2F;TCP：</strong> HTTP通信（用于常规的网页浏览）</p></li><li><p><strong>443&#x2F;TCP：</strong> HTTPS通信（加密的网页浏览）</p></li><li><p><strong>21&#x2F;TCP：</strong> FTP控制端口（用于文件传输协议）</p></li><li><p><strong>22&#x2F;TCP：</strong> SSH（用于安全的远程命令行访问）</p><p>Secure Shell 安全外壳 基于公钥</p></li><li><p><strong>23&#x2F;TCP：</strong> Telnet（用于远程命令行访问，不安全，不推荐使用）</p></li></ol><p><img src="image-20231102221343831.png" alt="image-20231102221343831"></p><h3 id="数据库系统安全"><a href="#数据库系统安全" class="headerlink" title="数据库系统安全"></a>数据库系统安全</h3><p>国外主流的数据库系统有 MS SQL、MySQL、Oracle、DB2 等</p><p><strong>数据库脱敏</strong>是指利用数据脱敏技术将数据库中的数据进行变换处理，在保待数据按需使用 目标的同时，又能避免敏感数据外泄</p><h3 id="Snort规则"><a href="#Snort规则" class="headerlink" title="Snort规则"></a>Snort规则</h3><p>Snort 是一个开源入侵防御系统（IPS）。Snort IPS 使用一系列规则来帮助定义恶意网络活动，并利用这些规则来查找与之匹配的数据包，并为用户生成警报。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alert tcp any any -&gt; 192.168.1.0/24 111(content:&quot;|00 01 86 a5|&quot;;msg:&quot;mountd access&quot;;)</span><br></pre></td></tr></table></figure><p>snort 每条规则都可以分成逻辑上的两个部分：<strong>规则头</strong>（header）和<strong>规则选项</strong>（General Option）</p><p>从开头到括号前属于规则头部分，括号内的部分属于规则选项。规则选项中冒号前面的词叫做选项<strong>关键词</strong>(option keywords)。如果许多选项组合在一起，它们之间是逻辑与的关系</p><p><strong>规则头：</strong></p><ul><li><p>规则行为</p><p>Alert</p><p>Log</p><p>Pass</p></li><li><p>协议</p><p>tcp udp icmp</p></li><li><p>IP地址</p></li><li><p>端口</p></li><li><p>方向操作符</p><p>方向操作符-&gt;表示数据包的流向。它左边是数据包的源地址和源端口，右边是目的地址和端口。</p></li></ul><p><strong>规则选项:</strong></p><h3 id="Kerberos认证"><a href="#Kerberos认证" class="headerlink" title="Kerberos认证"></a>Kerberos认证</h3><p><img src="image-20231102221926301.png" alt="image-20231102221926301"></p><h3 id="云计算"><a href="#云计算" class="headerlink" title="云计算"></a>云计算</h3><p><img src="image-20231102225510042.png" alt="image-20231102225510042"></p><p>云计算安全防护：</p><p><img src="image-20231102225627238.png" alt="image-20231102225627238"></p><p><img src="image-20231102225635111.png" alt="image-20231102225635111"></p><p><img src="image-20231102225646731.png" alt="image-20231102225646731"></p><h3 id="APT防护"><a href="#APT防护" class="headerlink" title="APT防护"></a>APT防护</h3><p><img src="image-20231102225909493.png" alt="image-20231102225909493"></p><p>APT（Advanced Persistent Threat）检测系统主要依赖于多种技术方法，这些方法通常结合使用，以提高检测的准确性和及时性。以下是一些常见的APT检测技术方法：</p><ol><li><p><strong>行为分析（Behavioral Analysis）：</strong> APT检测系统会分析系统和网络上的各种行为，例如文件操作、注册表修改、网络活动等。异常的行为可能表明系统受到了攻击。</p></li><li><p><strong>异常检测（Anomaly Detection）：</strong> 基于机器学习和统计分析的方法，监视系统和网络的正常活动，当出现异常模式时，系统会发出警报。这种方法侧重于检测与正常行为相悖的活动。</p></li><li><p><strong>签名检测（Signature-based Detection）：</strong> 使用已知的攻击签名（malware的特定标志或特征）来匹配网络流量、文件或系统行为。这种方法可以快速检测到已知的攻击，但无法检测未知的APT攻击。</p></li><li><p><strong>沙盒分析（Sandbox Analysis）：</strong> 将潜在恶意文件或链接放入隔离环境（沙盒）中运行，观察其行为。沙盒可以模拟真实环境，帮助分析人员确定文件的恶意性。</p></li><li><p><strong>威胁情报（Threat Intelligence）：</strong> 使用来自各种源头（安全厂商、开源社区、政府组织等）的威胁情报数据，进行分析和匹配，以便及时识别新的威胁。</p></li><li><p><strong>流量分析（Traffic Analysis）：</strong> 监视网络流量，检测异常的数据包、连接或传输模式。流量分析可以揭示攻击者与受感染系统之间的通信。</p></li><li><p><strong>终端安全性（Endpoint Security）：</strong> 在终端设备上部署安全软件，监控并阻止恶意活动。终端安全性可以防止恶意软件的传播和执行。</p></li><li><p><strong>用户行为分析（User Behavior Analytics）：</strong> 监控用户的行为模式，识别与正常行为不符的活动。例如，员工在非常规时间登录或访问敏感文件。</p></li><li><p><strong>虚拟化和容器安全性（Virtualization and Container Security）：</strong> 对虚拟化环境和容器进行监控，防止APT攻击通过虚拟环境传播。</p></li><li><p><strong>日志分析（Log Analysis）：</strong> 分析各种日志，包括操作系统日志、应用程序日志、防火墙日志等，以发现异常活动和潜在的威胁。</p></li></ol><h3 id="网络路由认证应用"><a href="#网络路由认证应用" class="headerlink" title="网络路由认证应用"></a>网络路由认证应用</h3><h1 id="整理"><a href="#整理" class="headerlink" title="整理"></a>整理</h1><p><img src="image-20231031173709974.png" alt="image-20231031173709974"></p><p><img src="image-20231030235844010.png" alt="image-20231030235844010"></p><p><img src="image-20231031174122763.png" alt="image-20231031174122763"></p><p><img src="image-20231031174602953.png" alt="image-20231031174602953"></p><p><img src="image-20231031174730670.png" alt="image-20231031174730670"></p><p><img src="image-20231031175043352.png" alt="image-20231031175043352"></p><p><img src="image-20231031000058284.png" alt="image-20231031000058284"></p><p><img src="image-20231031175336455.png" alt="image-20231031175336455"></p><p><img src="image-20231031175559061.png" alt="image-20231031175559061"></p><p><img src="image-20231101220220654.png" alt="image-20231101220220654"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SQL</title>
      <link href="/2023/10/26/SQL/"/>
      <url>/2023/10/26/SQL/</url>
      
        <content type="html"><![CDATA[<h1 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h1><h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">sudo service mysql start  #启动mysql</span><br><span class="line"></span><br><span class="line">mysql -u root#登录</span><br><span class="line"></span><br><span class="line">show databases;   #查看数据库（命令结尾带&#x27;;&#x27;）</span><br><span class="line"></span><br><span class="line">CREATE DATABASE mysql_shiyan; #创建数据库</span><br><span class="line">DROP DATABASE mysql_shiyan;#删除数据库</span><br><span class="line"></span><br><span class="line">use mysql_shiyan; #连接某一数据库</span><br><span class="line"></span><br><span class="line">show tables;#查看表</span><br><span class="line"></span><br><span class="line">#新建表</span><br><span class="line">CREATE TABLE 表的名字</span><br><span class="line">(列名a 数据类型(数据长度),</span><br><span class="line"> 列名b 数据类型(数据长度),</span><br><span class="line"> 列名c 数据类型(数据长度)</span><br><span class="line">);</span><br><span class="line">#例子：primary key 设置为主键：唯一标识，不为空</span><br><span class="line">create table book(</span><br><span class="line">  book_id int primary key,</span><br><span class="line">  book_name varchar(50) not null</span><br><span class="line">);</span><br><span class="line">#删除表</span><br><span class="line">drop table 表的名字；</span><br><span class="line">#显示表的结构</span><br><span class="line">desc 表名;</span><br></pre></td></tr></table></figure><p><img src="image-20231020162305745.png" alt="image-20231020162305745"></p><p><img src="image-20231020162445163.png" alt="image-20231020162445163"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">select * from employee;#查看表</span><br><span class="line"></span><br><span class="line">#向表插入数据</span><br><span class="line">insert into 表的名字(列名a,列名b,列名c)</span><br><span class="line">values(值1，值2，值3)；</span><br></pre></td></tr></table></figure><h2 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h2><p>通常有：</p><p>primary key :主键</p><p>default 默认 </p><p>unique 唯一</p><p>foreign key 外键</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#外键，表达的形式</span><br><span class="line">CREATE TABLE mark(</span><br><span class="line">    mid int NOT NULL AUTO_INCREMENT,</span><br><span class="line">    sid int NOT NULL,</span><br><span class="line">    cid int NOT NULL,</span><br><span class="line">    score int NOT NULL,</span><br><span class="line">    PRIMARY KEY(mid),</span><br><span class="line">    FOREIGN KEY(sid) REFERENCES student(sid),</span><br><span class="line">    FOREIGN KEY(cid) REFERENCES course(cid)</span><br><span class="line">    );</span><br></pre></td></tr></table></figure><p>NOT NULL 非空</p><h2 id="导入SQL语句"><a href="#导入SQL语句" class="headerlink" title="导入SQL语句"></a>导入SQL语句</h2><p>这个命令的含义是在 MySQL 数据库中运行一个 SQL 脚本文件。让我来解释一下每部分的含义：</p><ul><li><p>**<code>source</code>**：这是 MySQL 命令行客户端提供的一个指令，它用于读取并执行一个 SQL 脚本文件。使用 <code>source</code> 命令，你可以在 MySQL 命令行中运行一个 SQL 脚本，而不必逐行输入 SQL 语句。</p></li><li><p>**<code>/home/shiyanlou/Desktop/MySQL-03-01.sql</code>**：这是一个文件路径，指定了要运行的 SQL 脚本文件的位置。在这个例子中，<code>MySQL-03-01.sql</code> 文件位于 <code>shiyanlou</code> 用户的桌面（Desktop）目录下。</p></li></ul><p>当你在 MySQL 命令行中输入 <code>source /home/shiyanlou/Desktop/MySQL-03-01.sql;</code> 后，MySQL 服务器会读取指定路径上的 <code>MySQL-03-01.sql</code> 文件，并将其中的 SQL 语句逐行执行。这样可以一次性批量导入大量的 SQL 语句，例如创建表、插入数据、定义索引等。</p><p>请注意，<code>source</code> 命令通常在 MySQL 命令行中执行，确保在运行该命令之前已经登录到了 MySQL 数据库，并且具有足够的权限来执行脚本中的 SQL 语句。</p><h2 id="select"><a href="#select" class="headerlink" title="select"></a>select</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#SELECT 要查询的列名 FROM 表名字 WHERE 限制条件;</span><br><span class="line">SELECT name,age FROM employee;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>**1)**SELECT 语句常常会有 WHERE 限制条件，用于达到更加精确的查询。WHERE 限制条件可以有数学符号 (<code>=,&lt;,&gt;,&gt;=,&lt;=</code>) ，刚才我们查询了 name 和 age，现在稍作修改：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT name,age FROM employee WHERE age&gt;25;</span><br><span class="line"></span><br><span class="line">SELECT name,age,phone FROM employee WHERE name=&#x27;Mary&#x27;;</span><br></pre></td></tr></table></figure><p>**2)**WHERE 后面可以有不止一条限制，而根据条件之间的逻辑关系，可以用 [<code>条件一 OR 条件二</code>] 和 [<code>条件一 AND 条件二</code>] 连接：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT name,age FROM employee WHERE age&lt;25 OR age&gt;30;</span><br><span class="line">#筛选出 age 大于 25，且 age 小于 30</span><br><span class="line">SELECT name,age FROM employee WHERE age&gt;25 AND age&lt;30;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>而刚才的限制条件 age&gt;25 AND age&lt;30 ，如果需要包含 25 和 30 这两个数字的话，可以替换为 <strong>age BETWEEN 25 AND 30</strong> ：</p><p><strong>3)<strong>关键词 <strong>IN</strong> 和 <strong>NOT IN</strong> 的作用和它们的名字一样明显，用于筛选</strong>“在”</strong>或<strong>“不在”</strong>某个范围内的结果，比如说我们要查询在 <strong>dpt3</strong> 或 <strong>dpt4</strong> 的人:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT name,age,phone,in_dpt FROM employee WHERE in_dpt IN (&#x27;dpt3&#x27;,&#x27;dpt4&#x27;);</span><br><span class="line">#而 NOT IN 的效果则是，如下面这条命令，查询出了不在 dpt1 也不在 dpt3 的人：</span><br><span class="line">SELECT name,age,phone,in_dpt FROM employee WHERE in_dpt NOT IN (&#x27;dpt1&#x27;,&#x27;dpt3&#x27;);</span><br></pre></td></tr></table></figure><p>**4)**关键字 <strong>LIKE</strong> 可用于实现模糊查询，常见于搜索功能中。</p><p>和 LIKE 联用的通常还有通配符，代表未知字符。SQL 中的通配符是 <code>_</code> 和 <code>%</code> 。其中 <code>_</code> 代表一个未指定字符，<code>%</code> 代表<strong>不定个</strong>未指定字符</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#查找出了 1101 开头的 6 位数电话号码</span><br><span class="line">SELECT name,age,phone FROM employee WHERE phone LIKE &#x27;1101_ _&#x27;;</span><br><span class="line">#查找出了首字母为 J 的人：</span><br><span class="line">SELECT name,age,phone FROM employee WHERE name LIKE &#x27;J%&#x27;;</span><br></pre></td></tr></table></figure><p><strong>5)<strong>为了使查询结果看起来更顺眼，我们可能需要对结果按某一列来排序，这就要用到 <strong>ORDER BY</strong> 排序关键词。默认情况下，</strong>ORDER BY</strong> 的结果是<strong>升序</strong>排列，而使用关键词 <strong>ASC</strong> 和 <strong>DESC</strong> 可指定<strong>升序</strong>或<strong>降序</strong>排序。 比如，我们<strong>按 salary 降序排列</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT name,age,salary,phone FROM employee ORDER BY salary DESC;</span><br></pre></td></tr></table></figure><p>**6)**SQL 允许对表中的数据进行计算。对此，SQL 有 5 个内置函数</p><p><img src="image-20231021212816941.png" alt="image-20231021212816941"></p><p>具体举例，比如计算出 salary 的最大、最小值，用这样的一条语句：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT MAX(salary) AS max_salary,MIN(salary) FROM employee;</span><br></pre></td></tr></table></figure><p><strong>使用 AS 关键词可以给值重命名</strong>，比如最大值被命名为了 max_salary：</p><p><img src="image-20231021213028961.png" alt="image-20231021213028961"></p><h2 id="数据库的修改和删除"><a href="#数据库的修改和删除" class="headerlink" title="数据库的修改和删除"></a>数据库的修改和删除</h2><p>重命名一张表：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">RENAME TABLE 原名 TO 新名字; </span><br><span class="line"></span><br><span class="line">ALTER TABLE 原名 RENAME 新名; </span><br><span class="line"></span><br><span class="line">ALTER TABLE 原名 RENAME TO 新名;</span><br></pre></td></tr></table></figure><p>对一列的修改：</p><p>在表中<strong>新增</strong>一列：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE 表名字 ADD COLUMN 列名字 数据类型 约束; </span><br><span class="line">或： </span><br><span class="line">ALTER TABLE 表名字 ADD 列名字 数据类型 约束;</span><br></pre></td></tr></table></figure><p>新增加的列，被默认放置在这张表的最右边。如果要把增加的列插入在指定位置，则需要在语句的最后使用 AFTER 关键词(<strong>“AFTER 列 1” 表示新增的列被放置在 “列 1” 的后面</strong>)。</p><p>或者是first放在第一列；</p><p><strong>删除：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE 表名字 DROP COLUMN 列名字;</span><br><span class="line"></span><br><span class="line">或： ALTER TABLE 表名字 DROP 列名字;</span><br></pre></td></tr></table></figure><p><strong>重命名一列</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE 表名字 CHANGE 原列名 新列名 数据类型 约束;</span><br></pre></td></tr></table></figure><p>当<strong>原列名</strong>和<strong>新列名</strong>相同的时候，指定新的<strong>数据类型</strong>或<strong>约束</strong>，就可以用于修改数据类型或约束。需要注意的是，修改数据类型可能会导致数据丢失，所以要慎重使用。</p><p><strong>改变数据类型</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE 表名字 MODIFY 列名字 新数据类型;</span><br></pre></td></tr></table></figure><p><strong>对表的内容修改</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">UPDATE 表名字 SET 列1=值1,列2=值2 WHERE 条件;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">UPDATE employee SET age=21,salary=3000 WHERE name=&#x27;Tom&#x27;;</span><br></pre></td></tr></table></figure><p><strong>删除一行的数据</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">DELETE FROM 表名字 WHERE 条件;</span><br><span class="line"></span><br><span class="line">DELETE FROM employee WHERE name=&#x27;Tom&#x27;;</span><br></pre></td></tr></table></figure><h1 id="头歌学习"><a href="#头歌学习" class="headerlink" title="头歌学习"></a>头歌学习</h1><p>[]里面的内容代表选择性写</p><h2 id="初识MySQL"><a href="#初识MySQL" class="headerlink" title="初识MySQL"></a>初识MySQL</h2><h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#连接数据库</span><br><span class="line">mysql -u用户名 -p密码</span><br><span class="line">#创建数据库</span><br><span class="line">create database 数据库名;</span><br><span class="line">#选择数据库</span><br><span class="line">use 数据库名;</span><br></pre></td></tr></table></figure><h3 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#创建表</span><br></pre></td></tr></table></figure><p><img src="image-20231027165313306.png" alt="image-20231027165313306"></p><h3 id="使用主键约束"><a href="#使用主键约束" class="headerlink" title="使用主键约束"></a>使用主键约束</h3><p><strong>表的主键</strong>就可以看做是<strong>人的身份证</strong></p><p>有两种方式可以添加主键约束： </p><p>​1.在定义列的同时指定主键；</p><p><img src="image-20231027165424397.png" alt="image-20231027165424397"></p><p>​2.在定义完字段之后再指定主键。</p><p><img src="image-20231027165438557.png" alt="image-20231027165438557"></p><p><strong>多字段联合主键</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#举个例子，将员工的名字和部门ID联合起来作为主键：</span><br><span class="line">CREATE TABLE t_emp2</span><br><span class="line">(</span><br><span class="line">    name VARCHAR(32),</span><br><span class="line">    deptId INT,</span><br><span class="line">    salary FLOAT,</span><br><span class="line">    PRIMARY KEY(name,deptId)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="外键约束"><a href="#外键约束" class="headerlink" title="外键约束"></a>外键约束</h3><p>外键就是<strong>另一张表中的主键</strong>。</p><p>外键有啥用啊？ <strong>答：</strong>外键的主要作用就是保持数据的一致性，完整性。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#添加外键</span><br><span class="line">constraint 外键名 foreign key(字段名) references 主表名(主键名)</span><br><span class="line">constraint aaa foreign key(deptId) references t_dept(deptId);</span><br></pre></td></tr></table></figure><h3 id="添加常用约束"><a href="#添加常用约束" class="headerlink" title="添加常用约束"></a>添加常用约束</h3><p>1.怎么添加唯一约束；</p><p>​唯一约束<code>（Unique Constraint）</code>要求该列唯一，允许为空，但是只能有一个空值。唯一约束可以确保一列或者几列不出现重复值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE t_dept(</span><br><span class="line">    id INT PRIMARY KEY,</span><br><span class="line">    name VARCHAR(22) UNIQUE,</span><br><span class="line">    location VARCHAR(50)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>2.怎么添加非空约束； </p><p>关键词：<code>NOT NULL</code>；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE t_dept(</span><br><span class="line">    id INT PRIMARY KEY,</span><br><span class="line">    name VARCHAR(22) NOT NULL,</span><br><span class="line">    location VARCHAR(50)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>3.怎么添加默认约束； </p><p>默认约束：即给字段一个默认值。 关键词：<code>DEFAULT</code>；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE t_emp(</span><br><span class="line">    id INT PRIMARY KEY,</span><br><span class="line">    name VARCHAR(22),</span><br><span class="line">    sex VARCHAR(2) DEFAULT &#x27;男&#x27;</span><br><span class="line">) DEFAULT CHARSET=utf8;</span><br></pre></td></tr></table></figure><ul><li>如果是添加<strong>字符串型</strong>默认值要使用<strong>单引号</strong>，如果是整型则不需要加任何符号；</li><li>如果要添加的是<strong>中文默认值</strong>，则需要加上<code>DEFAULT CHARSET=utf8;</code>使用英文字符则不需要。</li></ul><p>4.怎么设置字段的值自动增加。</p><p>关键词：<code>AUTO_INCREMENT</code>，默认情况下初始值和增量都为<code>1</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE t_tmp</span><br><span class="line">(</span><br><span class="line">    id int PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">    name VARCHAR(32)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="数据库和表的基本操作"><a href="#数据库和表的基本操作" class="headerlink" title="数据库和表的基本操作"></a>数据库和表的基本操作</h2><h3 id="查看表结构和修改表名"><a href="#查看表结构和修改表名" class="headerlink" title="查看表结构和修改表名"></a>查看表结构和修改表名</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#查看表</span><br><span class="line">describe 表名;  </span><br><span class="line">#可以返回给我们建表时所写的详细语句，而且还可以查看存储引擎和字符编码。</span><br><span class="line">show create table 表名\G;  </span><br><span class="line">#修改表名</span><br><span class="line">alter table 旧表名 rename 新表名：</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">describe Products;</span><br><span class="line">show create taable Products\G;</span><br><span class="line">alter table Products rename tb_Products;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="修改字段名与字段数据类型"><a href="#修改字段名与字段数据类型" class="headerlink" title="修改字段名与字段数据类型"></a>修改字段名与字段数据类型</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#修改字段名</span><br><span class="line">alter table 表名 change 旧字段名 新字段名 新数据类型;  #即使数据类型不变也不要空着</span><br><span class="line">#修改字段数据类型</span><br><span class="line">alter table 表名 modify 字段名 数据类型;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alter table mall_product change proid_id ID varchar(30);</span><br><span class="line">alter table mall_product modify ID varchar(20);</span><br></pre></td></tr></table></figure><h3 id="添加与删除字段"><a href="#添加与删除字段" class="headerlink" title="添加与删除字段"></a>添加与删除字段</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#添加字段</span><br><span class="line">alter table 表名 add 新字段名 数据类型 [约束类型] [FIRST] [after]已存在字段名</span><br><span class="line">#删除字段</span><br><span class="line">alter table 表名 drop 字段名;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table prod_country add County varchar(20);</span><br></pre></td></tr></table></figure><h3 id="修改字段的排列位置"><a href="#修改字段的排列位置" class="headerlink" title="修改字段的排列位置"></a>修改字段的排列位置</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#修改字段的排列位置</span><br><span class="line">alter table 表名 modify 字段1 数据类型 FIRST|AFTER 字段2：</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="删除表的外键约束"><a href="#删除表的外键约束" class="headerlink" title="删除表的外键约束"></a>删除表的外键约束</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#删除表的外键约束</span><br><span class="line">alter table 表名 drop foreign key 外键约束名</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="表单查询"><a href="#表单查询" class="headerlink" title="表单查询"></a>表单查询</h2><h3 id="对查询结果进行排序"><a href="#对查询结果进行排序" class="headerlink" title="对查询结果进行排序"></a>对查询结果进行排序</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#根据自己的需求添加WHERE、LIKE子句来设置条件，再对结果过进行排序显示</span><br><span class="line">#desc降序 asc升序</span><br><span class="line">select 字段名 from 表名 order by 字段 ASC|DESC;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h3><p>分组查询的关键字是<code>Group By</code>，查询的是每个分组中 <strong>首次出现的一条记录</strong>。</p><p><code>having</code>子句用来对<strong>分组后</strong>的数据进行筛选</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">select 字段 from 表名 group by 字段名;</span><br><span class="line"></span><br><span class="line">select sno,count(*)from tb_grade</span><br><span class="line">where score &gt;=90</span><br><span class="line">group by sno having count(pno) &gt;= 2;</span><br></pre></td></tr></table></figure><h3 id="使用LIMIT限制查询结果的数量"><a href="#使用LIMIT限制查询结果的数量" class="headerlink" title="使用LIMIT限制查询结果的数量"></a>使用LIMIT限制查询结果的数量</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select 字段名 from 表名 limit [offset,] 记录数;</span><br></pre></td></tr></table></figure><ul><li>第一个参数，<code>OFFSET</code>，可选参数，表示<strong>偏移量</strong>，如果不指定默认值为<code>0</code>，表示从查询结果的第一条记录开始，若偏移量为<code>1</code>，则从查询结果中的第二条记录开始，以此类推。</li><li>第二个参数，记录数，表示返回查询结果的条数。</li></ul><p><img src="image-20231027171323416.png" alt="image-20231027171323416"></p><h2 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a>连接查询</h2><h3 id="内连接查询"><a href="#内连接查询" class="headerlink" title="内连接查询"></a>内连接查询</h3><ul><li>仅将两个表中满足连接条件的行组合起来作为结果集，称为内连接；</li><li>关键字：<code>[inner] join ...  on</code>。</li></ul><p>从表1中取出每一条记录，去表2中与所有的记录进行匹配，匹配必须是某个条件在表1中与表2中相同，最终才会保留结果，否则不保留。inner 关键字可省略不写；on 表示连接条件：条件字段就是代表相同的业务含义，大多数情况下为两张表中的主外键关系。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">表1 [inner] join 表2 on 表1.字段=表2.字段</span><br></pre></td></tr></table></figure><p><strong>例子：</strong></p><p>查询数据表中学生姓名以及对应的班级名称，将其对应的列名分别另命名为<code>studentName</code>和<code>className</code>。</p><p><code>tb_student</code>表数据：</p><p><img src="image-20231027171810971.png" alt="image-20231027171810971"></p><p><code>tb_class</code>表数据：</p><p><img src="image-20231027171828364.png" alt="image-20231027171828364"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select tb_student.name as studentName,tb_class.name as className from tb_student join tb_class on tb_class.id = tb_student.class_id; </span><br></pre></td></tr></table></figure><p><strong>预期输出</strong></p><p><img src="image-20231027171858842.png" alt="image-20231027171858842"></p><h3 id="外连接查询"><a href="#外连接查询" class="headerlink" title="外连接查询"></a>外连接查询</h3><ul><li>以某张表为主，取出里面的所有记录，然后每条与另外一张表进行连接，不管能不能匹配上条件，最终都会保留。能匹配，正确保留；不能匹配，其它表的字段都置空（<code>null</code>），称为外连接。</li><li>外连接查询分为左外连接查询和右外连接查询；</li><li>关键字：<code>left/right [outer] join ... on</code>。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">表1 left/right [outer] join 表2 on 表1.字段=表2.字段</span><br></pre></td></tr></table></figure><ol><li><code>左外连接：在内连接的基础上，还包含表1中所有不符合条件的数据行，并在其中的表2列填写 NULL；</code></li><li><code>右外连接：在内连接的基础上，还包含表2中所有不符合条件的数据行，并在其中的表1列填写 NULL。</code></li></ol><p>左表和右表，一旦表的位置定了修改的是right和left，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select tb_student.name as studentName , tb_class.name as className from tb_student left join tb_class on tb_student.class_id = tb_class.id</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="复合条件查询"><a href="#复合条件查询" class="headerlink" title="复合条件查询"></a>复合条件查询</h3><p>比如加上升序</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select employee.name as empName ,employee.age , department.name as depName from employee join department on employee.dept_id = department.id oder by age</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select tb_student.name as studentName,score,tb_class.name as className from tb_student,tb_class where tb_student.class_id = tb_class.id and tb_student.score&gt;90 order by score desc;</span><br></pre></td></tr></table></figure><h2 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h2><h3 id="带比较运算符的子查询"><a href="#带比较运算符的子查询" class="headerlink" title="带比较运算符的子查询"></a>带比较运算符的子查询</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#例如</span><br><span class="line">select * from t1 where col1=(select col2 from t2);</span><br></pre></td></tr></table></figure><p>分为四类：子查询指嵌套在查询内部，<strong>且必须始终出现在圆括号内</strong></p><ul><li>标量子查询：返回单一值的标量，最简单的形式；</li><li>列子查询：返回的结果集是 <code>N</code> 行一列；</li><li>行子查询：返回的结果集是一行 <code>N</code> 列；</li><li>表子查询：返回的结果集是 <code>N</code> 行 <code>N</code> 列。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select id,name,dept_id from employee where dept_id = (select dept_id from employee where name=&#x27;Tom&#x27;)</span><br><span class="line"></span><br><span class="line">select name, age from tb_emp where age&gt;(select avg(age) from eb_emp) order by age desc;</span><br></pre></td></tr></table></figure><p><img src="image-20231027172729125.png" alt="image-20231027172729125"></p><h3 id="关键字子查询"><a href="#关键字子查询" class="headerlink" title="关键字子查询"></a>关键字子查询</h3><p>在列子查询中可以使用 <code>ALL</code>、<code>ANY</code>、<code>SOME</code> 和 <code>IN</code>关键字操作符。</p><h5 id="ALL关键字"><a href="#ALL关键字" class="headerlink" title="ALL关键字"></a><code>ALL</code>关键字</h5><p><code>ALL</code>必须接在一个比较运算符的后面，表示与子查询返回的<strong>所有值</strong>比较都为 <code>TRUE</code>则返回<code>TRUE</code>。</p><h5 id="ANY和SOME关键字"><a href="#ANY和SOME关键字" class="headerlink" title="ANY和SOME关键字"></a><code>ANY</code>和<code>SOME</code>关键字</h5><p><code>ANY</code>与比较操作符联合使用，表示与子查询返回的<strong>任何值</strong>比较为<code>TRUE </code>，则返回<code>TRUE</code>。 </p><p><code>SOME</code>是<code>ANY</code>的别名，一般用的比较少。</p><h5 id="IN关键字"><a href="#IN关键字" class="headerlink" title="IN关键字"></a><code>IN</code>关键字</h5><ul><li><code>IN</code>的意思就是指定的一个值是否在这个集合中，如果在就返回<code>TRUE</code>；否则就返回<code>FALSE</code>了，同<code>IN</code>(项<code>1</code>，项<code>2</code>，…)；</li><li><code>IN</code> 是 <code>= ANY</code> 的别名，二者相同，但 <code>NOT IN</code> 的别名却不是 <code>&lt;&gt; ANY</code> 而是 <code>&lt;&gt; SOME</code>。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">select position,salary from tb_salary where salary &gt; ANY(select salary from tb_salary where position = &#x27;Java&#x27;);</span><br><span class="line">select porition,salary from tb_salary where salary &lt; ANY(select salary from tb_salart where position=&#x27;Java&#x27;);</span><br><span class="line">select position,salary from tb_salart where position=&#x27;Java&#x27;;</span><br></pre></td></tr></table></figure><h2 id="复杂查询"><a href="#复杂查询" class="headerlink" title="复杂查询"></a>复杂查询</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="使用聚合函数查询"><a href="#使用聚合函数查询" class="headerlink" title="使用聚合函数查询"></a>使用聚合函数查询</h2><ul><li><p><strong>cout()</strong></p><p>**count()**函数用来统计记录的总条数<code>select count(*/字段名) from 数据表;</code></p><p><img src="image-20231110191914868.png" alt="image-20231110191914868"></p><p><img src="image-20231110191937624.png" alt="image-20231110191937624"></p><p><img src="image-20231110192048547.png" alt="image-20231110192048547"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select classid,count(*) from tb_class where classid=367;</span><br></pre></td></tr></table></figure></li><li><p><strong>sum()</strong></p></li></ul><p><code>SUM()</code>函数是对数据表的某列进行求和操作。<code>select sum(字段名) from 数据表;</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select sum(Salary) from tb_Salary;</span><br><span class="line">select sum(Salary) from tb_Salary where name=&#x27;Tom&#x27;;</span><br></pre></td></tr></table></figure><ul><li><strong>avg()</strong></li></ul><p><code>AVG()</code>函数是对数据表的某列进行求平均值操作。<code>select avg(字段名) from 数据表;</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select avg(Salary) from tb_Salary;</span><br><span class="line">select avg(Salary) from tb_Salary where name=&#x27;Nancy&#x27;</span><br></pre></td></tr></table></figure><ul><li><strong>max()</strong></li></ul><p><code>MAX()</code>函数是求某列的最大数值。<code>select max(字段名) from 数据表;</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select max(Salary) from tb_Salary;</span><br><span class="line">select max(Salary) from tb_Salary where name=&#x27;Carly&#x27;;</span><br></pre></td></tr></table></figure><ul><li><strong>min()</strong></li></ul><p><code>MIN()</code>函数是求某列的最小数值。<code>select min(字段名) from 数据表</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select min(Salary) from tb_Salary;</span><br></pre></td></tr></table></figure><h2 id="其他函数"><a href="#其他函数" class="headerlink" title="其他函数"></a>其他函数</h2><h3 id="字符函数"><a href="#字符函数" class="headerlink" title="字符函数"></a>字符函数</h3><table><thead><tr><th>函数</th><th>作用</th></tr></thead><tbody><tr><td>concat()</td><td>字符串的拼接</td></tr><tr><td>concat_ws()</td><td>使用指定的字符将目标字符串进行拼接</td></tr><tr><td>format()</td><td>数字格式化</td></tr><tr><td>lower()</td><td>字符串全部转化为小写</td></tr><tr><td>upper()</td><td>字符串全部转化为大写</td></tr><tr><td>left()</td><td>获取左侧的字符串 left(‘MySQL’,2)</td></tr><tr><td>right()</td><td>获取右侧的字符串</td></tr><tr><td>length()</td><td>计算字符串的长度</td></tr><tr><td>ltrim()</td><td>删除前导的空格</td></tr><tr><td>rtrim()</td><td>删除后续的空格</td></tr><tr><td>trim()</td><td>删除前导和后续的空格</td></tr><tr><td>substring()</td><td>字符串截取</td></tr><tr><td>substring_index()</td><td>分割字符串</td></tr><tr><td>replace()</td><td>字符串替换</td></tr><tr><td>[not] like</td><td>模式匹配</td></tr></tbody></table><p><strong>trim删除指定字符：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">trim(leading &#x27;?&#x27; from &#x27;??SQL????&#x27;);</span><br><span class="line">#SQL????，无法删除中间</span><br><span class="line">#leading：是删除前导</span><br><span class="line">#trailing:删除后导</span><br><span class="line">#both：删除所有</span><br></pre></td></tr></table></figure><p><strong>repalce替换</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select replace(&#x27;??S???QL????&#x27;,&#x27;?&#x27;,&#x27;!!&#x27;)</span><br><span class="line">#!!!!S!!!!!!QL!!!!!!!!</span><br><span class="line">select replace(&#x27;??S???QL????&#x27;,&#x27;??&#x27;,&#x27;*&#x27;)</span><br><span class="line">#*S*?QL**</span><br></pre></td></tr></table></figure><p><strong>substring字符串截取</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">substring(&#x27;MYSQL&#x27;,1,2)</span><br><span class="line">#MY</span><br><span class="line">#第一位是1而不是0</span><br></pre></td></tr></table></figure><h2 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h2><p>视图（<code>view</code>）是一种虚拟存在的表，是一个逻辑表，本身并不包含数据。通过视图，可以展现基表（用来创建视图的表）的部分数据；视图数据来自定义视图的查询表。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">create view stu_view as select math,chinese,math+chinese from student;  </span><br><span class="line"></span><br><span class="line">create view stu_classes as select student.stu_id,student.name,stu_info.classes  from student,std_info where student.stu_id=stu_info.stu_id;</span><br><span class="line">#删除视图</span><br><span class="line">drop view 视图名字</span><br></pre></td></tr></table></figure><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><p>数据库索引是一种<strong>提高数据库系统性能</strong>的方法。索引能让数据库服务器更快地查找和获取表中指定的行。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">create index 名字 on 表(字段)</span><br><span class="line">create index idx_age on student(age);</span><br><span class="line">create  unique index idx_age on student(age);#唯一索引 unique</span><br><span class="line">create index idx_age on student(age,name,grade);#组合索引</span><br><span class="line">#drop 删除索引</span><br><span class="line">drop index 名字 on 表名;</span><br><span class="line">#查询索引</span><br><span class="line">show index from 表名</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="MySQL-开发技巧-查询、索引和完整性"><a href="#MySQL-开发技巧-查询、索引和完整性" class="headerlink" title="MySQL 开发技巧-查询、索引和完整性"></a>MySQL 开发技巧-查询、索引和完整性</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select ename , eid , sex from emp  </span><br></pre></td></tr></table></figure><h2 id="授权和回收权限"><a href="#授权和回收权限" class="headerlink" title="授权和回收权限"></a>授权和回收权限</h2><h3 id="授予某数据库的所有权限"><a href="#授予某数据库的所有权限" class="headerlink" title="授予某数据库的所有权限"></a>授予某数据库的所有权限</h3><p><img src="image-20231217142301471.png" alt="image-20231217142301471"></p><p><img src="image-20231217142313342.png" alt="image-20231217142313342"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">//授权grant</span><br><span class="line"></span><br><span class="line">grant  priv_type [(column_list)]   //要设置的权限项；</span><br><span class="line">[,priv_type[(column_list)]][,.....n] on</span><br><span class="line"> &#123;tbl_name|*|*.*|db_name.*|db_name.tbl_name&#125;  //对象类型；</span><br><span class="line">to user[identified by [password] ‘password’]</span><br><span class="line">[,user[identified by [password] ‘password’]][,....n]</span><br><span class="line">[with grant_option]  //可以将该用户的权限转移给其他用户；</span><br><span class="line"></span><br><span class="line">grant priv_type //(权限类型) </span><br><span class="line">on tbl.name.*   db_name.*  db_name.tbl_name.*  //对象类型，授权给的是库还是表</span><br><span class="line">to user  //授权给谁</span><br><span class="line"></span><br><span class="line">//eg:使用 grant 语句创建一个新用户 test1，密码为 test123，该用户对所有的数据又查询、插入</span><br><span class="line">//的权限，并授予 grant 权限。</span><br><span class="line">grant select insert on *.* to test1@localhost identified by ‘test123’ with grant option; </span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//回收revoke</span><br><span class="line">revoke priv_type on .....  from ....</span><br><span class="line">eg:使用 revoke 语句收回收回 test1 用户对 course 数据库中 student 表的 update 权限</span><br><span class="line">revoke update on course.student from test1@localhost</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//查看权限</span><br><span class="line">show grants for username@hostname</span><br></pre></td></tr></table></figure><p><strong>限制权限</strong></p><p>max_queries_per_hour count：表示每小时可以查询数据库的次数。max_connections_per_hour count：表示每小时可以连接数据库的次数 </p><p>max_updates_per_hour count：表示每小时可以修改数据库的次数。</p><p>eg:授予 test1 每小时可以发出的查询数为 50 次，每小时可以连接数据库 10 次，每小时可以发出的更新数为 5 次。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> grant all on *.* to test1@localhost identified by ‘test123’ </span><br><span class="line">with max_queries_per_hour 50</span><br><span class="line">with max_connections_per_hour 10</span><br><span class="line">with max_updates_per_hour 5;</span><br></pre></td></tr></table></figure><h2 id="SQLServer"><a href="#SQLServer" class="headerlink" title="SQLServer"></a>SQLServer</h2><h3 id="第一章-初识SQLServer"><a href="#第一章-初识SQLServer" class="headerlink" title="第一章 初识SQLServer"></a>第一章 初识SQLServer</h3><h4 id="创建数据库-1"><a href="#创建数据库-1" class="headerlink" title="创建数据库"></a>创建数据库</h4><p> SQLServer 提供了 sqlcmd 命令</p><ul><li><code>sqlcmd</code>: 这是一个命令行实用程序，用于在 SQL Server 数据库上执行 Transact-SQL 查询、存储过程等。</li><li><code>-S localhost</code>: 这个选项指定要连接的 SQL Server 实例的<strong>服务器名称</strong>。在这里，它指定了本地计算机（localhost）上的 SQL Server 实例。</li><li><code>-U sa</code>: 这个选项指定要使用的<strong>登录用户名</strong>。在这里，它使用了 “sa”，这是 SQL Server 中的系统管理员（System Administrator）账户，拥有系统上最高级别的权限。</li><li><code>-P &#39;&lt;123123Aa!@&gt;&#39;</code>: 这个选项指定了<strong>登录密码</strong>。密码被尖括号（’&lt;’ 和 ‘&gt;’）括起来，这是为了<strong>防止在命令行历史记录等地方被显示出来</strong>，提高安全性。在这里，密码是 <code>&lt;123123Aa!@&gt;</code>。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlcmd -S localhost -U sa -P &#x27;&lt;123123Aa!@&gt;&#x27;</span><br></pre></td></tr></table></figure><p>创建数据库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">create database TestDb</span><br><span class="line">go#go 代表执行上述语句</span><br></pre></td></tr></table></figure><p>查看所有数据库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select name from sys.databases</span><br><span class="line">go</span><br></pre></td></tr></table></figure><h4 id="创建表-1"><a href="#创建表-1" class="headerlink" title="创建表"></a>创建表</h4><p><img src="image-20231107150416279.png" alt="image-20231107150416279"></p><p><img src="image-20231107150521754.png" alt="image-20231107150521754"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">create database MyDb</span><br><span class="line">go</span><br><span class="line">use MyDb  #选择数据库</span><br><span class="line">go</span><br><span class="line">#创建t_user表</span><br><span class="line">create table t_user</span><br><span class="line">(</span><br><span class="line">id int,</span><br><span class="line">username varchar(32),</span><br><span class="line">password varchar(32),</span><br><span class="line">phone varchar(11)</span><br><span class="line">);</span><br><span class="line">go</span><br><span class="line">#查看表的基本结构</span><br><span class="line">sp_help 表名;</span><br><span class="line">go</span><br><span class="line">#删除表</span><br><span class="line">drop table 表名</span><br><span class="line">go</span><br><span class="line">#查看表的内容</span><br><span class="line">select * from 表名</span><br><span class="line">go</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="使用主键约束-1"><a href="#使用主键约束-1" class="headerlink" title="使用主键约束"></a>使用主键约束</h4><p>​主键，是表中一列或者多列的组合，主键约束（ Primary Key Constraint ）要求主键列的数据唯一，并且不允许为空。主键能够唯一的标识表中的每一条记录，可以结合外键，来定义与不同数据表之间的关系。</p><p>​有两种方式可以添加主键约束：</p><ol><li><p>在定义列的同时指定主键，</p><p><img src="image-20231107150923902.png" alt="image-20231107150923902"></p></li><li><p>在定义完字段之后，再指定主键。</p></li></ol><p>   <img src="image-20231107150935892.png" alt="image-20231107150935892"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#创建表的时候，发现字段类型设置错了想修改</span><br><span class="line">alter table t_user1 alter column phone VARCHAR(11)</span><br></pre></td></tr></table></figure><h4 id="外键约束-1"><a href="#外键约束-1" class="headerlink" title="外键约束"></a>外键约束</h4><p><strong>外部关键字</strong></p><p>在以后，我们统一将外部关键字叫做<strong>外键</strong>，外键就是<strong>另一张表中的主键</strong>。</p><p>添加外键</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CONSTRAINT 外键名 FOREIGN KEY 字段名 REFERENCES 主表名(主键名)</span><br></pre></td></tr></table></figure><p><img src="image-20231107153040455.png" alt="image-20231107153040455"></p><p><img src="image-20231107153103516.png" alt="image-20231107153103516"></p><h4 id="常用约束"><a href="#常用约束" class="headerlink" title="常用约束"></a>常用约束</h4><ol><li><p>怎么添加唯一约束；</p><p>唯一约束（ Unique Constraint ）要求该列唯一，允许为空，但是只能有一个空值。唯一约束可以确保一列或者几列不出现重复值。</p><p>关键词 <strong>UNIQUE</strong></p><p><img src="image-20231107153357777.png" alt="image-20231107153357777"></p></li><li><p>怎么添加非空约束；</p><p>关键词： <strong>NOT NULL</strong> </p><p><img src="image-20231107153418592.png" alt="image-20231107153418592"></p></li><li><p>怎么添加默认约束；</p><p>关键词： <strong>DEFAULT</strong></p><p><img src="image-20231107153437892.png" alt="image-20231107153437892"></p><p>注意：如果是添加字符串型，认值要使用<strong>单引号</strong>；如果是整型，则不需要加任何符号。</p></li><li><p>怎么设置字段的值自动增加。</p><p>关键词： <strong>IDENTITY(1,1)</strong>  表示自动增长，<strong>初始值</strong>为 1 ，<strong>增量</strong>为 1 </p><p><img src="image-20231107153550431.png" alt="image-20231107153550431"></p></li></ol><h3 id="第二章-数据的插入、删除、修改"><a href="#第二章-数据的插入、删除、修改" class="headerlink" title="第二章 数据的插入、删除、修改"></a>第二章 数据的插入、删除、修改</h3><h4 id="数据的插入"><a href="#数据的插入" class="headerlink" title="数据的插入"></a>数据的插入</h4><p><strong>insert</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">use TestDb</span><br><span class="line">create table Customers</span><br><span class="line">(</span><br><span class="line">    cust_id int not null,</span><br><span class="line">    cust_name varchar(32) not null,</span><br><span class="line">    cust_city varchar(32) not null,</span><br><span class="line">    cust_email varchar(32) null</span><br><span class="line">)</span><br><span class="line">--查看表内容</span><br><span class="line">select * from Customers</span><br><span class="line">#第一种</span><br><span class="line">insert into Customers</span><br><span class="line">values (</span><br><span class="line">    &#x27;1000000006&#x27;,</span><br><span class="line">    &#x27;Toy Land&#x27;,</span><br><span class="line">    &#x27;New York&#x27;,</span><br><span class="line">    NULL</span><br><span class="line">)</span><br><span class="line">#第二种 带上字段(column)</span><br><span class="line">insert into Customers(</span><br><span class="line">    cust_id,</span><br><span class="line">    cust_email,</span><br><span class="line">    cust_name,</span><br><span class="line">    cust_city</span><br><span class="line">)</span><br><span class="line">values (</span><br><span class="line">    &#x27;1000000006&#x27;,</span><br><span class="line">    NULL,</span><br><span class="line">    &#x27;Toy Land&#x27;,</span><br><span class="line">    &#x27;New York&#x27;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h4 id="数据的删除"><a href="#数据的删除" class="headerlink" title="数据的删除"></a>数据的删除</h4><p><strong>delete</strong></p><ul><li>删除表中的指定行；</li><li>删除表中的所有行。</li></ul><p><strong>删除表中的指定行</strong></p><p> DELETE FROM 后面需要你指定<strong>删除内容</strong>所在的<strong>表</strong>， WHERE 语句是过滤语句，它用来帮你寻找哪条内容是你想要删除的。在下面的例子中，只有消费者 1000000006 的内容才会被删除。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">delete from Customers where cust_id=1000000006</span><br></pre></td></tr></table></figure><p>删除所有行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">delete from Customers</span><br></pre></td></tr></table></figure><h4 id="数据的更改"><a href="#数据的更改" class="headerlink" title="数据的更改"></a>数据的更改</h4><p><strong>update</strong></p><ul><li>需要更新的表（table）名；</li><li>需要更新的字段（column）名和它的新内容（row）；</li><li>决定更新哪一条内容（row）的过滤条件。</li></ul><p> <strong>更新表中的指定行</strong></p><p><img src="image-20231107155125811.png" alt="image-20231107155125811"></p><p>但是，现在他有了一个新邮箱，所以需要更新数据库里的数据，更新代码如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">update Customers</span><br><span class="line">set cust_email = &#x27;max@yahoo.com&#x27; </span><br><span class="line">where cust_id = &#x27;1000000005&#x27;</span><br></pre></td></tr></table></figure><h3 id="实验二-数据表和视图的创建及使用"><a href="#实验二-数据表和视图的创建及使用" class="headerlink" title="实验二 数据表和视图的创建及使用"></a>实验二 数据表和视图的创建及使用</h3><h4 id="表的创建和使用"><a href="#表的创建和使用" class="headerlink" title="表的创建和使用"></a>表的创建和使用</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE table_name</span><br><span class="line">(</span><br><span class="line">    column_name1 data_type(size),</span><br><span class="line">    column_name2 data_type(size),</span><br><span class="line">    column_name3 data_type(size),</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p> column_name ：列名；</p><p> data_type ：列的数据类型（例如  varchar 、 integer 、 decimal 、 date 等等）；</p><p> size ：列的最大长度。</p><p><img src="image-20231107160214503.png" alt="image-20231107160214503"></p><p><img src="image-20231107160236115.png" alt="image-20231107160236115"></p><p><strong>修改表结构</strong></p><ul><li><p>新增列</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE table_name</span><br><span class="line">ADD column_name datatype</span><br></pre></td></tr></table></figure></li><li><p>删除列</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE table_name</span><br><span class="line">DROP COLUMN column_name</span><br></pre></td></tr></table></figure></li><li><p>修改列的数据类型</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE table_name</span><br><span class="line">ALTER COLUMN column_name datatype</span><br></pre></td></tr></table></figure></li></ul><h4 id="数据库视图和创建的使用"><a href="#数据库视图和创建的使用" class="headerlink" title="数据库视图和创建的使用"></a>数据库视图和创建的使用</h4><p><strong>视图是什么</strong></p><p><strong>视图</strong>是一个虚拟表，其结构和内容是通过 SQL 查询获得的。用户可以通过 SQL 查询语句，像其他普通关系表一样，对视图中的数据进行查询。视图同样支持表的相关操作，并可以直接修改、添加、删除数据库中的真实数据。</p><p><strong>创建视图</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">--语法</span><br><span class="line">CREATE VIEW view_name</span><br><span class="line"> AS</span><br><span class="line">    SELECT column_name(s) FROM table_name</span><br><span class="line">    WHERE condition</span><br></pre></td></tr></table></figure><p> view_name ：指定创建视图的名称；</p><p> column_name ：指定视图中列名称；</p><p> table_name ：视图的基础表名称；</p><p> condition ： select 的限定条件。</p><p><strong>实列：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">--准备表和数据</span><br><span class="line">create table studentTable(</span><br><span class="line">    id int identity(1,1) primary key,</span><br><span class="line">    name varchar(20),</span><br><span class="line">    gender char(2),</span><br><span class="line">    age int,</span><br><span class="line">)</span><br><span class="line">insert into studentTable (name,gender,age)</span><br><span class="line">values</span><br><span class="line">    (&#x27;刘备&#x27;,&#x27;男&#x27;,28),</span><br><span class="line">    (&#x27;张飞&#x27;,&#x27;男&#x27;,24),</span><br><span class="line">    (&#x27;关羽&#x27;,&#x27;男&#x27;,26);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">--删除已存在的视图student_view</span><br><span class="line">if (exists (select * from sys.objects where name = &#x27;student_view&#x27;))</span><br><span class="line">    drop view student_view</span><br><span class="line">go</span><br><span class="line">--创建视图student_view</span><br><span class="line">create view student_view </span><br><span class="line">as</span><br><span class="line">select name,age from studentTable where age&gt;24;</span><br><span class="line">--查询视图</span><br><span class="line">select * from student_view;</span><br></pre></td></tr></table></figure><p><strong>通过视图向基本表插入数据</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">--通过视图向基本表中插入数据</span><br><span class="line">create view stu_insert_view(编号,姓名,性别,年龄)</span><br><span class="line">as</span><br><span class="line">select id,name,gender,age from studentTable;</span><br><span class="line">go</span><br><span class="line">select * from studentTable;</span><br><span class="line">---插入一条数据</span><br><span class="line">insert into stu_insert_view values(&#x27;曹操2&#x27;,&#x27;男&#x27;,40);</span><br><span class="line">----查看插入记录之后表中的内容。</span><br><span class="line">select * from studentTable;</span><br></pre></td></tr></table></figure><p><strong>通过视图修改基本表的数据</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">--查看修改之前的数据</span><br><span class="line">select * from studentTable;</span><br><span class="line">--修改数据</span><br><span class="line">update student_view set age=30 where name=&#x27;刘备&#x27;;</span><br><span class="line">--查看修改后的数据</span><br><span class="line">select * from studentTable;</span><br></pre></td></tr></table></figure><p><strong>通过视图删除基本表数据</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">delete view_name where condition;</span><br></pre></td></tr></table></figure><p><strong>修改视图</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER VIEW view_name AS select_statement</span><br></pre></td></tr></table></figure><ul><li>view_name ：指定视图的名称。该名称在数据库中必须是唯一的，不能与其他表或视图同名。</li><li>select_statement ：指定创建视图的  SELECT  语句，可用于查询多个基表或源视图。</li></ul><p><img src="image-20231107161129549.png" alt="image-20231107161129549"></p><p><strong>删除视图</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">drop view view_name1,view_name2,......,view_nameN;</span><br><span class="line">--该语句可以同时删除多个视图，只要在删除各视图名称之间用逗号分隔即可。</span><br></pre></td></tr></table></figure><h1 id="期末复习"><a href="#期末复习" class="headerlink" title="期末复习"></a>期末复习</h1><h2 id="数据库系统概述"><a href="#数据库系统概述" class="headerlink" title="数据库系统概述"></a>数据库系统概述</h2><p><strong>数据库管理技术的发展</strong></p><p><strong>阶段：</strong>人工管理、文件系统、数据库系统</p><p><strong>数据库系统概论</strong></p><p>  数据库系统（DBS）由数据库(DB)、数据库管理系统（DSMS）、应用开发工具软件和应用程序、数据库的软&#x2F;硬件支撑环境、数据库管理员（DBA）等部分构成。</p><p>DBA 的主要职责有：</p><ol><li>参与数据库系统的设计和建立，决定数据库的<strong>存储结构和存取策略</strong>；</li><li>对系统的运行<strong>实行监控</strong>；</li><li>定义数据的<strong>安全性要求</strong>和<strong>完整性约束条件</strong>；</li><li>负责数据库的性能改进、数据库的重组和重构，以提高系统的性能。</li></ol><p>数据库特点：</p><ol><li><p>数据结构化</p><p>数据的结构化是数据库区别于文件系统的<strong>根本特征</strong></p></li><li><p>数据共享</p><p>数据库技术的<strong>基本特征</strong></p></li><li><p>数据独立性</p><p>数据独立性包括数据的<strong>物理独立性</strong>和<strong>逻辑独立性。</strong></p></li></ol><p>数据库系统的特点的总结：</p><ol><li>实现数据的集中化控制；</li><li>数据的<strong>冗余度小</strong>，<strong>易扩充</strong>；</li><li>采用一定的数据模型实现数据结构化；</li><li>避免了数据的不一致性；</li><li>实现<strong>数据共享</strong>；</li><li>提供数据库保护；</li><li><strong>数据独立性</strong>：数据逻辑独立性、数据物理独立性；</li><li>数据由 DBMS 统一管理和控制：数据的安全性保护、完整性保护、并发控制、数据库恢复。</li></ol><p><strong>数据库系统的结构</strong></p><p>  过去的数据库管理使用二级模型，即外部模型和内部模型。两个模型之间通过模式，建立内、外的映象。有几个外部模型就要建立几个内、外映象。而当内部模型一旦改变存储结构和方法时，就导致所有外部模型的内外映象必须重写，其工作量极大，不便于移植和改动，于是就有了三级模型的产生。</p><p>  <strong>三级模型</strong>：内模式、概念模式、外模式</p><p>  在数据库系统中，用户看到的数据和计算机从存放的数据是两回事。但二者之间是有联系的，实际上它们之间已经通过了两次变换：第一次是系统为了<strong>减少冗余</strong>，<strong>实现数据共享</strong>，把所有用户的数据进行综合，抽象成一个统一的数据视图（<strong>概念模型</strong>）；第二次是为了<strong>提高存取效率</strong>，<strong>改善性能</strong>，把全局视图的数据按照物理组织的最优形式存放（<strong>物理模型</strong>）起来。</p><p><img src="image-20240103112308396.png" alt="image-20240103112308396"></p><p><strong>概念模式</strong>：简称模式，也叫做逻辑模式</p><p>  是对数据库中<strong>全体数据</strong>的<strong>逻辑结构和特征</strong>的描述、是对<strong>型</strong>的描述，<strong>不涉及具体值</strong>，模式是相对稳定的，是数据库系统模式结构的中间层。<strong>一个数据库只有一种模式。</strong></p><p><strong>外模式：</strong>也称子模式或用户模式</p><p>  是用户观念下<strong>局部数据</strong>结构的逻辑描述，是数据库用户（包括应用程序员和最终用户）能够看见和使用的局部数据的<strong>逻辑结构和特征的描</strong>述，是用户的<strong>数据视图</strong>。</p><p>  优点：</p><ul><li><strong>方便</strong>用户使用，简化了用户接口</li><li>保证<strong>数据的独立性</strong></li><li>有利于<strong>数据共享</strong></li><li>有利于<strong>数据安全和保密</strong></li></ul><p><strong>内模式：</strong>也称存储模式</p><p>  是对数据库中<strong>数据物理结构和存储方式</strong>的描述，是数据在数据库内部的表示。它定义的所有内部记录类型、索引和文件的组织方式，以及所有数据控制方面的细节。<strong>一个数据库只有一种内模式。</strong></p><p><strong>两级映像和两级数据独立性</strong>:外模式&#x2F;概念模式之间的映像和概念模式&#x2F;内模式之间的映像</p><p><img src="image-20240110152757703.png" alt="image-20240110152757703"></p><p><strong>外模式&#x2F;概念模式之间的映像</strong></p><p>  对每一个外模式，有一个外模式&#x2F;概念模式映像定义外模式与概念模式之间的对应关系，映像定义通常包含在各外模式的描述中。</p><p>  当概念模式改变时，数据库管理员对外模式&#x2F;概念模式映像作相应改变，使外模式保持不变。应用程序是依据数据的外模式编写的，应用程序不必修改，保证了数据与程序的逻辑独立性，简称<strong>数据的逻辑独立性</strong>。</p><p><strong>概念模式&#x2F;内模式之间的映像</strong></p><p>  概念模式&#x2F;内模式映像定义了数据全局逻辑结构与存储结构之间的对应关系。如说明某个逻辑记录对应何种存储结构。</p><p>  数据库中概念模式&#x2F;内模式映像是唯一的，该映像定义通常包含在概念模式描述中。当数据库的存储结构改变了（例如选用了另一种存储结构），数据库管理员修改概念模式&#x2F;内模式映像，使模式保持不变。模式不变，则应用程序不变，保证了数据与程序的物理独立性，简称<strong>数据的物理独立性。</strong></p><p>  数据独立性是指<strong>应用程序</strong>和<strong>数据库的数据结构</strong>之间相互独立，不受影响。数据独立性又分为：</p><ul><li>逻辑数据独立性：指的是外部模式不受概念模式变化的影响。</li><li>物理数据独立性：指的是概念模式不受内部模式变化的影响。</li></ul><h2 id="关系模型"><a href="#关系模型" class="headerlink" title="关系模型"></a>关系模型</h2><p><strong>关系模型的基本概念：</strong></p><p>  关系模型的三个重要组成部分为<strong>数据结构</strong>、<strong>数据操纵</strong>、<strong>完整性约束</strong>。</p><ul><li>关系数据结构：关系模型中只包含单一的数据结构即<strong>关系</strong>，在用户看来关系模型中数据的逻辑结构是一张扁平的<strong>二维表</strong>。</li><li>关系操作（操作对象和结果都是集合）：</li><li>查询：选择、投影、连接、并、差、交、笛卡尔积</li><li>更新：插入、删除、修改</li><li>完整性约束：包括实体完整性、参照完整性和用户定义完整性约束。</li></ul><p>涉及的基本概念：</p><ul><li><p>关系：一个关系对应着一个二维表，二维表就是关系名。</p></li><li><p>元组：在<strong>二维表中的一行</strong>，称为一个元组。</p></li><li><p>属性：在二维表中的<strong>列</strong>，称为属性，属性的个数称为关系的<strong>元或度</strong>。列的值称为属性值。</p></li><li><p>域：属性值的<strong>取值范围</strong>。</p></li><li><p>分量：每一行对应的列的属性值，即元组中的一个属性值。</p></li><li><p>关系模式：在二维表中的<strong>行定义</strong>，即对关系的描述称为关系模式。一般表示为（属性 1，属性 2，……，属性 n），如<strong>老师的关系模型可以表示为教师（教师号，姓名，性别，年龄，职称，所在系）</strong>。</p></li><li><p>键（码）：如果在一个关系中存在<strong>唯一标识</strong>一个实体的<strong>一个属性</strong>或<strong>属性集</strong>称为<strong>实体的键</strong>，即使得在该关系的任何一个关系状态中的两个元组，在该属性上的值的组合都不同。</p></li><li><p>候选键（候选码）：若关系中的某一属性的值，能<strong>唯一标识一个元组</strong>，如果在关系的一个键中不能移去任何一个属性，否则它就不是这个关系的键，则称这个被指定的候选键为该关系的候选键或者候选码。（<strong>可能有多个</strong>）</p></li><li><p>主键（主码）：在一个关系的<strong>若干候选键中</strong>，<strong>指定一个</strong>用来唯一标识该关系的元组，则称这个被指定的候选键称为主关键字，或简称为主键、关键字、主码。每一个关系都有并且只有一主键，通常用较小的属性组合作为主键。例如学生表，选定“学号”作为数据操作的依据，则“学号”为主键。</p></li><li><p>主属性和非主属性：关系中<strong>包含在任何一个候选键中的属性称为主属性</strong>，不包含在任何一个候选键中的属性为非主属性。</p></li><li><p>全键（全码）：一个关系模式中的<strong>所有属性的集合</strong>。</p></li><li><p>外键（外码）：关系中的某个属性虽然不是这个关系的主键，或者只是主键的，但它却是另外一个关系的主键时，则称之为外键或者外码。</p></li><li><p>超键（超码）：如果在关系的一个键中移去某个属性，它仍然是这个关系的键，则称这样的键为关系的超键或者超码。</p></li><li><p>参照关系与被参照关系：是指以外键相互联系的两个关系，可以相互转化。</p></li></ul><p>关系的三种类型：</p><ul><li>基本关系（基本表&#x2F;基表）：是实际存在的表，实际存储数据的逻辑表示。</li><li>查询表：查询结果对应的表。</li><li>视图表：由基本表或其他视图表导出的表，它是虚表，不对应实际存储的数据。</li></ul><p>基本关系具有的性质</p><ol><li>列是同质的，即每一列中的分量是同一类型的数据，来自同一个域；</li><li>不同的列可出自同一个域，称其中的每一列为一个属性，不同的属性要给予不同的属性名；</li><li>列的顺序无所谓，行的顺序无所谓；</li><li><strong>任意两个元组的候选码不能取相同的值</strong>；</li><li>分量必须是原子值，及每一个分量都必须是不可再分的数据项。</li></ol><p><strong>关系模式</strong></p><p>  关系模式实际就是<strong>记录类型</strong>，包括：模式名、属性名、值域名及模式的主键。他不涉及物理存储方面的描述，只是对数据特性的描述。</p><p>  一个关系的关系模式是该关系的<strong>关系名</strong>及其<strong>全部属性名</strong>的集合，一般表示为：</p><p>  关系名(属性名1,属性名2,……,属性名<em>n</em>)</p><p>  而一个完整的关系模式应该定义为：</p><p>  R*(<em>U</em>,<em>D</em>,<em>dom</em>,*F)</p><p>  其中 R 为<strong>关系名</strong>；U 为该关系<strong>所有属性名的集合</strong>；D 为属性组 U 中属性所来自的<strong>域</strong>的集合；dom 为属性向域映像的集合；F 为属性间数据依赖关系的集合。</p><p>关系模式的优缺点</p><ul><li>优点<ol><li>数据结构单一：关系模型中，不管是实体还是实体之间的联系，都用关系来表示，而关系都对应一张二维数据表，数据结构简单、清晰。</li><li>存取路径对用户而言是完全隐蔽的，使程序和数据具有高度的独立性，其数据语言的非过程化程度较高。</li><li>概念简单，操作方便：关系模型最大的优点就是简单，用户容易理解和掌握，一个关系就是一张二维表格，用户只需用简单的查询语言就能对数据库进行操作。</li><li>关系规范化，并建立在严格的理论基础上：构成关系的基本规范要求关系中每个属性不可再分割，同时关系建立在具有坚实的理论基础的严格数学概念基础上。</li></ol></li><li>缺点<ol><li>查询效率低，关系数据模型提供了较高的数据独立性和非过程化的查询功能（查询的时候只需指明数据存在的表和需要的数据所在的列，不用指明具体的查找路径），因此加大了系统的负担。</li><li>由于查询效率较低，因此需要数据库管理系统对查询进行优化，加大了 DBMS 的负担。</li></ol></li></ul><p><strong>关系代数</strong></p><p>  关系数据库的数据操作分为<strong>查询</strong>和<strong>更新</strong>两类。查询语句用于各种检索操作，更新操作用于插入、删除和修改等操作。<strong>关系查询语言</strong>根据其理论基础的不同分成两大类：</p><ol><li><strong>关系代数</strong>语言：查询操作是以集合操作为基础运算的数据操作（DML）语言。</li><li><strong>关系演算</strong>语言：查询操作是以谓词演算为基础运算的 DML 语言。</li></ol><p><strong>五种基本运算</strong>：并、差、选择、投影、乘积</p><p>关系代数的运算可分为两类：</p><ol><li>传统的<strong>集合操作</strong>：并（⋃）、差（-）、交（⋂）和广义笛卡尔积（×）。</li><li>扩充的<strong>关系操作</strong>：投影（∏）、选择（<em>σ</em>）、连接（⋈）和除（÷）。</li></ol><p>能够进行<strong>集合运算</strong>的属性集需要具有以下两个条件：</p><ul><li><p>关系 R 和关系 S 的模式具有<strong>相同的属性集</strong>；</p></li><li><p>在对 R 和 S 进行集合运算之前，要对 R 和 S 的<strong>属性进行排序</strong>，保证两个关系的属性<strong>顺序相同</strong>。</p><p>传统的集合运算是二目运算。设关系 R 和关系 S 具有相同的目 n（即两个关系<strong>都有 n 个属性</strong>）</p></li></ul><p>笛卡尔积：广义笛卡尔积不要求参加运算的两个关系具有相同的目。</p><p><strong>扩展关系代数</strong></p><p>  扩展的关系操作包括选择（<em>σ</em>）、投影（∏）、连接（⋈）和除（÷）等。投影和选择是一元操作，其他是二元操作。</p><p>  <strong>选择</strong>：找出满足条件的元组</p><p>  σ<del>F</del>(R)&#x3D;{<em>t</em>∣<em>t</em>∈<em>R</em>⋀<em>F</em>(<em>t</em>)&#x3D;′真′}</p><p>  其中 F 表示选择条件，它是一个逻辑表达式，取逻辑值‘真’或‘假’，逻辑表达式 F 由运算符¬、⋀、⋁连接各算术表达式组成。</p><p><img src="image-20240110164826857.png" alt="image-20240110164826857"></p><p>  <strong>投影</strong>：从关系中挑选若干属性组成的新的关系称为投影，如果新关系中包含重复元组，则要删除重复元组。记作：</p><p>  ∏<del>A</del>(<em>R</em>)&#x3D;{<em>t</em>[<em>A</em>]∣<em>t</em>∈<em>R</em>}</p><p>  其中 A 为 R 中的属性列，也可以是列的序号。</p><p><img src="image-20240110164840717.png" alt="image-20240110164840717"></p><p>  <strong>连接</strong>：连接是从两个关系的<strong>广义笛卡尔积</strong>中，选取属性间满足一定条件的元组，构成新的关系记作：</p><p>  R⋈S&#x3D;{t<del>r</del>t<del>s</del> | t<del>r</del>∈<em>R</em>⋀<em>t<del>s</del>∈</em>S ⋀ t<del>r</del>[A]θt<del>s</del>[B]}</p><p>  其中 A 为包含 R 中的属性的表达式；B 为包含 S 中的属性的表达式；<em>θ</em>通常为关系比较符。</p><p>  连接分为<strong><em>θ</em>连接</strong>、<strong>等值连接</strong>和<strong>自然连接</strong>：</p><ul><li><p>θ 连接：从关系 R，S 的笛卡尔积中选择满足一定条件的元组。</p></li><li><p>等值连接：θ 为“&#x3D;”时的连接为等值连接，它是从关系 R 和 S 的广义笛卡尔积中选取 A、B <strong>属性值相等</strong>的那些元组，即等值连接为：</p></li><li><p>自然连接：自然连接是一种<strong>特殊的等值链接</strong>，它要求两个关系中进行比较的分量必须是<strong>相同的属性组</strong>，并且在结果中把<strong>属性重复的列去掉</strong>。即若 R 和 S 中具有相同的属性组 B，U 为 R 和 S 的全体属性集合，</p></li></ul><p><strong>关系演算</strong></p><ul><li>算数比较运算符的优先级最高；</li><li>量词其次，且 ∃ 高于 ∀；</li><li>逻辑运算符最低，且 ¬ 高于 ⋀ 高于 ⋁</li></ul><p><strong>关系系统</strong></p><h2 id="问题提出"><a href="#问题提出" class="headerlink" title="问题提出"></a>问题提出</h2><p>  作为一个二维表，关系要符合一个最基本的条件:每一个分量必须是不可分的数据项。满足了这个条件的关系模式就属于第一范式(1NF)。</p><h2 id="规范化"><a href="#规范化" class="headerlink" title="规范化"></a>规范化</h2><p>  一个低一级范式的关系模式通过模式分解可以转换为若干个高一级范式的关系模式的集合，这种过程就叫规范化</p><p>  满足最低要求的叫第一范式， 简称 1NF；在第一范式中满足进一步要求的为第二范式，其余以此类推。</p><p>  2NF：在第一范式的基础上，且每个非主属性完全函数依赖于任何一个候选码；</p><p>  超键：在关系中能唯一标识元组的<strong>属性集</strong>称为关系模式的超键</p><p>  候选键：不含有多余属性的超键称为候选键。也就是关系中的一个属性组，其值能唯一标识一个元组。若从属性组中去掉任何一个属性，它就不具有这一性质了，这样的属性组称作候选键。</p><p>  主属性：候选键的并集称作主属性。</p><p>  主键(primary key)：用户从一个关系的多个候选键中，选定一个作为主键。</p><p><img src="image-20240113164359513.png" alt="image-20240113164359513"></p><p><img src="image-20240113164415210.png" alt="image-20240113164415210"></p><p>函数依赖：</p><p>  函数依赖：候选键可以做到 </p><p>  部分函数依赖：非主属性对候选键有部分函数依赖</p><p><img src="image-20240113170631033.png" alt="image-20240113170631033"></p><p><a href="https://blog.csdn.net/wyh7280/article/details/83350722?csdn_share_tail=%7B%22type%22:%22blog%22,%22rType%22:%22article%22,%22rId%22:%2283350722%22,%22source%22:%22qq_62828758%22%7D&fromshare=blogdetail">范式通俗理解：1NF、2NF、3NF和BNCF-CSDN博客</a></p><h2 id="数据库设计"><a href="#数据库设计" class="headerlink" title="数据库设计"></a>数据库设计</h2><p>数据库设计目前可分为4类：直观设计法、规范设计法、计算机辅助设计和自动化设计</p><p>常用的规范设计方法：</p><p>1.基于 E-R 模型的数据库设计方法</p><p>  基于 E-R 模型的数据库设计方法是由 P.P.S.chen 于1976年提出的数据库设计方法，其基本思想是在需求分析的基础上，用 E-R 图构造一个反映现实世界实体之间联系的企业模式，然后再将此企业模式转换成基于某一特定的 DBMS 的概念模式。</p><p>2.基于 3NF（第三范式） 的数据库设计方法</p><p>  基于 3NF 的数据库设计方法是由 S.Atre 提出的结构化设计方法，基本思想是在需求分析的基础上，确定数据库模式中的全部属性和属性间的依赖关系，将他们组织在一个单一的关系模式中，然后再分析模式中不符合 3NF 的约束条件，将其进行投影分解，规范成若干个 3NF 关系模式的集合。</p><p>3.基于视图的数据库设计方法</p><p>  此方法先从分析各个应用的数据着手，其基本思想是为每个应用建立自己的视图，然后再把这些视图汇总起来合并成整个数据库的概念模式。</p><p><strong>数据库设计步骤</strong></p><ol><li><p>需求分析阶段</p></li><li><p>概念结构设计阶段</p><p>  概念设计是对需求分析中收集的信息和数据进行分析和抽象，<strong>确定实体、属性及它们之间的联系</strong>，将各个用户的局部视图合并成一个总的全局视图，形成独立于计算机的反映用户需求的概念模型。</p><p>  概念结构设计阶段是整个数据库设计的关键，通过对用户需求进行综合、归纳与抽象，形成一个独立于具体 DBMS 的<strong>概念模型</strong>。</p></li><li><p>逻辑结构设计阶段</p><p>  逻辑结构设计阶段将概念结构转换为某个 DBMS 所支持的<strong>数据模型</strong>，并将其性能进行优化。</p></li><li><p>数据库物理设计阶段</p><p>  数据库物理设计阶段是利用数据库管理系统提供的方法和技术，对已经确定的数据逻辑结构，以较优的存储结构、数据存取路径、合理的数据存储位置及存储分配，设计出一个高效的、可实现的物理数据结构。</p><p>  也可以说物理设计是根据 DBMS 的特点和处理的需求，<strong>进行物理存储的安排</strong>，<strong>建立索引</strong>，形成<strong>数据库的内模式</strong>。</p></li><li><p>数据库实施阶段</p></li><li><p>数据库运行与维护阶段</p></li></ol><p>  在数据库设计过程中，需求分析和概念设计可以独立于任何数据库管理系统进行，逻辑设计和物理设计与选用的 DAMS 密切相关。</p><p><strong>需求分析</strong></p><p>用户需求分析：常用SA结构化分析方法，SA方法从最上层的系统组织结构入手，采用自顶向下，逐层分解的方式分析系统用<strong>数据流图（DFD）</strong>、<strong>数据字典（DD）</strong>描述系统。</p><p><strong>数据字典</strong></p><p>  数据字典是关于<strong>数据库中数据的一种描述</strong>，而<strong>不是数据库中的数据</strong>；数据字典用于记载系统中的各种数据、数据元素以及它们的名字、性质、意义及各类约束条件。</p><h2 id="数据库概念结构、逻辑结构、物理结构设计"><a href="#数据库概念结构、逻辑结构、物理结构设计" class="headerlink" title="数据库概念结构、逻辑结构、物理结构设计"></a>数据库概念结构、逻辑结构、物理结构设计</h2><h3 id="概念结构设计"><a href="#概念结构设计" class="headerlink" title="概念结构设计"></a><strong>概念结构设计</strong></h3><p>  按照特定的方法把他们抽象为一个不依赖于任何具体机器的数据模型，即概念模型。具体来说就是从需求分析中找到实体，确认实体的属性、确认实体的关系，画出 E-R 图。</p><p>  概念结构设计步骤主要分三步：1.数据抽象；2.设计局部 E-R 模型；3.集成局部 E-R 模型为全局 E-R 模型。</p><p>划分实体和属性的方法：</p><ul><li>分类：将一组具有某些共同特性和行为的对象抽象为一个实体。</li><li>聚合：将对象类型的组成成分抽象为属性。</li><li>概括：定义类型之间的一种子集联系，将其抽象为超类和子类。</li></ul><p>局部E-R图合并全局E-R图的冲突：</p><p><img src="image-20231228171316705.png" alt="image-20231228171316705"></p><p>消除冗余：</p><ul><li>冗余数据：可由基本的数据导出的数据。</li><li>冗余联系：可由基本的联系导出的联系。</li></ul><h3 id="逻辑结构设计"><a href="#逻辑结构设计" class="headerlink" title="逻辑结构设计"></a><strong>逻辑结构设计</strong></h3><p>  概念设计的结果得到的是与计算机软硬件具体性能无关的全局<strong>概念模型</strong>，概念结构无法在计算机中直接应用，需要把概念结构转换为特定的 DBMS 所支持的<strong>数据模型</strong>，逻辑设计就是把上述概念模型转换成为某个具体的 DBMS 所支持的数据模型并进行优化。</p><p>  逻辑结构设计的任务是将概念结构设计阶段完成的实体模型转换成特定的 DBMS 所支持的数据模型的过程。逻辑结构设计的目的是将 E-R 图中的实体、属性和联系转换成为<strong>关系模式</strong>。</p><p>  逻辑结构设计一般分为三部分：1.概念结构向关系模型的转换；2.<strong>关系模型的优化</strong>；3.设计用户子模式。</p><p>E-R 图向关系模型的转换要解决的问题有两个：</p><ul><li><p>如何将实体型和实体间的联系转换为关系模式</p></li><li><p>如何确定这些关系模型的属性和主键</p><p>在概念结构向关系模型转换需要有一定的原则和方法指导，一般而言原则如下：</p></li></ul><ol><li>一个<strong>实体转换</strong>为一个关系模式，实体的属性转换成表的属性，实体的主键转换成表的主键；</li><li>一个<strong>联系转换</strong>为一个关系模式，与该联系相连的各实体的键以及联系的属性均转换为该关系的属性。联系转换的具体类型有以下几种：<ul><li>联系为（1：1）时，则每个实体的键都是关系的候选键</li><li>联系为（1：N）时，则 <strong>N 端实体的主键</strong>是关系的主键</li><li>联系为（N：M）时，则<strong>各实体的键的组合</strong>是关系的键</li><li>特殊情况多元联系：多元联系在转换为关系模式时，与该多元联系相连的各实体的主键及联系本身的属性均转换为关系的属性，转换后所得到的的关系的主键为各实体键的组合</li></ul></li></ol><p>关系数据模型的优化通常以<strong>规范化理论</strong>为指导，方法：</p><p>1.确定数据依赖</p><p>按需求分析阶段所得到的语义，分别写出每个关系模式内部各属性之间的数据依赖以及不同关系模式属性之间数据依赖。</p><p>2.消除冗余的联系</p><p>对于各个关系模式之间的数据依赖进行极小化处理，消除冗余的联系。</p><p>3.确定所属范式</p><ul><li>按照数据依赖的理论对关系模式逐一进行分析</li><li>考察是否存在部分函数依赖、传递函数依赖、多值依赖等</li><li>确定各关系模式分别属于第几范式</li></ul><p>数据库设计的三大范式如下：</p><ul><li>第一范式：每一个分类必须是一个不可分的数据项。属性不可再分，确保每列的原子性。</li><li>第二范式：要求每个表只描述一件事情，每条记录有唯一标识列。</li><li>第三范式：数据库表中不包含在其它表中已包含的非主关键字信息。</li></ul><p>4.按照需求分析阶段得到的各种应用对数据处理的要求，分析对于这样的应用环境这些模式是否合适，确定是否要对它们进行合并或分解。</p><p>5.按照需求分析阶段得到的各种应用对数据处理的要求，对关系模式进行必要的分解，以提高数据操作的效率和存储空间的利用率。</p><ul><li><p>常用的分解方法有两种：</p><p>  （1） 水平分解：把（基本）关系的元组分为若干子集合，定义每个子集合为一个子关系，以提高系统的效率。</p><p>  （2） 垂直分解：把关系模式的属性分解为若干子集合，形成若干子关系模式。</p></li></ul><p><strong>设计用户子模式</strong></p><p>  也称为<strong>外模式</strong>和<strong>用户模式</strong>，是数据库用户（包括应用程序员和最终用户）能够看见和使用的<strong>局部数据的逻辑结构和特征的描述</strong>，是数据库用户的数据视图，是与某一应用有关的数据的逻辑表示。</p><p>DBMS 提供子模式描述语言（子模式DDL）来严格地定义子模式。</p><h3 id="物理结构设计"><a href="#物理结构设计" class="headerlink" title="物理结构设计"></a><strong>物理结构设计</strong></h3><p>  数据库的物理设计是指对数据库的逻辑结构在指定的 DBMS 上建立起适合应用环境的物理结构。</p><h2 id="数据库的实施和维护"><a href="#数据库的实施和维护" class="headerlink" title="数据库的实施和维护"></a>数据库的实施和维护</h2><p>  <strong>数据的载入和应用程序的调试</strong></p><p>  数据库实施阶段包括两项重要的工作，一项是<strong>数据的载入</strong>，另一项是<strong>应用程序的编码和调试</strong>。</p><p>  <strong>数据库的试运行</strong></p><p>  <strong>数据库的运行和维护</strong></p><p>​    数据库的转储和恢复</p><p>​    数据库的安全性、完整性控制</p><p>​数据库性能的监督、分析和改造</p><p>​数据库的重组织与重构造</p><h2 id="关系数据库系统的查询处理"><a href="#关系数据库系统的查询处理" class="headerlink" title="关系数据库系统的查询处理"></a>关系数据库系统的查询处理</h2><p><strong>查询处理计划：</strong>查询缓存、查询解析、查询预处理、查询优化、查询执行。</p><p><img src="image-20231230135254521.png" alt="image-20231230135254521"></p><p>1.查询缓存 用户提交查询给服务端后，首先会检查缓存，<strong>缓存中有的话直接将结果返回</strong>，没有的话进入下一步。 </p><p>2.查询解析 首先对查询语句进行<strong>扫描、词法分析和语法分析</strong>。从查询语句中识别出语言符号，如关键字、属性名和关系名等，进行语法检查和语法分析，即判断查询语句是否符合 SQL 语法规则。如果没有语法错误就转入下一步，否则便报告语句中出现的语法错误。 </p><p>3.查询预处理 对合法的查询语句进行<strong>语义检查</strong>，即<strong>根据数据字典中有关的模式定义检查语句中的数据库对象</strong>，如关系名、属性名是否存在和有效。如果是对视图的操作，则要用视图消解方法把对视图的操作转换成对基本表的操作。还要根据数据字典中的用户权限和完整性约束定义对用户的存取权限进行检查。如果该用户没有相应的访间权限或违反了完整性约束，就拒绝执行该查询。当然，这时的完整性检查是初步的、静态的检查。检查通过后便把 SQL 查询语句转换成内部表示，即等价的关系代数表达式。这个过程中要把数据库对象的外部名称转换为内部表示。关系数据库管理系统一般都用查询树(query tree), 也称为语法分析树(syntax tree)来表示扩展的关系代数表达式。</p><p>4.查询优化 每个查询都会有许多可供选择的执行策略和操作算法，查询优化就是选择一个高效执行的查询处理策略。查询优化有多种方法。按照优化的层次一般可将查询优化分为<strong>代数优化和物理优化</strong>。代数优化是指关系代数表达式的优化，即按照一定的规则，通过<strong>对关系代数表达式进行等价变换</strong>，改变代数表达式中操作的次序和组合，使查询执行更高效；物理优化则是<strong>指存取路径和底层操作算法的选择</strong>。选择的依据可以是基于规则(rule based)的，也可以是基于代价(cost based)的，还可以是基于语义(semantic based)的。实际关系数据库管理系统中的查询优化器都综合运用了这些优化技术，以获得最好的查询优化效果。</p><p>5.查询执行 依据优化器得到的执行策略生成查询执行计划，由代码生成器(code generator)生成执行这个查询计划的代码，然后加以执行，回送查询结果。</p><h2 id="表单查询-1"><a href="#表单查询-1" class="headerlink" title="表单查询"></a>表单查询</h2><p>  <strong>带like的字符匹配查询：</strong></p><p>  两个通配符 % 和 _  , _只能代替一个字符，%不限个数，<strong>like后面需要单引号</strong></p><p>  eg: select * from  Books where name like ‘B%’</p><p>  <strong>查询空值和去除重复结果：</strong></p><p>  is null 查询指定的字段的空值，distinct 检索数据表中指定的不重复的内容</p><p>  语法规则为： SELECT 字段名 FROM 表名 WHERE 字段名 IS NULL; </p><p>  语法规则为： SELECT DISTINCT 字段名 FROM 表名; </p><p>  select distinct name from Books; &#x2F;&#x2F;这里只会返回name字段</p><p>  <strong>带 AND 与 OR 的多条件查询：</strong></p><p>  使用关键字<code>AND</code>检索数据表中指定的字段的内容；使用关键字<code>IN</code>检索数据表中指定的字段的内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT  ID, prod_name, prod_price</span><br><span class="line">FROM Mall_products</span><br><span class="line">WHERE ID IN(&#x27;BNBG01&#x27;, &#x27;BR01&#x27;);</span><br></pre></td></tr></table></figure><p>这里面的等于是&#x3D;，而不是&#x3D; &#x3D;</p><p>这个错误提示（ERROR 1064）表明在你的SQL语句中存在语法错误。根据你提供的错误信息，看起来问题出现在你创建表时使用了名为 “describe” 的列，这是因为 “describe” 是MySQL中的关键字之一。</p><p>如果你想要在SQL语句中使用关键字作为标识符（例如列名），你需要使用反引号（&#96;）将其括起来，而不是双引号或单引号。</p><p><strong>关键字IN</strong></p><p>select Name , Salary from tb_emp where id not in (1);</p><p><strong>between and 的范围查询</strong></p><p>select Name , Salary from tb_emp where Salary between 3000 and 5000;</p><h2 id="关系模型-1"><a href="#关系模型-1" class="headerlink" title="关系模型"></a>关系模型</h2><p>  关系模型的三个重要组成部分为<strong>数据结构</strong>、<strong>数据操纵</strong>、<strong>完整性约束</strong>。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>docker</title>
      <link href="/2023/10/24/docker/"/>
      <url>/2023/10/24/docker/</url>
      
        <content type="html"><![CDATA[<h1 id="了解docker"><a href="#了解docker" class="headerlink" title="了解docker"></a>了解docker</h1><p><strong>容器</strong>基本上是一个具有足够隔离用户空间组件的进程</p><p>Docker 基本上就是一个容器引擎，它使用 Linux 内核功能（如命名空间和控制组）在操作系统之上创建容器。</p><p>例如，如果有一个 Java jar 文件，我们可以在任何安装了 java 的服务器上运行它。同样的，一旦使用 Docker 将容器与所需的应用程序打包在一起，我们就可以在任何其他安装了 Docker 的主机上运行它。</p><h2 id="Docker-与容器的区别"><a href="#Docker-与容器的区别" class="headerlink" title="Docker 与容器的区别"></a>Docker 与容器的区别</h2><p>Docker 是一种为高效管理容器而开发的一种技术或工具。</p><p>我可以在没有 Docker 的情况下运行容器吗？</p><p>当然可以。我们可以使用 LXC 技术在 Linux 服务器上运行容器。</p><p>关于 Docker，我们应该要清楚：</p><ul><li>Docker 不是 LXC</li><li>Docker 不是虚拟机解决方案。</li><li>Docker 不是配置管理系统，也不是chef, puppet, Ansible 等工具的替代品。</li><li>Docker 不是一种平台即服务的技术。</li></ul><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><p>Docker 有一个高效的工作流程，可以将应用程序从开发环境转移到测试环境、再转移到生产环境。当我们在实际完成将应用程序打包到 Docker 映像的一个操作时，会对它有更深的了解。</p><p>启动 docker 容器非常快速，只需不到一秒钟，而且 Docker 可以在任何具有兼容 Linux 内核的主机上运行。（也支持 Windows）</p><p><em><strong>注意：我们不能在 Linux 主机上运行 Windows 容器，因为 Windows 没有 Linux 内核支持。点击<a href="https://link.zhihu.com/?target=https://docs.microsoft.com/en-us/virtualization/windowscontainers/about">此处</a>，可以阅读有关 Windows 容器的信息。</strong></em></p><p>Docker 使用<a href="https://link.zhihu.com/?target=https://en.wikipedia.org/wiki/UnionFS">写时复制联合文件系统</a>（ Copy-on-write union file system ）来存储图像。每当对容器进行更改时，只会使用写时复制模型将更改写入磁盘。使用写时复制，我们优化了所有容器的共享存储层。</p><h2 id="Docker组件"><a href="#Docker组件" class="headerlink" title="Docker组件"></a>Docker组件</h2><p>Docker 由以下几个组件组成：</p><ul><li>Docker 守护进程 (dockerd)</li><li>Docker 客户端</li><li>Docker 镜像</li><li>Docker 注册表</li><li>Docker 容器</li></ul><h2 id="为什么容器比虚拟机好？"><a href="#为什么容器比虚拟机好？" class="headerlink" title="为什么容器比虚拟机好？"></a>为什么容器比虚拟机好？</h2><p>与虚拟机相比，容器具有一些重要优势，接下来让我们来一一看看这些优势。</p><p><strong>资源利用和成本</strong></p><ul><li>我们可以使用虚拟机独立运行应用程序，这里所谓的独立运行是指一台虚拟器运行一个服务。但是虚拟机仍然可能未被充分利用。此外，为应用程序调整虚拟机的大小并不是一件容易的事。</li><li>另一方面，容器可以在非常小的 CPU 和内存上运行。此外，您甚至可以在 VM 内运行多个容器以进行应用程序隔离。另外，调整容器大小需要几秒钟。</li></ul><p><strong>配置和部署</strong></p><ul><li>取决于所涉及的工作流，配置虚拟机并在其上<a href="https://link.zhihu.com/?target=https://devopscube.com/release-management-explained/">部署应用程序</a>可能需要几分钟到几小时的时间，即使回滚也需要时间。</li><li>但是我们却可以在几秒钟内部署一个容器，并在几秒钟内将其回滚。</li></ul><p><strong>漂移管理</strong></p><ul><li>虚拟机中的漂移管理并不容易。我们需要拥有成熟的<a href="https://link.zhihu.com/?target=https://devopscube.com/devops-tools-for-infrastructure-automation/">自动化</a>和流程，以确保所有环境都相似。遵循不可变的部署模型可避免虚拟机环境中的漂移。</li><li>对于容器，一旦镜像生成，那么它在所有环境中都是一样的。要进行任何更改时，我们需要开始在 dev env 中进行更改并重新生成容器映像。</li></ul><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><ul><li><strong>镜像（Image）</strong>：Docker 镜像（Image），就相当于是一个 root 文件系统。比如官方镜像 ubuntu:16.04 就包含了完整的一套 Ubuntu16.04 最小系统的 root 文件系统。</li><li><strong>容器（Container）</strong>：镜像（Image）和容器（Container）的关系，就像是面向对象程序设计中的类和实例一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。</li><li><strong>仓库（Repository）</strong>：仓库可看成一个代码控制中心，用来保存镜像。</li></ul><p>镜像是静态的，容器是动态。一个镜像可以运行多个容器</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络</title>
      <link href="/2023/10/24/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
      <url>/2023/10/24/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="专用名词"><a href="#专用名词" class="headerlink" title="专用名词"></a>专用名词</h1><h2 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h2><p>边缘路由器：edge router</p><p>数字用户线：Digital Subscriber Line  DSL</p><p>​数字用户线接入复用器：Digital Subscriber Line Access Multiplexer  DSLAM</p><p><img src="image-20231024103024797.png" alt="image-20231024103024797"></p><p>混合光纤同轴：Hybrid Fiber Coax HFC</p><p>电缆因特网接入：cable Internet access</p><p>​电缆因特网调制解调器： cable modem</p><p>​电缆调制解调器端系统 ：Cable Modem Termination System CMTS</p><p><img src="image-20231024103410638.png" alt="image-20231024103410638"></p><p>光纤到户： Fiber To The Home FTTH</p><p>​主动光纤网络（Active Optical Network AON）、被动光纤网络（Passive Optical Network PON）</p><p>​光纤网络端接器 Optical Network Terminator ONT</p><p>​光纤线路端接器 Optical Line Terminator OLT</p><p><img src="image-20231024103923153.png" alt="image-20231024103923153"></p><p>局域网 LAN</p><p>无屏蔽双绞线：Unshielded Twisted Pair, UTP</p><p>光载波(Optical Carrier, OC   &lt;光纤&gt;</p><p>报文 message</p><p>分组 packet</p><p>分组交换机 packet switch</p><p>路由器 router</p><p>链路层交换机 link-layer switch</p><p>存储转发传输 store-and-forward transmission</p><p>输出缓存 output buffer</p><p>输出队列 output queue</p><p>排队时延 queuing delay</p><p>分组丢包 packet loss</p><p>转发表 forwarding table</p><p>路由器选择协议 routing protocol</p><p>频分复用  Frequency- Division Multiplexing, FDM</p><p>时分复用 Time-Division Multiplexing, TDM</p><p>带宽 bandwidth</p><p>存在点,接入点 Point of Presence ,PoP</p><p>因特网交换点 Internet Exchange Point, IXP  (ISP 对等)</p><p>内容提供商网络 content provider network</p><p>流量强度 traffic intensity  (排队时延)</p><h2 id="第二章"><a href="#第二章" class="headerlink" title="第二章"></a>第二章</h2><p>应用程序编程接口 Application Programming Interface API</p><p>带宽敏感的应用 bandwidth-sensitive application</p><p>弹性应用 leastic application</p><p>安全套接字层 Secure Sockets Layer SSL</p><p>应用层协议 application-layer protocol</p><p>简单邮件传输协议 Simple Mail Transfer Protocol SMTP</p><p>超文本传输协议 HyperText Transfer Protocol HTTP</p><p>无状态协议 stateless protocol</p><p>持续连接和非持续连接 persistent connection  non-persistent connection</p><p>往返时间 Round-Trip Time RTT</p><p>Web缓存 Web cache &#x3D; 代理服务器  proxy server</p><p>内容分发网络 Content Distribution Network CDN</p><p>简单邮件传输协议 Simple Mail Transfer Protocol  SMTP</p><p>域名系统 Domain Name System , DNS</p><p>顶级域 Top-Leval Domain TLD</p><p>分布式拒绝服务 DDoS</p><p>经HTTP的动态适应性流 Dynamic Adaptive Streaming over HTTP DASH</p><p>内容分发网 Content Distribution Network CND</p><h2 id="第四章"><a href="#第四章" class="headerlink" title="第四章"></a>第四章</h2><p>软件定义网络 SDN Software-Defined Networking </p><h1 id="第一章-1"><a href="#第一章-1" class="headerlink" title="第一章"></a>第一章</h1><p>**套接字接口（socket interface）:**规定了运行在一个端系统上的程序请求因特网基础设施向运行在另一个端系统上的特定目的地程序交付数据的方式。</p><p><img src="image-20231024100505546.png" alt="image-20231024100505546"></p><p><strong>协议：</strong>定义了在两个或多个通信实体之间交换的报文的格式和顺序，以及报文发送和&#x2F;或接收一条报文或其他事件所采取的动作</p><h2 id="网络边缘："><a href="#网络边缘：" class="headerlink" title="网络边缘："></a><strong>网络边缘：</strong></h2><h3 id="接入网："><a href="#接入网：" class="headerlink" title="接入网："></a><strong>接入网：</strong></h3><p><img src="image-20231024101409570.png" alt="image-20231024101409570"></p><p>家庭接入：DLS、电缆、FTTH、拨号和卫星</p><p>企业（和家庭）接入：以太网、WiFi</p><p><img src="image-20231024104320367.png" alt="image-20231024104320367"></p><h3 id="物理媒体"><a href="#物理媒体" class="headerlink" title="物理媒体"></a>物理媒体</h3><p>引导型媒体(guided media) 和 非引导型媒体(unguided media)</p><p>  对于导引型媒体, 电波沿着固体媒体前行，如光缆、双绞铜线或 同轴电缆。对于非导引型媒体，电波在空气或外层空间中传播，例如在无线局域网或数字 卫星频道中。</p><h2 id="网络核心"><a href="#网络核心" class="headerlink" title="网络核心"></a>网络核心</h2><h3 id="分组交换"><a href="#分组交换" class="headerlink" title="分组交换"></a>分组交换</h3><p>源将长报文划分为较小的数据块</p><p>​存储转发传输：存储转发传输是指在交换机能够开始向输岀链路传输该分组的第一个比特之前，必须接收到整个分组。</p><p>​排队时延和分组丢失：输出缓冲充满</p><p>​转发表和路由选择协议：</p><p>当源主机要向目的端系统发 送一个分组时，源在该分组的首部包含了目的地的IP地址。该地址具有一种等级结构.</p><p><strong>转发表：</strong>用于将目的地址映射成输出链路</p><h3 id="电路交换"><a href="#电路交换" class="headerlink" title="电路交换"></a>电路交换</h3><p>在电路交换网络中，在端系统间通信会话期间，预留了端系统间沿路径通信所需要的 资源（缓存，链路传输速率）。</p><p>传统的电话网络是电路交换网络的例子</p><p><strong>复用</strong>：频分复用和时分复用</p><p><img src="image-20231024235153440.png" alt="image-20231024235153440"></p><h3 id="网络的网络"><a href="#网络的网络" class="headerlink" title="网络的网络"></a>网络的网络</h3><p>通常用于描述一个由多个不同网络组成的更大型的网络结构。在互联网的背后，实际上是许多不同的网络（局域网、广域网、城域网等）通过路由器、交换机和其他网络设备相互连接形成的。这种层次化的结构使得数据可以在不同网络之间传输，从而实现了全球范围内的连接。</p><p><img src="image-20231025113524542.png" alt="image-20231025113524542">\</p><p><img src="image-20231025113726438.png" alt="image-20231025113726438"></p><h2 id="分组交换网中的时延、丢包和吞吐量"><a href="#分组交换网中的时延、丢包和吞吐量" class="headerlink" title="分组交换网中的时延、丢包和吞吐量"></a>分组交换网中的时延、丢包和吞吐量</h2><h3 id="时延"><a href="#时延" class="headerlink" title="时延"></a>时延</h3><p>节点处理时延、排队时延、传输时延、传播时延  –&gt;节点总时延</p><p><strong>传输时延和传播时延的比较</strong></p><p>传输时延是路由器推出分组所需要的时间，它是分组长度和链路传输速率的函数，而与两台路由器之间的距离无关。另一方面，传播时延是一个比特从一台路由器传播 到另一台路由器所需要的时间，它是两台路由器之间距离的函数，而与分组长度或链路传 输速率无关。</p><p><strong>链路带宽和链路传播速率</strong></p><ol><li><strong>链路带宽（Link Bandwidth）：</strong> 链路带宽是指网络连接或链路能够传输的最大数据量，通常以每秒传输的比特数（bits per second，bps）来表示。链路带宽决定了网络连接的传输能力，即在单位时间内可以传输的数据量。链路带宽通常是网络设备或链路的一个属性，表示网络链路的最大数据传输速度。</li><li><strong>链路传播速率（Link Data Rate）：</strong> 链路传播速率是指数据在网络链路上实际传播的速度，即数据从发送端传输到接收端所需的时间。链路传播速率受到物理链路的性质影响，包括传输介质的类型、信号传播速度和链路的长度。链路传播速率通常是链路的一个物理属性，取决于链路的特性。</li></ol><h3 id="吞吐量"><a href="#吞吐量" class="headerlink" title="吞吐量"></a>吞吐量</h3><h2 id="协议层次及服务模型"><a href="#协议层次及服务模型" class="headerlink" title="协议层次及服务模型"></a>协议层次及服务模型</h2><p><img src="image-20231025170824989.png" alt="image-20231025170824989"></p><p><img src="image-20231025170854154.png" alt="image-20231025170854154"></p><h1 id="第二章-应用层"><a href="#第二章-应用层" class="headerlink" title="第二章 应用层"></a>第二章 应用层</h1><p>用操作系统的术语来说，进行通信的实际上是进程（process）而不是程 序。一个进程可以被认为是运行在端系统中的一个程序。当多个进程运行在相同的端系统 上时，它们使用进程间通信机制相互通信。</p><p>网络体系结构：OSI模型等</p><p>应用程序系统结构：CS、P2P等</p><p>进程通过一个称为套接字（sock, el）的软件接口向网络发送报文和从网络接收报文。</p><p>一个运输层协议能够为调用它的应用程序提供什么样的服务呢？大体能够从四个 方面对应用程序服务要求进行分类：<strong>可靠数据传输、吞吐量、定时和安全性。</strong></p><p>运输服务：TCP,UDP</p><p>  TCP的加强版本，称为<strong>安全套接字层</strong>（Secure Sockets Layer, SSL） o用SSL加强后的TCP不仅能够做 传统的TCP所能做的一切，而且提供了关键的进程到进程的安全性服务，包括加密、数 据完整性和端点鉴别。</p><p>  强调SSL不是与TCP和UDP在相同层次上的第三种因特网 运输协议，而是一种对TCP的加强，这种强化是在应用层上实现的</p><p><strong>应用层协议：</strong></p><ul><li>交换的报文类型，例如请求报文和响应报文。 </li><li>各种报文类型的语法，如报文中的各个字段及这些字段是如何描述的。 </li><li>字段的语义，即这些字段中的信息的含义。 </li><li>确定一个进程何时以及如何发送报文，对报文进行响应的规则。</li></ul><h2 id="Web和HTTP"><a href="#Web和HTTP" class="headerlink" title="Web和HTTP"></a>Web和HTTP</h2><p>HTTP使用TCP作为它的支撑运输协议</p><p><strong>HTTP（Hypertext Transfer Protocol）</strong>是一种<strong>无状态（stateless）协议</strong>，这意味着每个HTTP请求都是独立的，服务器不会在请求之间保持任何状态信息。换句话说，服务器不会记住之前的请求，也不会知道用户之前的操作或状态。</p><ol><li><strong>独立请求：</strong> 每个HTTP请求都是独立的，不依赖于之前的请求。当你在浏览器中点击链接或者刷新页面时，每次请求都是一个新的请求，服务器不会知道之前的请求和响应。</li><li><strong>无会话状态：</strong> HTTP是无会话状态的，这意味着服务器不会为每个客户端保持一个持久的会话。在每次请求中，服务器不会知道请求来自哪个用户，除非用户在请求中包含了识别信息，例如在URL参数中或者通过Cookie头部。</li><li><strong>简化服务器：</strong> 无状态性简化了服务器的设计和维护，因为服务器不需要为每个用户保持状态信息。这使得HTTP协议非常灵活和可扩展，但也限制了它在处理某些应用场景（例如在线购物车、用户登录状态等）时的能力。</li></ol><p>HTTP请求报文和响应报文</p><h3 id="HTTP请求报文"><a href="#HTTP请求报文" class="headerlink" title="HTTP请求报文"></a>HTTP请求报文</h3><p><img src="image-20231027090505681.png" alt="image-20231027090505681"></p><p>HTTP请求报文的第一行叫作请求行（request line）,其后继的行叫作首部行（header line）。</p><p>请求行有3个字段：方法字段、URL字段和HTTP版本字段。</p><p>方法字段可以有：GET、POST、HEAD、PUT和DELETEO</p><p>通过包含Connection: close首部行，该浏览器告诉服务器不要麻烦地使用持续连接，它要求 服务器在发送完被请求的对象后就关闭这条连接</p><p><img src="image-20231027091523790.png" alt="image-20231027091523790"></p><p><img src="image-20231027091753683.png" alt="image-20231027091753683"></p><p><strong>无状态请求：</strong></p><h3 id="HTTP响应报文"><a href="#HTTP响应报文" class="headerlink" title="HTTP响应报文"></a>HTTP响应报文</h3><p><img src="image-20231027092124966.png" alt="image-20231027092124966"></p><p>  它有三个部分：一个初始<strong>状态行</strong>（status line） , 6个<strong>首部行</strong>（headerline）,然后是<strong>实体体</strong>（entity body）</p><p><strong>实体体：</strong>是报文的主要部分，即它包含了所请求的对象本身（表示为data data data data data -）。</p><p><strong>状态行：</strong>有3个字段：<strong>协议版本字段、状态码和相应状态信息</strong>。在这个例子中，状态行指示服务器正在使用HTTP&#x2F; 1.1,并且一切正常（即服务器已经找到并正在发送所请求的对象）。</p><p><strong>首部行：</strong>服务器用Connection： close首部行告诉客户，发送完报文后将关闭该TCP连接。</p><p>Date：首部行指示服务器产生并发送该响应报文的日期和时间。这个时间不是指对象创建或者最后修改的时间，而是服务器从它的文件系统中 检索到该对象，将该对象插入响应报文，并发送该响应报文的时间。</p><p>Server：首部行指示 该报文是由一台Apache Web服务器产生的，它类似于HTTP请求报文中的User-agent:首部行。</p><p>Last-Modified:首部行指示了对象创建或者最后修改的日期和时间。Last- Modified: 首部行对既可能在本地客户也可能在网络缓存服务器上的对象缓存来说非常重要。     缓存服务器（也叫代理服务器）。</p><p>ContentLength： 首部行指示了被发送对象中的字节数。</p><p>Content-Type:首部行指示了实体体中的对象是HTML文本。（该对象类型应该正式地由Content-Type:首部行而不是用文件扩展名来指示）</p><p><strong>状态码和相关短语</strong></p><p><img src="image-20231027124309275.png" alt="image-20231027124309275"></p><h3 id="用户与服务器的交互：cookie"><a href="#用户与服务器的交互：cookie" class="headerlink" title="用户与服务器的交互：cookie"></a>用户与服务器的交互：cookie</h3><p>  然而一个Web站点通常希望能够识别用户，可能是因为服务器希望限制用户的访问，或者因为它希望把内容与 用户身份联系起来。</p><p>  cookie相当于用户访问Web站点，这个站点分配给这个用户的唯一标识，之后的请求Web界面，浏览器就会查询cookie文件并抽取对这个网站的识别码</p><h3 id="Web缓存"><a href="#Web缓存" class="headerlink" title="Web缓存"></a>Web缓存</h3><p><img src="image-20231028171957169.png" alt="image-20231028171957169"></p><p>配置用户的浏览器，使得用户所有的HTTP请求首先指向Web缓存器。一旦某浏览器被配置了，每个请求首先被定向到该Web缓存器。</p><p>用户向服务器请求，先看代理服务器里面有没有，如果没有就到初始服务器里面找。代理服务器中间代理</p><h3 id="条件GET方法"><a href="#条件GET方法" class="headerlink" title="条件GET方法"></a>条件GET方法</h3><p>问题：如果初始服务器内容修改过，如何判断缓存服务器里面的内容还是可用的。</p><p>当初始服务器发送一个对象到缓存服务器时，里面也包含了Last-Modified:  最后修改时间</p><p>缓存服务器会向初始服务器发送一个条件GET执行最新检查，有之前初始服务器发的Last-Modified:</p><p><img src="image-20231028174231485.png" alt="image-20231028174231485"></p><p>初始服务器会返回一个响应报文：</p><p><img src="image-20231028174329111.png" alt="image-20231028174329111"></p><h2 id="因特网中的电子邮件"><a href="#因特网中的电子邮件" class="headerlink" title="因特网中的电子邮件"></a>因特网中的电子邮件</h2><p>3个主要部分：用户代理(user agent)、邮件服务器 (mail server)、简单邮件传输协议(Simple Mail Transfer Protocol  SMTP)</p><p><img src="image-20231028174835214.png" alt="image-20231028174835214"></p><p>​用户代理允许用户阅读、回复、转 发、保存和撰写报文。微软的Outlook和Apple Mail是电子邮件用户代理的例子。</p><p>​一个典型的邮件发送过程是：从发送方的用户代理开始，传输到发送方的邮件服务器，再传输到接收方的邮件服务器，然后在这里被分发到接收方的邮箱中。</p><p>​<strong>SMTP</strong>是因特网电子邮件中主要的<strong>应用层协议</strong>。它使用<strong>TCP</strong>可靠数据传输服务，从发送方的邮件服务器向接收方的邮件服务器发送邮件</p><h3 id="SMTP"><a href="#SMTP" class="headerlink" title="SMTP"></a>SMTP</h3><p>SMTP是因特网电子邮件的核心.</p><p>SMTP 一般不使用中间邮件服务器发送邮件,假设Alice的邮件服务器在中国香港，而Bob的服务器在美国圣路易斯，那么这个TCP连接也是从香港服务器到圣路易斯服务器之间的直接相连特别是，如果Bob的邮件服务器没有开机，该报文会保留在Alice的邮件服务器上 并等待进行新的尝试，这意味着邮件并不在中间的某个邮件服务器存留。</p><p>默认使用端口号25</p><h3 id="邮件报文格式"><a href="#邮件报文格式" class="headerlink" title="邮件报文格式"></a>邮件报文格式</h3><p>每个首部必须含有一个From：首部行和一个To：</p><h3 id="POP3"><a href="#POP3" class="headerlink" title="POP3"></a>POP3</h3><p>POP3是一个极为简单的<strong>邮件访问协议</strong></p><p>在POP3的事务处理过程中，用户代理发出一些命令，服务器对每个命令做出回答。 回答可能有两种：+0K （有时后面还跟有服务器到客户的数据），被服务器用来指示前面 的命令是正常的；-ERR,被服务器用来指示前面的命令出现了某些差错。</p><p><strong>不足：</strong>POP3协议没有给用户提供任何创建远程文件夹并为报文指派文件夹的方法。</p><h3 id="IMAP"><a href="#IMAP" class="headerlink" title="IMAP"></a>IMAP</h3><p>  IMAP服务器把每个报文与一个文件夹联系起来；当报文第一次到达服务器时，它 与收件人的INBOX文件夹相关联。收件人则能够把邮件移到一个新的、用户创建的文 件夹中，阅读邮件，删除邮件等。<strong>IMAP协议为用户提供了创建文件夹以及将邮件从一 个文件夹移动到另一个文件夹的命令。</strong>IMAP还为用户提供了在<strong>远程文件夹中查询邮件</strong> 的命令，按指定条件去查询匹配的邮件。值得注意的是，与POP3不同，IMAP服务器维护了 IMAP会话的用户状态信息，例如，文件夹的名字以及哪些报文与哪些文件夹相关联</p><h3 id="基于Web的电子邮件"><a href="#基于Web的电子邮件" class="headerlink" title="基于Web的电子邮件"></a>基于Web的电子邮件</h3><p>使用这种服务，用户代理就是普通的浏览器，<strong>用户和他远程邮箱</strong>之间的通信则通过HTTP进行</p><p>邮件服务器在与其他的邮件服务器之间发送和接收邮件时，仍然使用的是SMTP。</p><h2 id="DNS：因特网的目录服务"><a href="#DNS：因特网的目录服务" class="headerlink" title="DNS：因特网的目录服务"></a>DNS：因特网的目录服务</h2><p>进行主机名到IP地址转换的目录服务—域名系统 DNS</p><p>DNS是：</p><ul><li>一个由分层的DNS服务器实现的分布式数据库</li><li>一个使得主机能够查询分布式数据据的应用层协议。</li><li>DNS运行在UDP上，使用53号端口</li><li>主机别名（host aliasing）有着复杂主机名的主机能拥有一个或者多个别名。例 女口，一台名为relay 1. west-coast.enterprise.com的主机，可能还有两个别名为enterprise. com 和 www. enterprise. com0 在这种’情况下,relay 1. west- coasL enterprise, com 也称为规范主机名（canonical hostname）主机别名（当存在时）比主机规范名更加容易记忆。应用程序可以调用DNS来获得主机别名对应的规范主机名以及主机 的IP地址。</li></ul><h3 id="分布式、层次数据库"><a href="#分布式、层次数据库" class="headerlink" title="分布式、层次数据库"></a>分布式、层次数据库</h3><p>一般来说有三种类型的DNS服务器：根DNS服务器、顶级域DNS服务器、权威DNS服务器</p><p><img src="image-20231031102418239.png" alt="image-20231031102418239"></p><ul><li>根DNS服务器。有400多个根名字服务器遍及全世界。这些根名字服务器由13 个不同的组织管理。根名字服务器的全部清单连同管理它们的组织及其中找到。<strong>根名字服务器提供TLD服务器的IP地址。</strong> </li><li>顶级域(DNS)服务器。对于每个顶级域(如com、org、net、edu和gov)和所有 家的顶级域(如uk、fr、ca和jp),都有TLD服务器(或服务器集群)。Verisign Global Registry Services公司维护com顶级域的TLD服务器，Educause公司维护edu 顶级域的TLD服务器。支持TLD的网络基础设施可能是大而复杂的。<strong>TLD服务器提供了权威DNS服务器的IP地址</strong></li><li>权威DNS服务器。在因特网上具有公共可访问主机（如Web服务器和邮件服务器）的每个组织机构必须提供公共可访问的DNS记录，这些记录将这些主机的名 字映射为IP地址。一个组织机构的权威DNS服务器收藏了这些DNS记录。一个 组织机构能够选择实现它自己的权威DNS服务器以保存这些记录；另一种方法 是，该组织能够支付费用，让这些记录存储在某个服务提供商的一个权威DNS服 务器中。多数大学和大公司实现和维护它们自己基本和辅助（备份）的权威DNS 服务器。</li></ul><p>本地DNS服务器（local DNS server）</p><p><img src="image-20231031102904857.png" alt="image-20231031102904857"></p><h3 id="DNS缓存"><a href="#DNS缓存" class="headerlink" title="DNS缓存"></a>DNS缓存</h3><p>​DNS缓存(DNS caching) o实际上，为了改善时延性能并减 少在因特网上到处传输的DNS报文数量， DNS广泛使用了缓存技术。</p><h3 id="DNS记录和报文"><a href="#DNS记录和报文" class="headerlink" title="DNS记录和报文"></a>DNS记录和报文</h3><p><img src="image-20231031103337173.png" alt="image-20231031103337173"></p><p>TTL是该记录的生存时间，它决定了资源记录应当从缓存中删除的时间</p><p><img src="image-20231031103752285.png" alt="image-20231031103752285"></p><h3 id="DNS报文"><a href="#DNS报文" class="headerlink" title="DNS报文"></a>DNS报文</h3><p><img src="image-20231031105715113.png" alt="image-20231031105715113"></p><p><img src="image-20231031110255534.png" alt="image-20231031110255534"></p><p>nslookup程序，Windows和UNIX，命令行键入“nslookup”</p><h2 id="P2P文件分发"><a href="#P2P文件分发" class="headerlink" title="P2P文件分发"></a>P2P文件分发</h2><p>​单一服务器向大量主机（称为对等方）</p><p>​在P2P文件分发中，每个对等方能够向任何其他 对等方重新分发它已经收到的该文件的任何部分，从而在分发过程中协助该服务器</p><h3 id="BitTorrent"><a href="#BitTorrent" class="headerlink" title="BitTorrent"></a>BitTorrent</h3><p><img src="image-20231031165849372.png" alt="image-20231031165849372"></p><p>​每个洪流具有一个基础设施节点，称为<strong>追踪器</strong>（tracker）。当一个对等方加 入某洪流时，它向追踪器<strong>注册</strong>自己，并周期性地通知追踪器它仍在该洪流中。</p><p>​当一个新的对等方Alice加入该洪流时，追踪器随机地从参与对等方 的集合中选择对等方的一个子集（为了具体起见，设有50个对等方），并将这50个对等方的IP地址发送给Alice.Alice持有对等方的这张列表，试图与该列表上的所有对等方创建并行的TCP连接.</p><p><img src="image-20231031170045474.png" alt="image-20231031170045474"></p><p>​第一，她应当从她的邻居请求哪些块呢？第二，她应当向哪些向她请求块的邻居发送块？在决定请求哪些块的过程中，Alice使用一种称为<strong>最稀缺优先（rarest Erst）</strong>的技术。这种技术的思路是，针对她没有的块在她的邻居中决定 最稀缺的块（最稀缺的块就是那些在她的邻居中副本数量最少的块），并首先请求那些最稀缺的块。这样，最稀缺块得到更为迅速的重新分发，其目标是（大致地）均衡每个块在每个洪流中的副本数量。</p><h3 id="分布式散列表"><a href="#分布式散列表" class="headerlink" title="分布式散列表"></a>分布式散列表</h3><p>分布式散列表是一种简单的数据库，其数据库记录分布在一个P2P系统的多个对等方上。</p><h2 id="课后作业"><a href="#课后作业" class="headerlink" title="课后作业"></a>课后作业</h2><h3 id="Web服务器"><a href="#Web服务器" class="headerlink" title="Web服务器"></a>Web服务器</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"># import socket module</span><br><span class="line">from socket import *</span><br><span class="line">import sys  # In order to terminate the program</span><br><span class="line">#Prepare a server socket</span><br><span class="line">serverSocket = socket(AF_INET, SOCK_STREAM)</span><br><span class="line">#Fill in start</span><br><span class="line">serverPort = 8080  # 选择一个未被占用的端口号</span><br><span class="line">serverSocket.bind((&#x27;&#x27;, serverPort))</span><br><span class="line">serverSocket.listen(1)#2023-11-7 wq 只允许一个连接</span><br><span class="line">#Fill in end</span><br><span class="line"></span><br><span class="line">while True:</span><br><span class="line">    #Establish the connection</span><br><span class="line">    print(&#x27;Ready to serve...&#x27;)</span><br><span class="line">    #2023-11-7 wq 连接套接字</span><br><span class="line">    connectionSocket, addr = serverSocket.accept()</span><br><span class="line"></span><br><span class="line">    try:</span><br><span class="line">        message = connectionSocket.recv(1024).decode()</span><br><span class="line">        #2023-11-7 wq 以空格将消息分开，这个部分是文件路径。详见HTTP请求报文</span><br><span class="line">        filename = message.split()[1]</span><br><span class="line">        with open(filename[1:], &#x27;rb&#x27;) as file:</span><br><span class="line">            outputdata = file.read()</span><br><span class="line"></span><br><span class="line">        # Send one HTTP header line into socket</span><br><span class="line">        #2023-11-7 wq HTTP响应报文</span><br><span class="line">        connectionSocket.send(&#x27;HTTP/1.1 200 OK\r\n\r\n&#x27;.encode())</span><br><span class="line"></span><br><span class="line">        # Send the content of the requested file to the client</span><br><span class="line">        #2023-11-7 wq sendall将所有数据发送</span><br><span class="line">        connectionSocket.sendall(outputdata)</span><br><span class="line">        connectionSocket.close()</span><br><span class="line"></span><br><span class="line">    except IOError:</span><br><span class="line">        # Send response message for file not found</span><br><span class="line">        not_found_response = &#x27;HTTP/1.1 404 Not Found\r\n\r\nYou wanted is not found&#x27;</span><br><span class="line">        connectionSocket.send(not_found_response.encode())</span><br><span class="line">        connectionSocket.close()</span><br><span class="line"></span><br><span class="line">serverSocket.close()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="UDP-ping-程序"><a href="#UDP-ping-程序" class="headerlink" title="UDP ping 程序"></a>UDP ping 程序</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">import socket</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">server_host = &#x27;localhost&#x27;  # 服务器地址</span><br><span class="line">server_port = 12000  # 服务器端口</span><br><span class="line">timeout = 1  # 超时时间，单位：秒</span><br><span class="line">max_attempts = 10  # 最大尝试次数</span><br><span class="line"></span><br><span class="line">client_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</span><br><span class="line"></span><br><span class="line">for seq_num in range(1, max_attempts + 1):</span><br><span class="line">    send_time = time.time()</span><br><span class="line">    message = f&#x27;Ping &#123;seq_num&#125; &#123;send_time&#125;&#x27;</span><br><span class="line"></span><br><span class="line">    try:</span><br><span class="line">        client_socket.settimeout(timeout)</span><br><span class="line">        client_socket.sendto(message.encode(), (server_host, server_port))</span><br><span class="line">        modified_message, server_address = client_socket.recvfrom(1024)</span><br><span class="line">        receive_time = time.time()</span><br><span class="line">        rtt = receive_time - send_time</span><br><span class="line">        print(f&#x27;Received from &#123;server_address&#125;: &#123;modified_message.decode()&#125; | RTT: &#123;rtt:.6f&#125; seconds&#x27;)</span><br><span class="line">    except socket.timeout:</span><br><span class="line">        print(f&#x27;Ping &#123;seq_num&#125; Request Timed Out&#x27;)</span><br><span class="line"></span><br><span class="line">client_socket.close()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="多线程Web代理服务器"><a href="#多线程Web代理服务器" class="headerlink" title="多线程Web代理服务器"></a>多线程Web代理服务器</h3><p>因为防火墙的原因并没有转发成功</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">from socket import *</span><br><span class="line">import threading</span><br><span class="line">import sys</span><br><span class="line"></span><br><span class="line">if len(sys.argv) &lt;= 1:</span><br><span class="line">    print(&#x27;Usage : &quot;python ProxyServer.py server_ip&quot;\n[server_ip : It is the IP Address Of Proxy Server&#x27;)</span><br><span class="line">    sys.exit(2)</span><br><span class="line"></span><br><span class="line"># 解析命令行参数</span><br><span class="line">proxy_host = sys.argv[1]</span><br><span class="line">proxy_port = 8888  # 代理服务器的端口号</span><br><span class="line"></span><br><span class="line">def handle_client(client_socket):</span><br><span class="line">    request_data = client_socket.recv(4096)</span><br><span class="line">    # 在这里实现对请求的修改（如果需要的话）</span><br><span class="line">    modified_request_data = request_data  # 这里简单地将请求数据原样返回</span><br><span class="line">    # 连接目标服务器</span><br><span class="line">    with socket(AF_INET, SOCK_STREAM) as server_socket:</span><br><span class="line">        server_socket.connect((&#x27;www.example.com&#x27;, 80))  # 这里将目标服务器的地址和端口号修改为实际需要访问的服务器</span><br><span class="line">        server_socket.sendall(modified_request_data)</span><br><span class="line">        response_data = server_socket.recv(4096)</span><br><span class="line">    # 将响应数据发送回客户端</span><br><span class="line">    client_socket.sendall(response_data)</span><br><span class="line">    client_socket.close()</span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    # 创建代理服务器的套接字</span><br><span class="line">    with socket(AF_INET, SOCK_STREAM) as proxy_socket:</span><br><span class="line">        proxy_socket.bind((proxy_host, proxy_port))</span><br><span class="line">        proxy_socket.listen(5)</span><br><span class="line">        print(f&#x27;Proxy server listening on &#123;proxy_host&#125;:&#123;proxy_port&#125;...&#x27;)</span><br><span class="line"></span><br><span class="line">        while True:</span><br><span class="line">            # 等待客户端连接</span><br><span class="line">            client_socket, addr = proxy_socket.accept()</span><br><span class="line">            print(f&#x27;Accepted connection from &#123;addr[0]&#125;:&#123;addr[1]&#125;&#x27;)</span><br><span class="line">            # 启动新线程处理客户端请求</span><br><span class="line">            client_handler = threading.Thread(target=handle_client, args=(client_socket,))</span><br><span class="line">            client_handler.start()</span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    main()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="wireshark"><a href="#wireshark" class="headerlink" title="wireshark"></a>wireshark</h3><p>​wireshark是的网络封包分析软件，简称小鲨鱼，功能十分强大。可以截取各种网络封包，显示网络封包的详细信息。</p><p>Wireshark使用WinPCAP作为接口，直接与网卡进行数据报文交换。</p><p>​WinPcap（Windows Packet Capture）是一个用于Windows操作系统的网络数据包捕获库。它允许应用程序捕获和分析网络数据包，并提供了一个接口，使得开发者能够在网络上进行低级别的数据包操作。Wireshark是一个流行的网络协议分析工具，它可以使用WinPcap库来捕获网络数据包。</p><p>Wireshark使用WinPcap作为接口的作用在于：</p><ol><li><strong>数据包捕获：</strong> WinPcap提供了一个用于捕获网络数据包的接口。Wireshark可以利用这个接口在网络上捕获数据包，从而分析网络流量和网络通信。</li><li><strong>支持多种网络接口：</strong> WinPcap支持多种网络接口，包括以太网、Wi-Fi、和其他类型的网络接口。Wireshark可以使用WinPcap来捕获这些接口上传输的数据包。</li><li><strong>实时分析和离线分析：</strong> Wireshark可以实时地捕获网络数据包，也可以分析事先捕获并保存在文件中的数据包。通过WinPcap，Wireshark可以在实时模式和离线模式下工作。</li></ol><p>​网卡（Network Interface Card，NIC），也被称为网络适配器、网络接口卡或网卡，是一种用于<strong>计算机与计算机网络之间进行通信</strong>的硬件设备。它允许计算机通过网络与其他设备进行数据交换，使得计算机能够在局域网（LAN）或广域网（WAN）中进行通信，包括通过以太网、Wi-Fi、蓝牙等各种网络协议。</p><p>以下是网卡的主要特性和功能：</p><p><strong>特性和功能</strong>：</p><ol><li><strong>物理接口：</strong> 网卡通常以插入计算机主板上的扩展插槽（例如PCI、PCI Express）或者集成在计算机主板上的形式存在，提供了物理接口，用于连接网络电缆或无线信号。</li><li><strong>MAC地址：</strong> <strong>每个网卡都有一个唯一的硬件地址</strong>，称为MAC地址（Media Access Control地址）。MAC地址用于在网络中唯一标识网卡，确保数据包准确传递到目标网卡。</li><li><strong>数据包处理：</strong> 网卡能够处理数据包，包括接收和发送数据包。接收时，网卡负责解析数据包，将数据包传递给计算机的操作系统进行处理。发送时，网卡将计算机中要发送的数据包转换为网络可以识别的格式，并将其发送到网络中。</li><li><strong>协议支持：</strong> 网卡支持各种网络通信协议，例如以太网、Wi-Fi（无线局域网）、蓝牙等。不同类型的网卡支持不同的协议。</li><li><strong>数据传输速度：</strong> 网卡有不同的数据传输速度，通常以Mbps（兆比特每秒）或Gbps（千兆比特每秒）为单位。传统的以太网通常是10&#x2F;100&#x2F;1000Mbps，而现代的网络通常支持千兆或更高速度。</li><li><strong>半双工&#x2F;全双工：</strong> 网卡可以支持半双工（Half-Duplex）或全双工（Full-Duplex）通信。半双工表示数据只能在一个方向上传输，而全双工则允许同时进行双向通信。</li><li><strong>自适应速率：</strong> 现代网卡通常支持自适应速率，可以自动根据网络条件调整传输速度，以确保稳定的数据传输。</li><li><strong>中断处理：</strong> 网卡能够触发计算机的中断，通知计算机有新的数据包到达。操作系统在收到中断信号后，会处理这些数据包。</li></ol><p><img src="image-20231108084230589.png" alt="image-20231108084230589"></p><p>Wireshark 的主界面包含6个部分：</p><p>菜单栏：用于调试、配置</p><p>工具栏：常用功能的快捷方式</p><p>过滤栏：指定过滤条件，过滤数据包</p><p>数据包列表：核心区域，每一行就是一个数据包</p><p>数据包详情：数据包的详细数据</p><p>数据包字节：数据包对应的字节流，二进制</p><p>说明：数据包列表区中不同的协议使用了不同的颜色区分。协议颜色标识定位在菜单栏视图–&gt;着色规则。如下所示</p><p><img src="image-20231108084359802.png" alt="image-20231108084359802"></p><h4 id="Packet-Details-Pane-数据包详细信息"><a href="#Packet-Details-Pane-数据包详细信息" class="headerlink" title="Packet Details Pane(数据包详细信息)"></a><strong>Packet Details Pane(数据包详细信息)</strong></h4><p>在数据包列表中选择指定数据包，在数据包详细信息中会显示数据包的所有详细信息内容。数据包详细信息面板是最重要的，用来查看协议中的每一个字段。各行信息分别为</p><p>（1）Frame:物理层的数据帧概况</p><p>（2）EthernetII:数据链路层以太网帧头部信息</p><p>（3）Internet Protocol Version 4:互联网层IP包头部信息</p><p>（4）Transmission Control Protocol:传输层T的数据段头部信息，此处是TCP</p><p>（5）Hypertext Transfer Protocol:应用层的信息，此处是HTTP协议</p><p><img src="image-20231108084724075.png" alt="image-20231108084724075"></p><p><strong>显示过滤器和抓包过滤器区别：</strong></p><p>​显示过滤器用于过滤Wireshark中<strong>已经捕获</strong>的数据包，只显示符合特定条件的数据包。</p><p>​抓包过滤器用于在<strong>捕获数据包之前</strong>，指定只捕获符合特定条件的数据包。</p><h4 id="抓包过滤语法"><a href="#抓包过滤语法" class="headerlink" title="抓包过滤语法"></a>抓包过滤语法</h4><p>抓包过滤器类型Type(host、net、port)，方向Dir(src、dst)，协议Proto(ether、ip、tcp、udp、http、icmp、ftp等)，逻辑运算符(&amp;&amp;与、||或、!非)</p><p>（1）协议过滤</p><p>比较简单，直接在抓包过滤框中直接输入协议名即可。</p><p>tcp，只显示TCP协议的数据包列表</p><p>http，只查看HTTP协议的数据包列表</p><p>icmp，只显示ICMP协议的数据包列表</p><p>（2）IP过滤</p><p>host 192.168.1.104</p><p>src host192.168.1.104</p><p>dst host192.168.1.104</p><p>（3）端口过滤</p><p>port 80</p><p>src port 80</p><p>dst port 80</p><p>（4）逻辑运算符&amp;&amp;与、|| 或、！非</p><p>src host 192.168.1.104 &amp;&amp;dst port 80 抓取主机地址为192.168.1.80、目的端口为80的数据包</p><p>host 192.168.1.104 || host 192.168.1.102 抓取主机为192.168.1.104或者192.168.1.102的数据包</p><p>！broadcast 不抓取广播数据包</p><h4 id="显示过滤器语法"><a href="#显示过滤器语法" class="headerlink" title="显示过滤器语法"></a>显示过滤器语法</h4><p>1）比较操作符</p><p>比较操作符有</p><p>&#x3D;&#x3D; 等于、！&#x3D; 不等于、&gt; 大于、&lt; 小于、&gt;&#x3D; 大于等于、&lt;&#x3D;小于等于</p><p>（2）协议过滤</p><p>比较简单，直接在Filter框中直接输入协议名即可。注意：协议名称需要输入小写。</p><p>tcp，只显示TCP协议的数据包列表</p><p>http，只查看HTTP协议的数据包列表</p><p>icmp，只显示ICMP协议的数据包列表</p><p>（3） ip过滤</p><p>ip.src &#x3D;&#x3D;112.53.42.42 显示源地址为112.53.42.42的数据包列表</p><p>ip.dst&#x3D;&#x3D;112.53.42.42, 显示目标地址为112.53.42.42的数据包列表</p><p>ip.addr &#x3D;&#x3D; 112.53.42.42 显示源IP地址或目标IP地址为112.53.42.42的数据包列表</p><p>（4）端口过滤</p><p>tcp.port &#x3D;&#x3D;80, 显示源主机或者目的主机端口为80的数据包列表。</p><p>tcp.srcport &#x3D;&#x3D; 80, 只显示TCP协议的源主机端口为80的数据包列表。</p><p>tcp.dstport &#x3D;&#x3D; 80，只显示TCP协议的目的主机端口为80的数据包列表。</p><p>（5）http模式过滤</p><p>http.request.method&#x3D;&#x3D;”GET”, 只显示HTTP GET方法的。</p><p>（6）逻辑运算符为 and&#x2F;or&#x2F;not</p><p>过滤多个条件组合时，使用and&#x2F;or。比如获取IP地址为192.168.0.104的ICMP数据包表达式为ip.addr &#x3D;&#x3D; 192.168.0.104 and icmp</p><p>（7）按照数据包内容过滤</p><p>假设我要以ICMP层中的内容进行过滤，可以单击选中界面中的码流，在下方进行选中数据。</p><p><img src="image-20231108091034417.png" alt="image-20231108091034417"></p><p><img src="image-20231108091043546.png" alt="image-20231108091043546"></p><p><img src="image-20231108091057773.png" alt="image-20231108091057773"></p><h4 id="常见显示过滤需求"><a href="#常见显示过滤需求" class="headerlink" title="常见显示过滤需求"></a>常见显示过滤需求</h4><p><strong>数据链路层：</strong></p><p>筛选目的mac地址为04:f9:38:ad:13:26的数据包</p><p>eth.dst &#x3D;&#x3D; 04:f9:38:ad:13:26</p><p>筛选源mac地址为04:f9:38:ad:13:26的数据包—-</p><p>eth.src &#x3D;&#x3D; 04:f9:38:ad:13:26</p><p><strong>网络层：</strong></p><p>筛选ip地址为192.168.1.1的数据包</p><p>ip.addr &#x3D;&#x3D; 192.168.1.1</p><p>筛选192.168.1.0网段的数据</p><p>ip contains “192.168.1”</p><p><strong>传输层：</strong></p><p>筛选端口为80的数据包</p><p>tcp.port &#x3D;&#x3D; 80</p><p>筛选12345端口和80端口之间的数据包</p><p>tcp.port &#x3D;&#x3D; 12345 &amp;&amp;tcp.port &#x3D;&#x3D; 80</p><p>筛选从12345端口到80端口的数据包</p><p>tcp.srcport &#x3D;&#x3D; 12345 &amp;&amp;tcp.dstport &#x3D;&#x3D; 80</p><p><strong>应用层：</strong></p><p>特别说明: http中http.request表示请求头中的第一行（如GET index.jsp HTTP&#x2F;1.1） http.response表示响应头中的第一行（如HTTP&#x2F;1.1 200 OK），其他头部都用http.header_name形式。</p><p>筛选url中包含.php的http</p><p>数据包</p><p>http.request.uri contains “.php”</p><p>筛选内容包含username的http数据包</p><p>http contains “username”</p><h1 id="第四章-网络层：数据平面"><a href="#第四章-网络层：数据平面" class="headerlink" title="第四章 网络层：数据平面"></a>第四章 网络层：数据平面</h1><p>网络层被分解为两个相互作用的部分，即数据平面和控制平面。</p><p>这里数据平面的功能，即网络层中每台路由器的功能，该数据平面功能决定到达路由器输入链路之一的数据报如果转发到该路由器的输出链路之一</p><p>网络层功能：</p><ul><li>转发。当一个分组到达某路由器的一条输入链路时，该路由器必须将该分组移动到适当的输出链路</li><li>路由选择。当分组从发送方流向接收方时，网络层必须决定这些分组所采用的路由或路径</li></ul><h1 id="课本"><a href="#课本" class="headerlink" title="课本"></a>课本</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>分组交换和电路交换</p><h2 id="物理层"><a href="#物理层" class="headerlink" title="物理层"></a>物理层</h2><h2 id="数据链路层"><a href="#数据链路层" class="headerlink" title="数据链路层"></a>数据链路层</h2><h3 id="PPP协议"><a href="#PPP协议" class="headerlink" title="PPP协议"></a>PPP协议</h3><p>PPP协议就是用户计算机和ISP进行通信时所使用的数据链路层协议，提供用户认证和管理</p><p><strong>三个组成：</strong></p><ul><li>一个将IP数据包封装到串行链路的方法</li><li>一个用来建立、配置和测试数据链路连接的<strong>链路控制协议LCP</strong>(Link Control Protocol)</li><li>一套<strong>网络控制协议NCP</strong>(Network Control Protocol)</li></ul><p><strong>各字段意义：</strong></p><p>帧首部5字节，帧尾部3字节</p><p><img src="image-20231129203209757.png" alt="image-20231129203209757"></p><ul><li>标志字段F规定 0x7E，定界符</li><li>地址A和控制C无实际意义</li><li>协议P：<strong>0x0021</strong>：PPP帧的信息字段就是IP数据报；0xC021：是PPP链路控制协议LCP的数据；0x8021：表示这个是网络层的控制数据</li></ul><p><strong>字节填充：</strong>（0x7D被定义为转义字符）</p><ul><li>信息字段出现0x7E那么就转变成0x7D,0x5E两个字节</li><li>出现0x7D，那么就转变成0x7D,0x5D</li><li>出现ASCII码小于0x20的字符，在该字符前面添加0x7D，同时该字符也变，例如：0x03–&gt;0x7D,0x23</li></ul><p><strong>零比特填充：</strong></p><p>当有5个连续的1就在后面填入一个0（一般硬件实现，但也有软件，硬件更快）</p><p><strong>PPP协议的工作状态：</strong></p><img src="image-20231219202112851.png" alt="image-20231219202112851" style="zoom: 33%;"><h4 id="PPPoE"><a href="#PPPoE" class="headerlink" title="PPPoE"></a>PPPoE</h4><p>PPP over Ethernet</p><p>是PPP协议能适应多种类型链路的典型例子,,PPPoE是为<strong>宽带上网</strong>的主机使用的链路层协议</p><p>宽带上网和WiFi上网：</p><p>这个说的很好理解<a href="https://www.zhihu.com/question/395689746">(30 封私信 &#x2F; 81 条消息) WiFi和宽带有什么区别吗？ - 知乎 (zhihu.com)</a></p><h3 id="使用广播信道的数据链路层"><a href="#使用广播信道的数据链路层" class="headerlink" title="使用广播信道的数据链路层"></a>使用广播信道的数据链路层</h3><p><strong>局域网</strong></p><p>共享信道</p><ol><li>静态划分：频分复用、时分复用、波分复用、码分复用</li><li>动态媒体接入控制<ul><li><strong>随机接入</strong></li><li>受控接入</li></ul></li></ol><p><strong>以太网的两个主要标准：</strong>DIX Ethernet V2和IEEE 802.3</p><p><strong>适配器：</strong></p><p>适配器在接收和发送各种帧时，不使用计算机的CPU。当适配器收到正确的帧时，就使用中断来通知计算机，并交付协议栈中的网络层。计算机的<strong>硬件地址</strong>在<strong>适配器的ROM</strong>中。</p><p><strong>区别总结：</strong></p><ul><li><strong>可读写性：</strong> ROM是只读的，而RAM是可读写的。</li><li><strong>数据持久性：</strong> ROM是非易失性的，RAM是易失性的。</li><li><strong>应用场景：</strong> ROM用于存储固定的不经常变化的数据，而RAM用于存储临时需要频繁访问的数据。</li></ul><p>重要功能：数据串行传输和并行传输的转换。</p><p>适配器和局域网是串行，适配器和计算机是并行通信。</p><p>计算机的数据通过适配器发送到局域网，适配器将其组装成帧（不使用CPU）</p><h3 id="CSMA-x2F-CD协议"><a href="#CSMA-x2F-CD协议" class="headerlink" title="CSMA&#x2F;CD协议"></a>CSMA&#x2F;CD协议</h3><p>为了通信简便采取两个措施：</p><ol><li>无连接，对发送的数据<strong>不编号</strong>，也<strong>不要发回确认</strong>，以太网提供的服务是<strong>尽最大努力的交付</strong>，是<strong>不可靠的交付</strong>。当检测有差错的帧，直接丢弃，是否需要重传由高层决定，比如TCP会有重传机制</li><li>以太网发送的数据使用<strong>曼彻斯特编码</strong>的信号</li></ol><p><strong>先听后发，边听边发，冲突停止，等待重发</strong></p><p><strong>协议要点：</strong>多点接入、载波监听、碰撞检测</p><p>检测出来碰撞是因为信号叠加超出了限定值。</p><p>  单程的端到端传播时延记作：τ，最迟发现数据发生碰撞时间：2τ。</p><p>争用期：2τ，如果在这期间没有检测到碰撞，才能肯定这次发送不会发送碰撞。</p><p>  基本退避时间：2τ，电磁波在1km电缆的传播时延约为5us，以太网最大的端到端时延必须小于争用期的一半（25.6us）,以太网最大的端到端长度约为5km，实际上以太网覆盖没这么大，所以会使用具体的争用时间51.2us。</p><p>具体的争用期时延是51.2us，</p><p>以太网规定最短帧长64字节，如果长度小于64字节的帧都是无效帧，由于冲突发生异常终止，64字节，512比特，也就是具体的争用期时间，所以当检测到碰撞之后就会停止发送，此时已经发送的长度是小于64字节的。</p><p>帧间最小间隔为9.6us，</p><p>使用<strong>集线器</strong>的星形拓扑：提供物理层的连接，并将数据帧从一个端口广播到其他所有端口。</p><p>信道利用率&#x3D;τ&#x2F;T0；T0：发送帧的时间</p><h3 id="MAC地址"><a href="#MAC地址" class="headerlink" title="MAC地址"></a>MAC地址</h3><p>注册管理机构RA分配<strong>组织唯一标识符OUI **  24位，厂家指派</strong>扩展标识符EUI**  24位 ， <strong>扩展的唯一标识符EUI-48</strong> 48位。</p><p>MAC帧：</p><p><img src="image-20231129223737026.png" alt="image-20231129223737026"></p><p>开始接收帧时，时钟不同步，会先发送7字节的前同步码和1字节的帧开始定界符</p><h3 id="扩展以太网"><a href="#扩展以太网" class="headerlink" title="扩展以太网"></a>扩展以太网</h3><p>网桥：有一个地址表，将收到的地址找一下看看有没有，没有就丢弃，不会向所有的端口转发这个帧</p><p>物理层：转发器</p><p>数据链路层：</p><p>最初是网桥，后面交换式集线器–<strong>以太网交换机</strong>—第二层交换机</p><p><strong>网桥和交换机的区别：</strong></p><p><a href="https://zhuanlan.zhihu.com/p/440970417">集线器、网桥、交换机的区别（详解干货！！！） - 知乎 (zhihu.com)</a></p><p><img src="image-20231219212449125.png" alt="image-20231219212449125"></p><p><img src="image-20231219212504508.png" alt="image-20231219212504508"></p><p>集线器HUB</p><p>网桥和交换机还有一个特点：<strong>缓存</strong></p><p><strong>以太网交换机：</strong>多端口的网桥，无碰撞，不用CSMA&#x2F;CD协议</p><p>以太网交换机的一种即插即用设备，其内部的帧交换表（地址表）通过自学习算法</p><p>对于传统的10Mbit&#x2F;s的共享式以太网，若有10个用户，则每个用户占有的平均带宽只有1Mbit&#x2F;s。若使用以太网交换机连接，虽然每个端口到主机的带宽还是10Mbit&#x2F;s，但是总容量则100Mbit&#x2F;s.</p><p><strong>虚拟局域网：</strong>虚拟局域网VLAN，给用户提供的一种服务，会插入VLAN标签到以太网帧中</p><p>RIP使用UDP，BGP使用TCP</p><p>OSPF不依赖传输层协议，直接在IP层上运行</p><h2 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h2><p><strong>wireshark</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#捕获arp请求</span><br><span class="line">arp and arp.opcode == 1</span><br><span class="line">#捕获arp应答</span><br><span class="line">arp and arp.opcode == 2</span><br></pre></td></tr></table></figure><p><strong>windows命令行提示符</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#获取本机转发表</span><br><span class="line">route print</span><br><span class="line">#跟踪一个分组从源点到终点的路径</span><br><span class="line">tracert baidu.com</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Linux控制台</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#获取本机转发表</span><br><span class="line">ip route show</span><br><span class="line">#跟踪一个分组从源点到终点的路径</span><br><span class="line">traceroute baidu.com</span><br></pre></td></tr></table></figure><p><strong>ARP协议是IP地址到MAC地址的映射</strong></p><p><strong>MAC表是交换机上的端口与MAC地址的映射</strong></p><p>协议IP规定，在互联网中所有的主机和路由器必须能接受长度不超过576字节的数据报</p><p>简单的说：路由器转发让目的地址和子网掩码进行AND操作，然后判断是否和前缀相同</p><p>多播地址：224.0.0.0-239.255.255.255</p><p>IP地址前四位1110</p><p>专用地址</p><ol><li>10.0.0.0&#x2F;8</li><li>172.16.0.0&#x2F;12</li><li>192.168.0.0&#x2F;16</li></ol><p>TCP连接的三次握手会消耗一个序号</p><p><img src="image-20231226135451805.png" alt="image-20231226135451805"></p><p>TCP释放连接要四次挥手，全双工的，一方释放连接是单向的，需要双方都向对方释放连接</p><p>释放连接的时候有一个2MSL（最长报文段寿命Maximum Segment Lifetime RFC793建议2分钟）</p><p><strong>为什么必须等待2MSL:</strong></p><ol><li>为了保证A发送的最后一个ACK报文段B能够到达，有可能A发送的ACK报文段丢失，那么B收不到这个报文段的确认；</li><li>防止“已失效的连接请求报文段”出现在本连接中。A发送完ACK之后，等待2MSL，可以使本连接持续的时间内所产生的所有报文段都从网络上消失。这样就可以使下一个新的连接中不会出现这种旧的连接请求报文段。</li></ol><p><strong>信道利用率：</strong>P224</p><p>T<del>D</del>&#x2F;(T<del>D</del>+RTT+T<del>A</del>): T<del>D</del>是传输时延，RTT是往返时延，T<del>A</del>是确认分组的传输时延</p><p><strong>超时重传时间的选择：</strong></p><p>  TCP采用一种自适应算法，记录一个报文段发出的时间，以及收到相应确认的时间。时间差RTT。TCP保留了一个RTT的一个加权平均往返时间RTT<del>S</del>。</p><p>  RTT<del>S</del>的计算：<u>第一次测量RTT样本时，RTT<del>S</del>就取该RTT样本值。</u></p><p>  新的RTT<del>S</del> &#x3D; (1-α)*旧的RTT<del>S</del> + α*新的RTT样本        &#x2F;&#x2F;α是设定的值。</p><p>  超时器设置的超时重传时间RTO应略大于上面的RTT<del>S</del>，计算公式：</p><p>  RTO &#x3D; RTT<del>S</del> + 4 * RTT<del>D</del></p><p>而RTT<del>D</del>是RTT的偏差的加权平均值，它与RTT<del>S</del>和新的RTT样本有关。<u>当第一次测试时，RTT<del>D</del>的值取位测量到的RTT样本值的一半</u>，计算公式：</p><p>  新的RTT<del>D</del> &#x3D; （1-β）* 旧的RTT<del>D</del> + β*|RTT<del>S</del> - 新的RTT样本|  &#x2F;&#x2F;β是设定的值，RTT<del>S</del>是新测量的</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>web测试</title>
      <link href="/2023/10/21/web%E6%B5%8B%E8%AF%95/"/>
      <url>/2023/10/21/web%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<p>环境配置：</p><p>1.chrome：和对应的chromedriver.exe</p><p>2.jdk版本1.8</p><p>3.selenium-standalone.jar</p><p>常见的定位：xpath、className、linkText</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line">import org.openqa.selenium.chrome.ChromeDriver;</span><br><span class="line">import org.openqa.selenium.WebDriver;</span><br><span class="line">import org.openqa.selenium.WebElement;</span><br><span class="line">import org.openqa.selenium.By;</span><br><span class="line"></span><br><span class="line">@SuppressWarnings(&quot;unused&quot;)</span><br><span class="line">public class Example &#123;</span><br><span class="line"></span><br><span class="line">    // Mooctest Selenium Example</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    // &lt;!&gt; Check if selenium-standalone.jar is added to build path.</span><br><span class="line"></span><br><span class="line">    public static void test(WebDriver driver) &#123;</span><br><span class="line">        // TODO Test script</span><br><span class="line">        // eg:driver.get(&quot;https://www.baidu.com/&quot;)</span><br><span class="line">        // eg:driver.findElement(By.id(&quot;wd&quot;));</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    try &#123;</span><br><span class="line">    </span><br><span class="line">    driver.get(&quot;&quot;);//打开网页</span><br><span class="line">    driver.manage().window().maximize();//最大化</span><br><span class="line">    Thread.sleep(1500);//等待1.5秒</span><br><span class="line">    driver.findElement(By.linkText(&quot;电影&quot;)).click();//点击“电影”</span><br><span class="line">    Thread.sleep(1500);</span><br><span class="line">    //切换网页界面，标识从0开始</span><br><span class="line">    driver.switchTo().window(driver.getWindowHandles().toArray()[1].toString());</span><br><span class="line">    Thread.sleep(1500);</span><br><span class="line">    //点击 class=“curr”</span><br><span class="line">    driver.findElement(By.className(&quot;curr&quot;)).click();</span><br><span class="line">    Thread.sleep(1500);</span><br><span class="line">    driver.switchTo().window(driver.getWindowHandles().toArray()[2].toString());//</span><br><span class="line">    Thread.sleep(1500);</span><br><span class="line">    driver.findElement(By.linkText(&quot;免费&quot;)).click();//3</span><br><span class="line">    Thread.sleep(1500);</span><br><span class="line">    //driver.findElement(By.linkText(&quot;喜剧&quot;)).click();//6</span><br><span class="line">    //Thread.sleep(1500);</span><br><span class="line">    //driver.findElement(By.linkText(&quot;爱情&quot;)).click();//7</span><br><span class="line">    //Thread.sleep(1500);</span><br><span class="line">    driver.findElement(By.linkText(&quot;动作&quot;)).click();//4</span><br><span class="line">    Thread.sleep(1500);</span><br><span class="line">    driver.findElement(By.linkText(&quot;中国香港&quot;)).click();//5</span><br><span class="line">    Thread.sleep(1500);</span><br><span class="line">    driver.findElement(By.linkText(&quot;2016&quot;)).click();//6</span><br><span class="line">    Thread.sleep(1500);</span><br><span class="line">    driver.findElement(By.linkText(&quot;最新&quot;)).click();//7</span><br><span class="line">    Thread.sleep(1500);</span><br><span class="line">    //通过xpath定位driver.findElement(By.xpath(&quot;/html/body/div[3]/div/div[2]/dl[1]/dd[1]/a/i&quot;)).click();</span><br><span class="line">    Thread.sleep(1500);</span><br><span class="line">    driver.switchTo().window(driver.getWindowHandles().toArray()[3].toString());</span><br><span class="line">    Thread.sleep(1500);</span><br><span class="line">    driver.findElement(By.className(&quot;search_input&quot;)).sendKeys(&quot;周星驰&quot;);//9</span><br><span class="line">    Thread.sleep(1500);</span><br><span class="line">    driver.findElement(By.className(&quot;search_btn&quot;)).click();//10</span><br><span class="line">    Thread.sleep(1500);</span><br><span class="line">    //driver.findElement(By.linkText(&quot;展开更多&quot;)).click();//11</span><br><span class="line">    //Thread.sleep(1500);</span><br><span class="line">    driver.findElement(By.linkText(&quot;下一页&quot;)).click();//12</span><br><span class="line">    Thread.sleep(1500);</span><br><span class="line">    driver.findElement(By.linkText(&quot;首页&quot;)).click();//13</span><br><span class="line">    Thread.sleep(1500);</span><br><span class="line">    driver.findElement(By.linkText(&quot;电视剧&quot;)).click();//14</span><br><span class="line">    Thread.sleep(1500);</span><br><span class="line">    driver.switchTo().window(driver.getWindowHandles().toArray()[4].toString());</span><br><span class="line">    Thread.sleep(1500);</span><br><span class="line">    driver.findElement(By.linkText(&quot;更多&quot;)).click();//15</span><br><span class="line">    Thread.sleep(1500);</span><br><span class="line">    driver.switchTo().window(driver.getWindowHandles().toArray()[5].toString());</span><br><span class="line">    Thread.sleep(1500);</span><br><span class="line">    driver.findElement(By.linkText(&quot;独播&quot;)).click();//16</span><br><span class="line">    Thread.sleep(1500);</span><br><span class="line">    driver.findElement(By.linkText(&quot;穿越&quot;)).click();//17</span><br><span class="line">    Thread.sleep(1500);</span><br><span class="line">    driver.findElement(By.linkText(&quot;2013&quot;)).click();//18</span><br><span class="line">    Thread.sleep(1500);</span><br><span class="line">    driver.findElement(By.className(&quot;d_img&quot;)).click();//19</span><br><span class="line">    Thread.sleep(1500);</span><br><span class="line">    driver.switchTo().window(driver.getWindowHandles().toArray()[6].toString());</span><br><span class="line">    Thread.sleep(1500);</span><br><span class="line">    driver.findElement(By.linkText(&quot;预告片&quot;)).click();//20</span><br><span class="line">    Thread.sleep(1500);</span><br><span class="line">    driver.findElement(By.linkText(&quot;花絮&quot;)).click();//21</span><br><span class="line">    Thread.sleep(1500);</span><br><span class="line">    driver.findElement(By.linkText(&quot;分集剧情&quot;)).click();//22</span><br><span class="line">    Thread.sleep(1500);</span><br><span class="line">    driver.findElement(By.linkText(&quot;乐迷畅谈&quot;)).click();//23</span><br><span class="line">    Thread.sleep(1500);</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&#125; catch (InterruptedException e) &#123;</span><br><span class="line">// TODO Auto-generated catch block</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        // Run main function to test your script.</span><br><span class="line">        WebDriver driver = new ChromeDriver();</span><br><span class="line">        try &#123; test(driver); &#125; </span><br><span class="line">        catch(Exception e) &#123; e.printStackTrace(); &#125;</span><br><span class="line">        finally &#123; driver.quit(); &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Reverse之路</title>
      <link href="/2023/05/26/Reverse%E4%B9%8B%E8%B7%AF/"/>
      <url>/2023/05/26/Reverse%E4%B9%8B%E8%B7%AF/</url>
      
        <content type="html"><![CDATA[<h1 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h1><h2 id="OD"><a href="#OD" class="headerlink" title="OD"></a>OD</h2><p><img src="image18.png" alt="image18"></p><p>1.我们点击反汇编窗口的随意一行代码，右键-&gt;Go to-&gt;Ｅxpression(快捷键Ctrl+G)，在窗口中输入地址77D507EA，回车会发现此时窗口已经跳转到该地址了。</p><p>2.Ctrl+F2重新载入程序</p><p>3.通常 OllyDbg 显示程序的某些部分时是不正确的，错误的将可执行代码解释为数据，此时我们可以在反汇编窗口中右键-&gt;Analysis -&gt; Remove analysis from module 手动删除分析结果</p><p>4.反汇编窗口右键-&gt;Analysis-&gt;Analyse code（快捷键Ctrl+A）重新获得这些分析信息</p><p>5.快捷键：</p><p><strong>F7</strong> 单步步入。执行一行代码，遇到 CALL 等子程序时会进入其中，进入后首先会停留在子程序的第一条 指令上。</p><p><strong>F8</strong> 单步步过。执行一行代码，遇到 CALL 等子程序不进入其代码。</p><p><strong>F2</strong> 按F2在选中行设置断点，再次按 F2 删除断点。</p><p><strong>F9</strong> 黑色表示当前程序运行到的位置，按F9运行调试程序，直到遇到断点停止运行。</p><p><strong>F4</strong> 运行到选定位置。作用就是直接运行到光标所在位置处暂停。一个是运行到断点，一个是鼠标点击的地方暂停</p><h2 id="一些函数"><a href="#一些函数" class="headerlink" title="一些函数"></a>一些函数</h2><h3 id="memset：初始化函数"><a href="#memset：初始化函数" class="headerlink" title="memset：初始化函数"></a>memset：初始化函数</h3><p>memset是一个初始化函数，作用是将某一块内存中的全部设置为指定的值。</p><p>void *memset(void *s, int c, size_t n); </p><p>s指向要填充的内存块。</p><p>c是要被设置的值。</p><p>n是要被设置该值的字符数。</p><p>返回类型是一个指向存储区s的指针。</p><h3 id="strncpy-：字符串复制"><a href="#strncpy-：字符串复制" class="headerlink" title="strncpy() ：字符串复制"></a>strncpy() ：字符串复制</h3><p>char *strncpy(char *dest, const char *src, size_t n)</p><p>str 所指向的字符串复制到 dest，最多复制n个字符，当src长度小于n时，dest剩余部分用空字节填充</p><p>trncpy函数在进行字符串拷贝时，因为会复制源字符串的前几个字符，所以可能会在目标字符串中留下没有被赋值的空字符(‘\0’)。因此，在使用strncpy函数时，应该在目标字符串后手动添加一个空字符以保证字符串的完整性。</p><h3 id="strcpy-：字符串复制"><a href="#strcpy-：字符串复制" class="headerlink" title="strcpy()：字符串复制"></a>strcpy()：字符串复制</h3><p>C 库函数 <strong>char *strcpy(char *dest, const char *src)</strong> 把 <strong>src</strong> 所指向的字符串复制到 <strong>dest</strong>。</p><p>需要注意的是如果目标数组 dest 不够大，而源字符串的长度又太长，可能会造成缓冲溢出的情况。</p><p>与strncpy()的区别是：在于对目标字符串长度的处理方式。</p><p>strcpy函数不会检查目标字符串的长度，它会一直复制源字符串，直到遇到’\0’为止。如果源字符串比目标字符串长，就会发生内存越界的错误。</p><p>而strncpy函数会先检查目标字符串的长度，如果目标字符串的长度小于等于源字符串的长度，则会将源字符串的前几个字符复制到目标字符串中，并在结尾处加上’\0’；如果目标字符串的长度大于源字符串的长度，则会将源字符串全部复制到目标字符串中，并在结尾处补充’\0’以保证字符串的完整性。因此，strncpy函数可以避免发生内存越界的错误。</p><h3 id="malloc-：动态分配内存空间"><a href="#malloc-：动态分配内存空间" class="headerlink" title="malloc()：动态分配内存空间"></a>malloc()：动态分配内存空间</h3><p>void* malloc (size_t size);</p><p>size 为需要分配的内存空间的大小，以字节（Byte）计</p><h3 id="strcat-a-b-将两个char类型连接"><a href="#strcat-a-b-将两个char类型连接" class="headerlink" title="strcat(a,b)将两个char类型连接"></a>strcat(a,b)将两个char类型连接</h3><p>赋值给a。d和s所指内存区域不可以重叠且d必须有足够的空间来容纳s的字符串</p><h2 id="OEP-IAT"><a href="#OEP-IAT" class="headerlink" title="OEP,IAT"></a>OEP,IAT</h2><p><strong>什么是OEP</strong></p><p>oep指的是original entry point（原始进入点，就是程序入口啦），脱壳就是为了找到正确的oep</p><p><strong>IAT是啥</strong></p><p>逆向工程核心原理：import Address Table （导入表），库函数知道不？函数名知道不？那玩意儿怎么在计算机中定位的？当 PE 文件载入内存时，windows 加载器会定位所有导入的函数或数据将定位到的内容填写至可执行文件的某个位置供其使用，而这个操作是需要借助导入表来完成的。现在不需要关心导入表干了嘛，你只要知道这玩意儿不能错就行。</p><h2 id="EBP-ESP"><a href="#EBP-ESP" class="headerlink" title="EBP,ESP"></a>EBP,ESP</h2><p>寄存器EBP指向当前的栈帧的底部，寄存器ESP指向当前的栈帧的顶部。</p><p>ESP指示栈区域的栈顶地址，某些指令（PUSH、POP、CALL、RET)可以直接用来操作ESP (栈区域管理是程序中相当重要的部分，请不要把ESP用作其他用途)。 EBP表示栈区域的基地址，函数被调用时保存ESP的值，函数返回时再把值返回ESP，保证栈不会崩溃（这称为栈帧（Stack Frame）技术)。</p><h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><p>API（Application Programming Interface,应用程序编程接口）是一些预先定义的函数，目的是提供应用程序与开发人员基于某软件或硬件得以访问一组例程的能力，而又无需访问源码，或理解内部工作机制的细节。</p><h2 id="DLL"><a href="#DLL" class="headerlink" title="DLL"></a>DLL</h2><p>动态链接库（Dynamic Link Library 或者 Dynamic-link Library，缩写为 DLL），是微软公司在微软Windows操作系统中，实现共享函数库概念的一种方式（这些库函数的扩展名是 ”.dll”、”.ocx”（包含ActiveX控制的库）或者 “.drv”（旧式的系统驱动程序））。动态链接提供了一种方法，使进程可以调用不属于其可执行代码的函数。</p><h2 id="UPX"><a href="#UPX" class="headerlink" title="UPX"></a>UPX</h2><p>进行手动脱壳的操作。 手动脱壳，需要找到<strong>目标程序的OEP</strong>，而最简单的手动查找的策略就是查找尾部跳转指令。这条指令是<strong>从脱壳存根向OEP跳转</strong>的。通常情况下，它是一条<strong>jmp指令</strong>，但是恶意代码作者也会使用ret指令来逃避检测。通常，<strong>尾部跳转指令是一串无效字节前的最后一条有效指令</strong>。填充这些字节的目的是为了保证区段中的字节对齐。</p><h2 id="Classes-dex"><a href="#Classes-dex" class="headerlink" title="Classes.dex"></a>Classes.dex</h2><p>  classes.dex是Android应用程序运行的核心文件之一，也是Dalvik虚拟机的执行文件。该文件包含了应用程序的所有Java代码和应用程序使用的资源（如图片、文本、布局等）的编译后的字节码，以及应用程序依赖的库文件。</p><p>  在构建Android应用程序时，所有Java源代码都会被编译成Dalvik虚拟机可执行的字节码，并打包成一个dex（Dalvik Executable）文件。这个dex文件被命名为classes.dex，在安装应用程序时被存储在应用程序的APK（Android Package）文件中。当用户安装并打开应用程序时，Dalvik虚拟机会加载classes.dex文件并执行其中的代码，从而实现应用程序的功能。</p><h2 id="pyc文件"><a href="#pyc文件" class="headerlink" title="pyc文件"></a>pyc文件</h2><p>c 是 compiled 编译过的意思</p><p>是Python解释器在运行Python代码时自动生成的字节码文件。字节码是一种中间代码形式，可以在不同的平台和操作系统中运行，这使得Python代码在不同的机器上执行的速度更快。</p><h2 id="“-02X”"><a href="#“-02X”" class="headerlink" title="“%02X”"></a>“%02X”</h2><p>“%02X”是C语言中的格式化输出字符串，用于将无符号十六进制整数输出为两位十六进制表示形式，其中：</p><p>%：格式控制字符的起始标记。</p><p>0：表示要使用前导零填充数字，如果该数字不足两位，则在前面加上0以凑够两位。</p><p>2：表示输出的整数要占用2个字符的宽度，如果不足2个字符，则在前面使用0填充。</p><p>X：表示以十六进制大写字母的形式输出整数值。</p><p>如果变量的值为10，则输出的结果为 “0A”。因为它使用两个字符表示16进制数10，且在前面使用0填充以凑齐两个字符。如果变量x的值为255，则输出结果为 “FF”。</p><h1 id="BUU"><a href="#BUU" class="headerlink" title="BUU"></a>BUU</h1><h2 id="2023-5-26"><a href="#2023-5-26" class="headerlink" title="2023.5.26"></a>2023.5.26</h2><h3 id="1-easyre"><a href="#1-easyre" class="headerlink" title="1.easyre"></a>1.easyre</h3><p>文件名：easyre.zip</p><p>日常查壳：</p><p>用PEiD查壳，然而显示的不是有效的PE文件，<strong>PEiD只支持检测32位的可执行文件</strong>，如果显示不是有效的[PE文件，说明你的可执行文件为64位，不能用PEiD检测</p><p><img src="image1.png" alt="image1"></p><p>下面使用Exeinfo PE查看，Exeinfo相当于PEiD的升级版，可查看64位的可执行文件</p><p><img src="image2.png" alt="image2"></p><p>然后用ide64打开，直接Shift+F12查看字符串，直接看到flag，提交正确</p><p><img src="image3.png" alt="image3"></p><h3 id="2-reverse1"><a href="#2-reverse1" class="headerlink" title="2.reverse1"></a>2.reverse1</h3><p>文件名：b095c2d1-aa44-4e11-9ab5-137f66e1a48c.rar</p><p>日常查壳（Exeinfo PE）</p><p><img src="image4.png" alt="image4"></p><p>用ida64打开，查看字符串，this is the right flag!\n 这句很有可能是flag的地方，点进去，Ctrl+x（交叉引用）查看是哪段函数调用了该字符串，进入查看，F5反汇编</p><p><img src="image5.png" alt="image5"></p><p>容易看出j_strlen()函数是获取长度的，搜了一下strncmp是比较函数，v3是比较前v3个字符，然后就定位到了if条件语句，有一个变换就是当字符的ASCII是111,也就是o的时候，换成ASCII是48的0，然后我就直接用aHell0W0rld提交了，不对，最后我才发现aHelloWorld只是一个变量名字，点击aHelloWorld进入查看字符串</p><p><img src="image6.png" alt="image6"></p><p><img src="image7.png" alt="image7"></p><p>转换完提交就可。</p><h3 id="3-reverse2"><a href="#3-reverse2" class="headerlink" title="3.reverse2"></a>3.reverse2</h3><p>文件名：e8722e94-93d7-45d5-aa06-a7aa26ce01a1.rar</p><p>日常查壳（Exeinfo PE），貌似不是Win文件，不管，直接拖到ida64</p><p><img src="image8.png" alt="image8"></p><p>直接去看字符串，找到this is the right flag!，点进去查看，Ctrl+x，然后进入该函数，F5反汇编</p><p><img src="image9.png" alt="image9"></p><p>这个题和上个题目差不多，也是转换字符，找到flag，然后替换就可以了</p><p><img src="image10.png" alt="image10"></p><h3 id="4-内涵的软件"><a href="#4-内涵的软件" class="headerlink" title="4.内涵的软件"></a>4.内涵的软件</h3><p>文件名：70125468-0786-4705-bd91-87037f8f3e16.exe</p><p>觉得不太简单，至少不像前几题那样</p><p>日常查壳，不知道什么情况，先放到ida64看看</p><p><img src="image11.png" alt="image11"></p><p>加载的二进制文件可以以各种模式进行反汇编。请选择所需的模式：</p><p>不清楚，就先用64位反汇编</p><p><img src="image12.png" alt="image12"></p><p>IDA无法自动识别入口点 因为没有二进制文件的标准。请转到您认为的切入点然后按“C”开始自动分析。</p><p>难道是有壳？但是也没查到啊。不清楚，往下看</p><p><img src="image13.png" alt="image13"></p><p><strong>SOS</strong></p><p>犯了一个很大的错误，我先是把exe文件加载到桌面快捷方式，然后用的快捷方式打开的，怪不得错了</p><p>再次查壳，32位，用ida32打开</p><p><img src="image14.png" alt="image14"></p><p>先去看字符串，貌似没看到直接关系的，看到了flag &#x3D;&#x3D; 0 || flag &#x3D;&#x3D; 1，然后点进去看看，然而并没有什么实质性的线索，然后我就去看main函数，转到了main_0，然后发现了一串字符串，感觉像，把开头改成flag提交，还真的是！</p><p><img src="image15.png" alt="image15"></p><h3 id="5-新年快乐"><a href="#5-新年快乐" class="headerlink" title="5.新年快乐"></a>5.新年快乐</h3><p>memset是一个初始化函数，作用是将某一块内存中的全部设置为指定的值。</p><p>void *memset(void *s, int c, size_t n); </p><ul><li>s指向要填充的内存块。</li><li>c是要被设置的值。</li><li>n是要被设置该值的字符数。</li><li>返回类型是一个指向存储区s的指针。</li></ul><p>日常查壳，发现是upx加壳处理过的，upx是加壳工具能够压缩程序代码，减小程序体积</p><p><img src="image17.png" alt="image17"></p><p>先说第一种用脱壳工具，在upx.exe文件目录下输入cmd，然后输入upx.exe -h，然后把需要去壳的文件拖入同一目录下，我直接脱壳没成功，先加壳之后脱壳就好了</p><p>加壳命令：upx file.exe</p><p>脱壳命令：upx -d file.exe</p><p>ida32打开，查看字符串，找到this is true flag!，进去查看，F5反汇编，直接发现了关键信息，还是字符串比较是否相等</p><p><img src="image16.png" alt="image16"></p><p>下面说手动脱壳，用的是x32dbg</p><p>加载后进去断点处查看，有pushad，跟随断点，在该处右键，选择在此处设置新原点，然后单步执行，当ESP发生变化时，右键，在转存中跟随，然后在数据窗口处右键，断点，硬件存取，字，然后运行，会在断点处停下来，上面就有popad，找到它下面第一个jmp，就是入口点了.</p><p><img src="image36.png" alt="image36"></p><p>然后用这类似 S ,的插件</p><p><img src="image37.png" alt="image37"></p><p>把OEP改成那个jmp跳转的地址，然后转储。然后在工具栏上点其他，选项，在”其他“那里点使用高级IAT搜索，接受，然后先点ITA自动搜索，之后再点获取导入，最后点修复转储，打开刚才保存的 新年快乐_dump.exe，就回发现有了一个 新年快乐_dump_SCY.exe 文件，查壳，无壳。就完成了</p><p><img src="image38.png" alt="image38"></p><h2 id="2023-5-27"><a href="#2023-5-27" class="headerlink" title="2023.5.27"></a>2023.5.27</h2><h3 id="6-xor"><a href="#6-xor" class="headerlink" title="6.xor"></a>6.xor</h3><p>日常查壳，64位的</p><p><img src="image19.png" alt="image19"></p><p>用ida64打开，直接查看字符串，发现关键字符串’Success’，找到该函数，反汇编查看</p><p><img src="image20.png" alt="image20"></p><p>可知，是与global所代表的字符串比较，不过对你输入的字符串要进行异或处理，然后再比较，找global代表的字符串</p><p><img src="image21.png" alt="image21"></p><p>这里是offset aFKWOXZUPFVMDGH，这个是获取它的地址吧，之后进去查看</p><p><img src="image22.png" alt="image22"></p><p>然后编写Python代码，获得flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">s=[<span class="string">&#x27;f&#x27;</span>,<span class="number">0xA</span>,<span class="string">&#x27;k&#x27;</span>,<span class="number">0xC</span>,<span class="string">&#x27;w&#x27;</span>,<span class="string">&#x27;&amp;&#x27;</span>,<span class="string">&#x27;O&#x27;</span>,<span class="string">&#x27;.&#x27;</span>,<span class="string">&#x27;@&#x27;</span>,<span class="number">0x11</span>,<span class="string">&#x27;x&#x27;</span>,<span class="number">0xD</span>,<span class="string">&#x27;Z&#x27;</span>,<span class="string">&#x27;;&#x27;</span>,<span class="string">&#x27;U&#x27;</span>,<span class="number">0x11</span>,<span class="string">&#x27;p&#x27;</span>,<span class="number">0x19</span>,<span class="string">&#x27;F&#x27;</span>,<span class="number">0x1F</span>,<span class="string">&#x27;v&#x27;</span>,<span class="string">&#x27;&quot;&#x27;</span>,<span class="string">&#x27;M&#x27;</span>,<span class="string">&#x27;#&#x27;</span>,<span class="string">&#x27;D&#x27;</span>,<span class="number">0xE</span>,<span class="string">&#x27;g&#x27;</span>,<span class="number">6</span>,<span class="string">&#x27;h&#x27;</span>,<span class="number">0xF</span>,<span class="string">&#x27;G&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;O&#x27;</span>]</span><br><span class="line">key1=<span class="string">&#x27;f&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="built_in">len</span>(s)): <span class="comment">#将数字转化成字母</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(s[i],<span class="built_in">int</span>):</span><br><span class="line">        <span class="built_in">print</span>(s[i])</span><br><span class="line">        s[i] = <span class="built_in">chr</span>(s[i])</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="built_in">len</span>(s)):</span><br><span class="line">    m = <span class="built_in">ord</span>(s[i]) ^ <span class="built_in">ord</span>(s[i - <span class="number">1</span>])</span><br><span class="line">    key1+=<span class="built_in">chr</span>(m)</span><br><span class="line"><span class="built_in">print</span>(key1)</span><br></pre></td></tr></table></figure><h3 id="7-helloword"><a href="#7-helloword" class="headerlink" title="7.helloword"></a>7.helloword</h3><p>题目名称：6176cfc5-d473-4453-a000-29e480ace634.apk</p><p>这次给的是apk文件，第一次遇到，我知道可以把后缀改成zip，但是这题没用。然后用ida64打开，选择APK</p><p><img src="image24.png" alt="image24"></p><p>去字符串那里查找，一看太多了，直接搜flag，然后发现，提交</p><p><img src="image23.png" alt="image23"></p><h3 id="8-reverse3"><a href="#8-reverse3" class="headerlink" title="8.reverse3"></a>8.reverse3</h3><p>日常查壳，无壳，32位</p><p><img src="image25.png" alt="image25"></p><p>用ida32打开，去看字符串，有base64input，可能和base64编码有关，发现有关flag的，查看</p><p><img src="image26.png" alt="image26"></p><p>找到函数，反汇编，很容易查到aE3nifih9bCNDh &#x3D; ‘e3nifIH9b_C@n@dH’，然后上面有一个循环，每个字符加上该字符的下标，上面v4 &#x3D; sub_4110BE((int)v11, v3, (int)v12);函数应该就是base64加密过程，</p><p><img src="image27.png" alt="image27"></p><p>先转换回去，再用base64解码</p><p><img src="image28.png" alt="image28"></p><p><img src="image29.png" alt="image29"></p><h2 id="2023-5-28"><a href="#2023-5-28" class="headerlink" title="2023.5.28"></a>2023.5.28</h2><p>下面就是用代码解base64。</p><p>base64编码原理：</p><ol><li>得到编码数据的二进制码</li></ol><p>如果编码数据为英文：将英文参照ascii码表转换为对应的数字表示形式，再将数字转为二进制</p><p>如果编码数据为中文：将中文使用unicode UTF8编码得到二进制</p><ol start="2"><li><p>将3个8位的二进制码为一组</p></li><li><p>转换为4个6位二进制码为一组（不足6位补0，不足4个 最后追加补位符“&#x3D;”）</p></li><li><p>对每组二进制码添加2位高位0</p></li><li><p>将每组转换为十进制</p></li><li><p>将每组的十进制转换为Base64字符表中对应的字符</p></li></ol>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">flag = <span class="string">&#x27;e3nifIH9b_C@n@dH&#x27;</span></span><br><span class="line">code1 = <span class="string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=&#x27;</span></span><br><span class="line">key = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="comment">#每一位减去下标</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(flag)):</span><br><span class="line">    m = <span class="built_in">ord</span>(flag[i])-i</span><br><span class="line">    key += <span class="built_in">chr</span>(m)</span><br><span class="line"><span class="built_in">print</span>(key)</span><br><span class="line">str2 = <span class="string">&#x27;&#x27;</span></span><br><span class="line">len_str1 = <span class="built_in">len</span>(key)</span><br><span class="line">data = [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line">j = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> len_str1:</span><br><span class="line">    data[<span class="number">0</span>] = <span class="number">0</span></span><br><span class="line">    data[<span class="number">1</span>] = <span class="number">0</span></span><br><span class="line">    data[<span class="number">2</span>] = <span class="number">0</span></span><br><span class="line">    data[<span class="number">3</span>] = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):<span class="comment">#字符每4个一组</span></span><br><span class="line">        data[i] = key[j]</span><br><span class="line">        j+=<span class="number">1</span></span><br><span class="line">        len_str1-=<span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):<span class="comment">#定位到字符在code1中的位置</span></span><br><span class="line">        data[i] = code1.find(data[i])</span><br><span class="line">    str_1 =<span class="built_in">chr</span>(( data[<span class="number">0</span>])&lt;&lt;<span class="number">2</span>  | (data[<span class="number">1</span>]&gt;&gt;<span class="number">4</span>))</span><br><span class="line">    str_2 =<span class="built_in">chr</span>(((data[<span class="number">1</span>] &amp; <span class="number">0xf</span>)&lt;&lt;<span class="number">4</span> ) | (data[<span class="number">2</span>]&gt;&gt;<span class="number">2</span>))</span><br><span class="line">    str_3 =<span class="built_in">chr</span>(((data[<span class="number">2</span>] &amp; <span class="number">3</span>)&lt;&lt;<span class="number">6</span>) | data[<span class="number">3</span>])</span><br><span class="line">    str2+=str_1</span><br><span class="line">    str2+=str_2</span><br><span class="line">    str2+=str_3</span><br><span class="line"><span class="built_in">print</span>(str2)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>  <img src="image35.png" alt="image35"></p><h3 id="9-不一样的flag"><a href="#9-不一样的flag" class="headerlink" title="9.不一样的flag"></a>9.不一样的flag</h3><p>题目：0bf39b5d-5f2f-4095-a921-fb5c20f53f21.zip</p><p>日常查壳，32位无壳，用ida32打开</p><p><img src="image30.png" alt="image30"></p><p>去看字符串，有发现，去看这个函数</p><p><img src="image31.png" alt="image31"></p><p>其实刚开始并不是很理解，没有往迷宫那里想，想着读代码，反而就麻烦了，不过代码也看懂了我。</p><p>刚开始v3给的内存是29个字节，前25个放了*11110100001010000101111#，而剩下的是纵坐标，而v4是横坐标，来说一下为什么，首先那个up down left right,方位词和位置有关，然后按2是down，v3[25]+1，纵坐标加一，以下类似，其次，看那个for循环，分别是比较的v3[25]和v4，判断有没有超出边界，0-4，这时我们就可以猜出来那25个字符可能是构成了5 * 5的矩阵，也就是所谓的迷宫。然后看最后的if判断，49和35分别代表1和#，而到#结束，也就是走出迷宫。</p><p>看一下v7里面的那个算式5 * *(_DWORD <em>)&amp;v3[25] - 41 + v4，v7数组的第一个字节地址&#x3D;v3数组首字节地址+29+4</em>3&#x3D;41，所以用v7的地址减去41就得到的是v3里面的内容，而用5*纵坐标+横坐标，就是定位当前位置。</p><p><img src="image32.png" alt="image32"></p><p><img src="image33.png" alt="image32"></p><p>其实就是这样的，踩0，走到#</p><p><img src="image34.png" alt="image34"></p><h2 id="2023-5-29"><a href="#2023-5-29" class="headerlink" title="2023.5.29"></a>2023.5.29</h2><h3 id="10-SimpleRev"><a href="#10-SimpleRev" class="headerlink" title="10.SimpleRev"></a>10.SimpleRev</h3><p>题目：SimpleRev</p><p>日常查壳，64位无壳，ida64打开</p><p><img src="image39.png" alt="image39"></p><p>去查字符串，看到有Congratulation!，进去看看</p><p><img src="image40.png" alt="image40"></p><p>这里的src &#x3D; 0x534C43444ELL，要转化成字符，因为是小段存储，所以从后往前</p><p><img src="image41.png" alt="image41"></p><p>感觉这里表述的不是很明显，因为你不能确定输入的是什么，是字母，大写还是小写，或者其他符号。flag都是大写，难道因为单独写出来了大写的范围？不太清楚</p><p><img src="image42.png" alt="image42"></p><p>最后写脚本求(这里是按照大写字母来写的)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">flag = <span class="string">&#x27;killshadow&#x27;</span></span><br><span class="line">word = <span class="string">&#x27;adsfkndcls&#x27;</span></span><br><span class="line">key = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">65</span>,<span class="number">91</span>):</span><br><span class="line">        <span class="keyword">if</span> (j-<span class="number">39</span>-<span class="built_in">ord</span>(word[i%<span class="number">10</span>])+<span class="number">97</span>)%<span class="number">26</span>+<span class="number">97</span> == <span class="built_in">ord</span>(flag[i]):</span><br><span class="line">            key+=<span class="built_in">chr</span>(j)</span><br><span class="line"><span class="built_in">print</span>(key)</span><br></pre></td></tr></table></figure><h3 id="11-Java逆向解密"><a href="#11-Java逆向解密" class="headerlink" title="11.Java逆向解密"></a>11.Java逆向解密</h3><p>这个是.class文件，java逆向。用jd-gui打开，查看源码</p><p><img src="image43.png" alt="image43"></p><p>这里我发现那个异或部分可以编译出了问题，实际上应该是  (arr[i] + ‘@’ ) ^ 0x20</p><p>然后写源码解：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">m = <span class="built_in">ord</span>(<span class="string">&#x27;@&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;m=&quot;</span>,m)</span><br><span class="line">key = [<span class="number">180</span>, <span class="number">136</span>, <span class="number">137</span>, <span class="number">147</span>, <span class="number">191</span>, <span class="number">137</span>, <span class="number">147</span>, <span class="number">191</span>, <span class="number">148</span>, <span class="number">136</span>, <span class="number">133</span>, <span class="number">191</span>, <span class="number">134</span>, <span class="number">140</span>, <span class="number">129</span>, <span class="number">135</span>, <span class="number">191</span>, <span class="number">65</span>]</span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(key)):</span><br><span class="line">    <span class="built_in">id</span> = (key[i]^<span class="number">0x20</span>)-m</span><br><span class="line">    flag+=<span class="built_in">chr</span>(<span class="built_in">id</span>)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><h3 id="12-GXYCTF2019-luck-guy"><a href="#12-GXYCTF2019-luck-guy" class="headerlink" title="12.[GXYCTF2019]luck_guy"></a>12.[GXYCTF2019]luck_guy</h3><p>日常查壳，64位，无壳。用ida64加载</p><p><img src="image44.png" alt="image44"></p><p>查看字符串，有OK,it&#96;s flag:，进去查看函数</p><p><img src="image45.png" alt="image45"></p><p>可以知道，flag是s代表的字符串，但是能看出来这个运行是随机的，只有按照一定的顺序运行才能得到完整的s，分析得，先case 4，之后case 5，最后case 1.即可求解</p><p><img src="image46.png" alt="image46"></p><p><img src="image47.png" alt="image47"></p><p>源码的内容也很容易就能分析出来。</p><h2 id="2023-5-30"><a href="#2023-5-30" class="headerlink" title="2023.5.30"></a>2023.5.30</h2><h3 id="13-BJDCTF2020-JustRE"><a href="#13-BJDCTF2020-JustRE" class="headerlink" title="13.[BJDCTF2020]JustRE"></a>13.[BJDCTF2020]JustRE</h3><p>日常查壳，32位，无壳，运行了这个可执行文件。用ida32打开。</p><p><img src="image48.png" alt="image48"></p><p>去查看字符串，在末尾看到了一个类似flag的字符串，去看看。</p><p><img src="image49.png" alt="image49"></p><p>我觉得这个就是flag ，%d%d，换成后面的199990提交，正确</p><p><img src="image50.png" alt="image50"></p><h2 id="2023-5-31"><a href="#2023-5-31" class="headerlink" title="2023.5.31"></a>2023.5.31</h2><h3 id="14-刮开有奖"><a href="#14-刮开有奖" class="headerlink" title="14.刮开有奖"></a>14.刮开有奖</h3><p>日常查壳，32位，ida32打开，直接去看字符串，发现了嫌疑字符串，而且还看到上面BCD·····那一串觉得可以和base64有关，进去查看。</p><p><img src="image51.png" alt="image51"></p><p>这部分算是初始化，而且得知v22的长度是8(上面给它还定义的很大的空间)，然后就能看到sub_4010F0函数，传的是v12,进去看看。</p><p><img src="image52.png" alt="image52"></p><p>这里有一点要注意，传进来的是v12，但是存储的地址是连续的，所以是可以访问到后面的数据的，比如v13,v14···</p><p>然后这里我用C++敲的，会发现v12到v21会变化。字符串就是：3CEHJNSZagn</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">abc</span><span class="params">(<span class="type">char</span>* a1,<span class="type">int</span> a2, <span class="type">int</span> a3)</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line"><span class="type">int</span> v5;</span><br><span class="line"><span class="type">int</span> v6;</span><br><span class="line"><span class="type">int</span> result=a3;</span><br><span class="line"><span class="comment">//int a1[11]=&#123;90,74,83,69,67,97,78,72,51,110,103&#125;;</span></span><br><span class="line"><span class="keyword">for</span>(i=a2;i&lt;=a3;a2=i)&#123;</span><br><span class="line">v5=i;</span><br><span class="line">v6=a1[i];</span><br><span class="line"><span class="keyword">if</span>(a2&lt;result&amp;&amp;i&lt;result)</span><br><span class="line">&#123; </span><br><span class="line"> <span class="keyword">do</span>&#123; </span><br><span class="line"><span class="keyword">if</span>(v6&gt;a1[result])&#123;</span><br><span class="line"><span class="keyword">if</span>( i &gt;= result )&#123;<span class="keyword">break</span>;&#125;</span><br><span class="line">++i;</span><br><span class="line">a1[v5]=a1[result];</span><br><span class="line"><span class="keyword">if</span>(i&gt;=result)&#123;<span class="keyword">break</span>;&#125;</span><br><span class="line"><span class="keyword">while</span>( a1[i] &lt;= v6 )</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(++i &gt;= result)&#123;</span><br><span class="line"><span class="keyword">goto</span> lab;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(i &gt;= result)&#123;<span class="keyword">break</span>;&#125;</span><br><span class="line">v5=i;</span><br><span class="line">a1[result]=a1[i];</span><br><span class="line">&#125;</span><br><span class="line">--result;</span><br><span class="line">&#125;<span class="keyword">while</span>(i&lt;result);</span><br><span class="line">&#125;</span><br><span class="line">lab:</span><br><span class="line">a1[result] = v6;</span><br><span class="line"><span class="built_in">abc</span>(a1,a2,i<span class="number">-1</span>);</span><br><span class="line">result = a3;</span><br><span class="line">++i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//int a1[11]=&#123;90,74,83,69,67,97,78,72,51,110,103&#125;;</span></span><br><span class="line"><span class="type">char</span> str[]=<span class="string">&quot;ZJSECaNH3ng&quot;</span>;</span><br><span class="line"><span class="built_in">abc</span>(str,<span class="number">0</span>,<span class="number">10</span>);</span><br><span class="line">cout&lt;&lt;str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后我们在退出这个函数继续往下看，光看这里看不出来什么，对v22没有什么信息，先往下看</p><p><img src="image53.png" alt="image53"></p><p>这里的话就能根据这个if，推出一些变量代表的值。而且能看出v4&#x3D;&#x3D;“ak1w”，v5的话推一下下面的判断语句也能推出v5&#x3D;”V1Ax”;</p><p><img src="image54.png" alt="image54"></p><p>下面再回到sub_401000那里，这个函数分析挺麻烦的，但是byte_407830指向的是那个BCD·····，所以猜测是base64，然后就能求出v4,v5原本的值，也就是v22[2]-v22[7]，这时候也就知道v22所代表的值UJWP1jMp，我也不清楚为什么这个是flag，提交的的确是对的。</p><h2 id="2023-6-1"><a href="#2023-6-1" class="headerlink" title="2023.6.1"></a>2023.6.1</h2><h3 id="15-简单注册器"><a href="#15-简单注册器" class="headerlink" title="15.简单注册器"></a>15.简单注册器</h3><p>  这题给的是apk文件，我用ida32打开了，可以在字符串那里看到flag，但是不能够反汇编，分析难度加大。然后上网搜了一些关于apk文件的静态分析方法，说的挺模糊的，然后就让我瞎搞出来了。先把apk文件的后缀改成zip，打开之后就有一个classes.dex文件（Dalvik Executable）,这里面有应用程序的java文件。</p><p>  然后用Apktool Box工具把dex转成jar文件，之后我是用jd-gui工具打开jar文件，进去查看。</p><p><img src="image55.png" alt="image55"></p><p>一下就看到了flag字样，然后查看代码，第一个if我还想了半天，之后发现可以不用管，因为刚开始的那个初始化并不知道，而且第二个if也给了定义，然后直接在第二个if处开始分析，代换一下就可以了。然后就是while处的转换，可以看出是前后转换位置，最后写python代码实现。</p><p><img src="image56.png" alt="image56"></p><p>代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">flag = <span class="built_in">list</span>(<span class="string">&quot;dd2940c04462b4dd7c450528835cca15&quot;</span>)</span><br><span class="line">flag[<span class="number">2</span>] =<span class="built_in">chr</span>( <span class="built_in">ord</span>(flag[<span class="number">2</span>]) + <span class="built_in">ord</span>(flag[<span class="number">3</span>]) - <span class="number">50</span> )</span><br><span class="line">flag[<span class="number">4</span>] =<span class="built_in">chr</span>( <span class="built_in">ord</span>(flag[<span class="number">2</span>]) + <span class="built_in">ord</span>(flag[<span class="number">5</span>]) - <span class="number">48</span> )</span><br><span class="line">flag[<span class="number">30</span>] =<span class="built_in">chr</span>( <span class="built_in">ord</span>(flag[<span class="number">31</span>]) + <span class="built_in">ord</span>(flag[<span class="number">9</span>]) - <span class="number">48</span> )</span><br><span class="line">flag[<span class="number">14</span>] =<span class="built_in">chr</span>( <span class="built_in">ord</span>(flag[<span class="number">27</span>]) + <span class="built_in">ord</span>(flag[<span class="number">28</span>]) - <span class="number">97</span> )</span><br><span class="line">j = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>):</span><br><span class="line">    i =<span class="built_in">ord</span>( flag[<span class="number">31</span>-j] )</span><br><span class="line">    flag[<span class="number">31</span>-j] = flag[j]</span><br><span class="line">    flag[j] = <span class="built_in">chr</span>(i)</span><br><span class="line">    j += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> j==<span class="number">16</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> flag:</span><br><span class="line">    <span class="built_in">print</span>(i,end=<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="2023-6-2"><a href="#2023-6-2" class="headerlink" title="2023.6.2"></a>2023.6.2</h2><h3 id="16-GWCTF-2019-pyre"><a href="#16-GWCTF-2019-pyre" class="headerlink" title="16.[GWCTF 2019]pyre"></a>16.[GWCTF 2019]pyre</h3><p>给的是一个pyc文件，上面在知识点那里解释了一下。这里我用工具将pyc文件编译成可以读的高级语言（Easy Python Decompiler v1.3.2）得到了如下代码：</p><p><img src="image57.png" alt="image57"></p><p>可知flag就是我们输入的内容，然后只给了经过变换之后的输入，所以就要逆变换，第一个是异或，第二个部分要注意取余，不确定数字范围是在128之内，还是128的一倍，所以就要试，这里我是判断，如果code[i]-i&lt;0,那么就给code[i]+128-i，代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">code = [<span class="string">&#x27;\x1f&#x27;</span>,<span class="string">&#x27;\x12&#x27;</span>,<span class="string">&#x27;\x1d&#x27;</span>,<span class="string">&#x27;(&#x27;</span>,<span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;\x01&#x27;</span>, <span class="string">&#x27;\x06&#x27;</span>, <span class="string">&#x27;\x14&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;,&#x27;</span>, <span class="string">&#x27;\x1b&#x27;</span>, <span class="string">&#x27;U&#x27;</span>, <span class="string">&#x27;?&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;*&#x27;</span>, <span class="string">&#x27;:&#x27;</span>, <span class="string">&#x27;\x01&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;;&#x27;</span>,<span class="string">&#x27;%&#x27;</span>, <span class="string">&#x27;\x13&#x27;</span>]</span><br><span class="line">l = <span class="built_in">len</span>(code)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(l-<span class="number">2</span>,-<span class="number">1</span>,-<span class="number">1</span>):</span><br><span class="line">    code[i] = <span class="built_in">chr</span>( <span class="built_in">ord</span>(code[i])^<span class="built_in">ord</span>(code[i+<span class="number">1</span>]) )</span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(l):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">ord</span>(code[i])-i&lt;<span class="number">0</span>:</span><br><span class="line">        x = <span class="built_in">ord</span>(code[i])+<span class="number">128</span> - i</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        x = <span class="built_in">ord</span>(code[i]) - i</span><br><span class="line">    flag+=<span class="built_in">chr</span>(x)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><h3 id="17-ACTF新生赛2020-easyre"><a href="#17-ACTF新生赛2020-easyre" class="headerlink" title="17.[ACTF新生赛2020]easyre"></a>17.[ACTF新生赛2020]easyre</h3><p>日常查壳，发现是upx壳，32位。和上面的第五题新年快乐差不多，手动脱壳我试了上面写的办法可以用，也可以自动脱壳，更快一些。</p><p>然后放到ida32查看，去看字符串，发现关键字符串，You are correct! ， 进去查看。而且上面还有一串字符串，这里会有一个坑，我当时没注意到，以为这个字符串就是看到的这个。</p><p><img src="image59.png" alt="image59"></p><p>然后就可以看到主函数，qmemcpy就是一个复制函数，把后面的字符串把某长度内复制给另一个。但是这个字符串我就看了挺久，当我把鼠标点这个字符串的时候显示char[15]，这个长度是15?但是v4的长度不是12吗，然后就开始猜测怎么回事，最后我看到了，\这个是用来转义的，看下一张图片</p><p><img src="image60.png" alt="image60"></p><p><img src="image58.png" alt="image58"></p><p>看第一个if，ASCII是ACTF{}，所以我猜测这段有可能和flag有关，在往下那个for循环，可以知道这是根据v4然后把v5，v6,v7,v8,v9,v10推出了（这几个加一起长度12），看_data_start_这个字符串，很坑，没看到上面的7Eh，</p><p><img src="image61.png" alt="image61"></p><p>之后就可以写代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">word = [<span class="string">&#x27;~&#x27;</span> , <span class="string">&#x27;&#125;&#x27;</span>, <span class="string">&#x27;|&#x27;</span>, <span class="string">&#x27;&#123;&#x27;</span>, <span class="string">&#x27;z&#x27;</span>, <span class="string">&#x27;y&#x27;</span>, <span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, <span class="string">&#x27;v&#x27;</span>, <span class="string">&#x27;u&#x27;</span>, <span class="string">&#x27;t&#x27;</span>, <span class="string">&#x27;s&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;q&#x27;</span>, <span class="string">&#x27;p&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;m&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;k&#x27;</span>, <span class="string">&#x27;j&#x27;</span>, <span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;f&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;`&#x27;</span>, <span class="string">&#x27;_&#x27;</span>, <span class="string">&#x27;^&#x27;</span>, <span class="string">&#x27;]&#x27;</span>, <span class="string">&#x27;\\&#x27;</span>, <span class="string">&#x27;[&#x27;</span>, <span class="string">&#x27;Z&#x27;</span>, <span class="string">&#x27;Y&#x27;</span>, <span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;W&#x27;</span>, <span class="string">&#x27;V&#x27;</span>, <span class="string">&#x27;U&#x27;</span>, <span class="string">&#x27;T&#x27;</span>, <span class="string">&#x27;S&#x27;</span>, <span class="string">&#x27;R&#x27;</span>, <span class="string">&#x27;Q&#x27;</span>, <span class="string">&#x27;P&#x27;</span>, <span class="string">&#x27;O&#x27;</span>, <span class="string">&#x27;N&#x27;</span>, <span class="string">&#x27;M&#x27;</span>, <span class="string">&#x27;L&#x27;</span>, <span class="string">&#x27;K&#x27;</span>, <span class="string">&#x27;J&#x27;</span>, <span class="string">&#x27;I&#x27;</span>, <span class="string">&#x27;H&#x27;</span>, <span class="string">&#x27;G&#x27;</span>, <span class="string">&#x27;F&#x27;</span>, <span class="string">&#x27;E&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;@&#x27;</span>, <span class="string">&#x27;?&#x27;</span>, <span class="string">&#x27;&gt;&#x27;</span>, <span class="string">&#x27;=&#x27;</span>, <span class="string">&#x27;&lt;&#x27;</span>, <span class="string">&#x27;;&#x27;</span>, <span class="string">&#x27;:&#x27;</span>, <span class="string">&#x27;9&#x27;</span>, <span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;/&#x27;</span>, <span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;-&#x27;</span>, <span class="string">&#x27;,&#x27;</span>, <span class="string">&#x27;+&#x27;</span>, <span class="string">&#x27;*&#x27;</span>, <span class="string">&#x27;)&#x27;</span>, <span class="string">&#x27;(&#x27;</span>, <span class="string">&quot;&#x27;&quot;</span>, <span class="string">&#x27;&amp;&#x27;</span>, <span class="string">&#x27;%&#x27;</span>, <span class="string">&#x27;$&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;!&#x27;</span>, <span class="string">&#x27;&quot;&#x27;</span>]</span><br><span class="line">key = [ <span class="string">&#x27;*&#x27;</span> , <span class="string">&#x27;F&#x27;</span> , <span class="string">&quot;&#x27;&quot;</span> ,<span class="string">&#x27;&quot;&#x27;</span>, <span class="string">&#x27;N&#x27;</span> , <span class="string">&#x27;,&#x27;</span>  , <span class="string">&#x27;&quot;&#x27;</span> , <span class="string">&#x27;(&#x27;</span> , <span class="string">&#x27;I&#x27;</span> ,<span class="string">&#x27;?&#x27;</span> , <span class="string">&#x27;+&#x27;</span> , <span class="string">&#x27;@&#x27;</span>]</span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(key)):</span><br><span class="line">    num = word.index(key[i])+<span class="number">1</span></span><br><span class="line">    flag+=<span class="built_in">chr</span>(num)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><h2 id="20230603"><a href="#20230603" class="headerlink" title="20230603"></a>20230603</h2><h3 id="18-findit"><a href="#18-findit" class="headerlink" title="18.findit"></a>18.findit</h3><p>把apk文件后缀改成zip，用Apktool_Box工具把classes.dex编译成jar文件，再用JavaDecomplier反编译打开，能找到如图代码。</p><p>找到了java代码，但是不好确实用来比较的字符串是什么，然后就看到了(EditText)findViewById(2131034174)，我看看能不能在这里下手。是在Android开发中的一个方法调用，它的目的是查找布局文件中ID为2131034174的EditText控件，并将其返回给调用者。然而我并没用找到关键信息。最终find不出来</p><p><img src="image62.png" alt="image "></p><p>然后用ApkIDE工具打开，在MainActivity那里有两串十六进制数字，因为上面找到了源码就想根据代码看看能不能敲出来，也就没有看字符串代表的什么。最后逻辑比较乱，没弄出来。看了网上的答案，先把那个字符串敲出来，然后能看猜出来是凯撒加密移动10位（真扯），在再看上面图片的关系还是不懂</p><p><img src="image63.png" alt="image63"></p><p>又搜了一些，有些明白了</p><p><img src="image64.png" alt="image64"></p><h2 id="20230604"><a href="#20230604" class="headerlink" title="20230604"></a>20230604</h2><h3 id="ACTF新生赛2020-rome"><a href="#ACTF新生赛2020-rome" class="headerlink" title="[ACTF新生赛2020]rome"></a>[ACTF新生赛2020]rome</h3><p>日常查壳，32位无壳。ida32查看，去字符串那里查看，发现You are correct!，进去查看，最后发现如下函数</p><p><img src="image65.png" alt="image65"></p><p><img src="image66.png" alt="image66"></p><p>上面那个if判断没多大用，不过内容是ACTF{}，也能看出来flag就是这个中间的内容(v7-v10)，然后看第一个while，就是字符串变换，但是那个v1我很疑惑，再看我就有一些清楚了，占的内存大小不同，int 占4位，而char是1位，所以在第一个while那里，v1的下标我还以为会超出范围，实际上并没有</p><p>第二个while是来判断变换后的v1和v12是否相等，看到这里就能知道flag是v1之前的内容，写如下代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">key = [<span class="string">&#x27;Q&#x27;</span>,<span class="string">&#x27;s&#x27;</span>,<span class="string">&#x27;w&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;s&#x27;</span>,<span class="string">&#x27;j&#x27;</span>,<span class="string">&#x27;_&#x27;</span>,<span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;z&#x27;</span>,<span class="string">&#x27;4&#x27;</span>,<span class="string">&#x27;_&#x27;</span>,<span class="string">&#x27;U&#x27;</span>,<span class="string">&#x27;j&#x27;</span>,<span class="string">&#x27;w&#x27;</span>,<span class="string">&#x27;@&#x27;</span>,<span class="string">&#x27;l&#x27;</span>]</span><br><span class="line">word1 = <span class="string">&#x27;abcdefghijklmnopqrstuvwxyz&#x27;</span></span><br><span class="line">word2 = <span class="string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZ&#x27;</span></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">ord</span>(key[i])&gt;<span class="number">64</span> <span class="keyword">and</span> <span class="built_in">ord</span>(key[i])&lt;=<span class="number">90</span>:</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> word2:</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">ord</span>(j)-<span class="number">51</span>)%<span class="number">26</span>+<span class="number">65</span> == <span class="built_in">ord</span>(key[i]):</span><br><span class="line">                flag+=j</span><br><span class="line">    <span class="keyword">elif</span> <span class="built_in">ord</span>(key[i])&gt;<span class="number">96</span> <span class="keyword">and</span> <span class="built_in">ord</span>(key[i])&lt;=<span class="number">122</span>:</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> word1:</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">ord</span>(j)-<span class="number">79</span>)%<span class="number">26</span>+<span class="number">97</span> == <span class="built_in">ord</span>(key[i]):</span><br><span class="line">                flag+=j</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        flag+=key[i]</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><h2 id="20230605"><a href="#20230605" class="headerlink" title="20230605"></a>20230605</h2><h3 id="rsa"><a href="#rsa" class="headerlink" title="rsa"></a>rsa</h3><p>打开压缩包是两个文件</p><p><img src="image67.png" alt="image67"></p><p>网上搜了一些资料之后明白，enc文件是加密之后的，而key文件里面有公钥信息，记事本打开key文件可以看到，我还以为是base64加密，显然没那么简单。之后看出来是我不会的题目，就看了其他人的的过程</p><p><img src="image68.png" alt="image68"></p><p>在这个<a href="http://tool.chacuo.net/cryptrsakeyparse">在线网站</a>这网站将上面的代码放进去，就可以得到如下，<strong>模数就是N，指数也就是公钥</strong>，之后就是N的分解，先把这个数改成10进制，然后用这个<a href="http://www.factordb.com/index.php">工具网站</a>转换</p><p><img src="image69.png" alt="image69"></p><p>可以得到p,q</p><p><img src="image70.png" alt="image70"></p><p>下面就是用已知的N，E，p,q来求出私钥，然后再解密</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> rsa</span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">n = <span class="number">86934482296048119190666062003494800588905656017203025617216654058378322103517</span></span><br><span class="line">p = <span class="number">285960468890451637935629440372639283459</span></span><br><span class="line">q = <span class="number">304008741604601924494328155975272418463</span></span><br><span class="line"></span><br><span class="line">phin = (q-<span class="number">1</span>)*(p-<span class="number">1</span>)</span><br><span class="line">d = gmpy2.invert(e, phin)<span class="comment">#私钥</span></span><br><span class="line"></span><br><span class="line">key = rsa.PrivateKey(n, e, <span class="built_in">int</span>(d), p, q)<span class="comment">#这个key里面包含了很多，N,e,p,q,d都有</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;flag.enc&quot;</span>, <span class="string">&quot;rb+&quot;</span>) <span class="keyword">as</span> f:<span class="comment">#打开那个被加密的文件</span></span><br><span class="line">    f = f.read()<span class="comment">#读取</span></span><br><span class="line">    <span class="built_in">print</span>(rsa.decrypt(f, key))</span><br></pre></td></tr></table></figure><p>结果如下</p><p><img src="image71.png" alt="image71"></p><h2 id="20230606"><a href="#20230606" class="headerlink" title="20230606"></a>20230606</h2><h3 id="FlareOn4-login"><a href="#FlareOn4-login" class="headerlink" title="[FlareOn4]login"></a>[FlareOn4]login</h3><p>打开压缩包，txt文件里面没多大用，打开html文件，让你输入flag，随便输入一个，显示错误。Ctrl+u查看源代码，</p><p><img src="image72.png" alt="image72"></p><p><img src="image73.png" alt="image73"></p><p>先把你输入的flag经过变换，搜了一下就是Rot13，再和下面的字符串比较，所以我直接用rot13解，就出来了</p><h2 id="20230607"><a href="#20230607" class="headerlink" title="20230607"></a>20230607</h2><h3 id="CrackRTF"><a href="#CrackRTF" class="headerlink" title="CrackRTF"></a>CrackRTF</h3><p>日常查壳，32位无壳，ida32打开，找到关键函数，sub_40100A这个函数就是对v8的操作，进去查看</p><p><img src="image74.png" alt="image74"></p><p>这里能看出来是Hash函数，但是不清楚是哪种类型，网上搜了，看CryptCreateHash()函数里面的32772转成16进制0x8004，查看<a href="https://learn.microsoft.com/en-us/windows/win32/seccrypto/alg-id">官方文档</a>可知，</p><p><img src="image75.png" alt="image75"></p><p>如图可知是SHA1系列</p><p><img src="image76.png" alt="image76"></p><p>代码如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line">dict1 = <span class="string">&#x27;123456789&#x27;</span></span><br><span class="line">dict2 = <span class="string">&#x27;0123456789&#x27;</span></span><br><span class="line">md5Know = <span class="string">&#x27;6e32d0943418c2c33385bc35a1470250dd8923a9&#x27;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hash1</span>(<span class="params">text</span>):</span><br><span class="line">    <span class="keyword">return</span> hashlib.sha1(<span class="built_in">str</span>(text).encode(<span class="string">&#x27;utf-8&#x27;</span>)).hexdigest()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> dict1:</span><br><span class="line">  <span class="keyword">for</span> j <span class="keyword">in</span> dict2:</span><br><span class="line">      <span class="keyword">for</span> k <span class="keyword">in</span> dict2:</span><br><span class="line">          <span class="keyword">for</span> l <span class="keyword">in</span> dict2:</span><br><span class="line">              <span class="keyword">for</span> m <span class="keyword">in</span> dict2:</span><br><span class="line">                  <span class="keyword">for</span> n <span class="keyword">in</span> dict2:</span><br><span class="line">                      x = i + k + j + l + m + n + <span class="string">&#x27;@DBApp&#x27;</span></span><br><span class="line">                      codeHash1 = hash1(x)</span><br><span class="line">                      <span class="keyword">if</span> codeHash1 == md5Know:</span><br><span class="line">                            <span class="built_in">print</span>(x)</span><br></pre></td></tr></table></figure><p>可以得到 v9&#x3D;123321@DBApp，那么输入的就是123321</p><p>然后分析可得另一个关键函数是sub_401019()，同理32771&#x3D; 0x8003查阅可知是MD5加密，这次没用代码，因为v6的输入只有长度限制没有内容限制，<a href="https://www.somd5.com/">MD5在线</a>，解出来~!3a@0123321@DBApp</p><p><img src="image77.png" alt="image77"></p><p>输入这两次密码之后会在同一个文件夹下生成一个rtf文件，打开就有了flag</p><h2 id="20230608"><a href="#20230608" class="headerlink" title="20230608"></a>20230608</h2><h3 id="WUSTCTF2020-level1"><a href="#WUSTCTF2020-level1" class="headerlink" title="WUSTCTF2020]level1"></a>WUSTCTF2020]level1</h3><p>打开压缩包，一个txt文件，里面有19行数字，另一个不知道什么文件</p><p>查一下壳，64位，直接放到ida64里面，先看了字符串没有特殊的字符串，然后我就看了main函数，</p><p><img src="image78.png" alt="image78"></p><p>可以看出来打开了一个flag文件，存到了ptr里面，这个应该就是需要的flag。然后下面的for循环可以看出来是对字符的操作，源码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">key = [<span class="number">198</span>,<span class="number">232</span>,<span class="number">816</span>,<span class="number">200</span>,<span class="number">1536</span>,<span class="number">300</span>,<span class="number">6144</span>,<span class="number">984</span>,<span class="number">51200</span>,<span class="number">570</span>,<span class="number">92160</span>,<span class="number">1200</span>,<span class="number">565248</span>,<span class="number">756</span>,<span class="number">1474560</span>,<span class="number">800</span>,<span class="number">6291456</span>,<span class="number">1782</span>,<span class="number">65536000</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">19</span>):</span><br><span class="line">    <span class="keyword">if</span> (i+<span class="number">1</span>)&amp;<span class="number">1</span> != <span class="number">0</span>:</span><br><span class="line">        num = key[i]&gt;&gt;(i+<span class="number">1</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">chr</span>(num),end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        num = key[i]//(i+<span class="number">1</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">chr</span>(num),end=<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure><p>正解</p><h2 id="20230609"><a href="#20230609" class="headerlink" title="20230609"></a>20230609</h2><h3 id="GUET-CTF2019-re"><a href="#GUET-CTF2019-re" class="headerlink" title="[GUET-CTF2019]re"></a>[GUET-CTF2019]re</h3><p>日常查壳，64位，upx的壳，这里用UPX_UI解压，x64dbg打不开。</p><p>之后放到ida64查看，先看字符串，第一行就是input your flag:直接进去查看</p><p>可以看到关键是那个sub_4009AE进去查看，就是很多判断，转化</p><p><img src="image79.png" alt="image79"></p><p>转化出来，不过少了一个，还有16，17顺序调换了，看了网上的[6]爆破 1</p><p><img src="image80.png" alt="image80"></p><h2 id="20230610"><a href="#20230610" class="headerlink" title="20230610"></a>20230610</h2><p>sub_411221—–</p><p>~sub_413CC8</p><p>sub_13C80,</p><p><img src="image81.png" alt="image81"></p><h2 id="20230630"><a href="#20230630" class="headerlink" title="20230630"></a>20230630</h2><p>期末考试了</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>deepLearning</title>
      <link href="/2023/05/14/deepLearning/"/>
      <url>/2023/05/14/deepLearning/</url>
      
        <content type="html"><![CDATA[<h1 id="01-神经网络和深度学习"><a href="#01-神经网络和深度学习" class="headerlink" title="01.神经网络和深度学习"></a>01.神经网络和深度学习</h1><h2 id="神经网络基础"><a href="#神经网络基础" class="headerlink" title="神经网络基础"></a>神经网络基础</h2><img src="image3.png" alt="image3" style="zoom:50%;"><img src="image4.png" alt="image4" style="zoom:50%;"><p><img src="image1.png" alt="image1"></p><img src="image5.png" alt="image5" style="zoom:50%;"><img src="image6.png" alt="image6" style="zoom:50%;"><p><img src="image2.png" alt="image2"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>现代密码学</title>
      <link href="/2023/05/12/%E7%8E%B0%E4%BB%A3%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
      <url>/2023/05/12/%E7%8E%B0%E4%BB%A3%E5%AF%86%E7%A0%81%E5%AD%A6/</url>
      
        <content type="html"><![CDATA[<h1 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h1><p><strong>被动攻击</strong>：抗击被动攻击重点在于预防而非检测</p><p>获取消息内容：</p><p>进行业务流分析：敌手无法获得消息的真实内容，但是获得了消息的格式，通信双方的位置和身份等。比如获取我们和谁电子邮箱通信，和谁交易</p><p><strong>主动攻击</strong>分为以下三类</p><p>中断：破坏计算机硬件。网络或文件管理系统</p><p>篡改：修改数据文件的数据、替换某一程序使其执行不同的功能、修改网络中传递的消息内容</p><p>伪造：在网络中插入伪造的消息或在文件中插入伪造的记录</p><p><strong>恶意程序：</strong></p><p>需主程序（是某个程序中的一段，不能独立于实际的应用程序或系统程序）：陷门、逻辑炸弹，特洛伊木马、病毒</p><p>不需主程序：细菌、蠕虫</p><p><strong>单向陷门函数（Trapdoor One-way Function）：</strong></p><p>正向计算很容易，但是反向计算就会困难，满足这两条的为单向函数</p><p>在知道密钥sk的情况下，计算是容易的，陷门性，密钥sk为陷门信息</p><p><strong>逻辑炸弹</strong> ：</p><p>  逻辑炸弹是在满足<strong>特定逻辑条件</strong>时能改变运行方式，对目标计算机系统实施破坏的计算机程序。这种程序通常隐藏在具有正常功能的程序中，在不具备触发条件的情况下，逻辑炸弹深藏不露，系统运行情况良好，用户也察觉不到任何异常。但是，一旦触发条件得到满足，逻辑炸弹就会“爆炸”，造成对目标系统的硬件破坏、文件破坏、数据破坏、信息渗漏及系统瘫痪等严重后果。逻辑炸弹的触发方式非常多，如事件触发、时间触发、计数器触发等。</p><p>  逻辑炸弹程序不但可以设置在<strong>计算机的软件</strong>中，也可以暗藏在<strong>计算机的固件</strong>中。逻辑炸弹不具传染性，不能自我复制，但触发逻辑炸弹发作的诱因可以存在于逻辑炸弹载体的各个环节，具有不可控制的意外性。</p><p><strong>特洛伊木马</strong>：</p><p>可伪装成合法程序下载到计算机上。这种传播方式通常是攻击者利用社交工程将恶意代码隐藏在合法软件中，试图用其软件获得用户的系统访问权限。它的特点是<strong>能与外界通信</strong></p><p><strong>病毒</strong></p><p>破坏计算机功能或数据，以<strong>破坏为主</strong>，传染其他程序的方式是通过修改其他程序来把自身或其变种复制进去完成的，典型的熊猫烧香</p><p><strong>蠕虫：</strong></p><p>通过网络的通信功能将自身从一个结点发送到另一个结点并启动运行的程序，典型的应用于<strong>耗尽对方的计算机资源</strong></p><p><strong>安全的网络通信必须考虑下面4个方面：</strong></p><p>1.加密算法</p><p>2.用于加密算法的秘密信息、</p><p>3.秘密信息的分布和共享</p><p>4.使用加密算法和秘密信息以获得安全服务所需的协议</p><p><strong>所使用的密码算法包括5个方面：</strong></p><p>(1) 加密算法E<del>k</del>(m)</p><p>(2) 解密算法D<del>k</del>(c)</p><p>(3) 明文空间 <em>M</em></p><p>(4) 密文空间 <em>C</em></p><p>(5) 密钥空间 <em>K</em></p><p><strong>凯撒密码</strong>：</p><p><img src="image1.png" alt="image1"></p><p><strong>移位变换</strong></p><p>c &#x3D; E<del>k</del>(m)  &#x3D; m+k(mod 26)</p><p>m &#x3D; D<del>k</del>(c)  &#x3D; c-k(mod 26)</p><p><strong>仿射变换</strong></p><p>有一个求逆元的</p><p><img src="image3.jpg" alt="image3"></p><p><strong>多表代换密码</strong></p><p>求逆</p><p><img src="image2.jpg" alt="image2"></p><h1 id="第二章"><a href="#第二章" class="headerlink" title="第二章"></a>第二章</h1><p><strong>流密码：</strong></p><p><img src="image4" alt="image4"></p><p>有限状态自动机</p><p><img src="image5.png" alt="image5"></p><p><strong>密钥流产生器：</strong><br>函数 φ 状态转移，当前状态变成另一状态</p><p>函数 ψ 输出函数，某状态的输出值</p><p>采用线性的φ 和非线性的 ψ</p><p><strong>线性反馈移位寄存器</strong></p><p>优先级：</p><p>异或 &gt; 与 &gt; 或</p><p><strong>m序列密码的破译</strong></p><p><img src="image6.jpg" alt="image6"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>计算机组成原理</title>
      <link href="/2023/05/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/"/>
      <url>/2023/05/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="第二章"><a href="#第二章" class="headerlink" title="第二章"></a>第二章</h1><p>位，字节，字：</p><p><strong>解释：</strong></p><p>位&#x3D;比特&#x3D;bit   ： 信息的最小单位，等于0或1</p><p>字节 &#x3D; byte    ：可以表示一个英文字母，数字或者符号</p><p>字 &#x3D; word ： <u>描述计算机一次性处理事务的固定长度</u></p><p><strong>说明：</strong></p><p>1 byte &#x3D; 8 bit   大小相当于2^8 &#x3D;256</p><p><u>在说字长和字之前，需要说明在多少位操作系统的环境下</u></p><p>1 word &#x3D; 16 bit[16位操作系统下]</p><h2 id="数据格式"><a href="#数据格式" class="headerlink" title="数据格式"></a>数据格式</h2><h3 id="移码表示"><a href="#移码表示" class="headerlink" title="移码表示"></a>移码表示</h3><p>通常用于表示浮点数的阶码</p><p>移码和补码的符号位相反</p><p><strong>表示的范围</strong>：8位移码 00000000-11111111</p><h4 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h4><p>1.可以直观的判断两个数据大小</p><p>2.阶码全为0时，浮点数下溢</p><p><img src="image1.png" alt="image1"></p><h3 id="浮点数表示："><a href="#浮点数表示：" class="headerlink" title="浮点数表示："></a>浮点数表示：</h3><p>一般表示形式</p><p><img src="image2.png" alt="image2"></p><h1 id="第五章CPU"><a href="#第五章CPU" class="headerlink" title="第五章CPU"></a>第五章CPU</h1><p><img src="image3.png" alt="image3"></p><h2 id="5-1CPU的功能和组成"><a href="#5-1CPU的功能和组成" class="headerlink" title="5.1CPU的功能和组成"></a>5.1CPU的功能和组成</h2><h3 id="主要寄存器"><a href="#主要寄存器" class="headerlink" title="主要寄存器"></a>主要寄存器</h3><h4 id="1-DR（数据缓冲寄存器）"><a href="#1-DR（数据缓冲寄存器）" class="headerlink" title="1.DR（数据缓冲寄存器）"></a>1.DR（数据缓冲寄存器）</h4><p>暂时存放运算器与外界传送的数据</p><h4 id="2-通用寄存器"><a href="#2-通用寄存器" class="headerlink" title="2.通用寄存器"></a>2.通用寄存器</h4><p>暂时存放ALU运算的数据或结果</p><h4 id="3-PSW（状态条件寄存器）"><a href="#3-PSW（状态条件寄存器）" class="headerlink" title="3.PSW（状态条件寄存器）"></a>3.PSW（状态条件寄存器）</h4><p>C：进位标志</p><p>V：溢出标志</p><p>Z：零标志</p><p>W：符号标志</p><h4 id="4-AR（数据地址寄存器）"><a href="#4-AR（数据地址寄存器）" class="headerlink" title="4.AR（数据地址寄存器）"></a>4.AR（数据地址寄存器）</h4><p>保存当前CPU所访问数据的内存单元地址</p><h4 id="5-PC（程序计数器）"><a href="#5-PC（程序计数器）" class="headerlink" title="5.PC（程序计数器）"></a>5.PC（程序计数器）</h4><p>始终存放下一条指令的地址，对应于指令Cache的访问</p><h4 id="6-IR（指令寄存器）"><a href="#6-IR（指令寄存器）" class="headerlink" title="6.IR（指令寄存器）"></a>6.IR（指令寄存器）</h4><p>保存当前正在执行的一条指令</p><p>其对应的操作码字段直接作为指令译码器的输入</p><h3 id="操作控制器与时序产生器"><a href="#操作控制器与时序产生器" class="headerlink" title="操作控制器与时序产生器"></a>操作控制器与时序产生器</h3><p><strong>数据通路</strong>：两个部件之间传送信息的通路</p><h4 id="操作控制器"><a href="#操作控制器" class="headerlink" title="操作控制器"></a>操作控制器</h4><p>根据指令操作码和时序信号，产生各种操作控制信号；</p><p>建立正确的数据通路，从而完成指令的执行</p><h4 id="分类（根据设计方法）"><a href="#分类（根据设计方法）" class="headerlink" title="分类（根据设计方法）"></a>分类（根据设计方法）</h4><p>1.硬布线控制器：采用时序逻辑技术实现</p><p>2.微程序控制器：采用存储逻辑实现</p><p>3.两种方式的结合</p><h2 id="5-2指令周期"><a href="#5-2指令周期" class="headerlink" title="5.2指令周期"></a>5.2指令周期</h2><h3 id="指令周期的基本概念"><a href="#指令周期的基本概念" class="headerlink" title="指令周期的基本概念"></a>指令周期的基本概念</h3><p>CPU执行程序是一个“取指令—执行指令” 的循环过程</p><p>对于一个指令周期来说，我们取出一条指令，然后执行它，至少需要两个 CPU 周期。取出指令至少需要一个 CPU 周期，执行至少也需要一个 CPU 周期，复杂的指令则需要更多的 CPU 周期。</p><h4 id="指令周期"><a href="#指令周期" class="headerlink" title="指令周期"></a>指令周期</h4><p>CPU从内存中取出一条指令，并执行完毕的时间总和</p><h4 id="CPU周期"><a href="#CPU周期" class="headerlink" title="CPU周期"></a>CPU周期</h4><p>又称为机器周期，一般为从内存读取一条指令字的最短时间</p><p>一条指令执行过程被划分为若干阶段（比如取指、译码、执行等），每一阶段完成所需时间。一般情况下一个CPU周期是若干时钟周期之和。</p><h4 id="时钟周期"><a href="#时钟周期" class="headerlink" title="时钟周期"></a>时钟周期</h4><p>也叫做节拍脉冲或T周期，是计算机工作的基本时间单位</p><h4 id="MOV-R0-R1-指令的指令周期"><a href="#MOV-R0-R1-指令的指令周期" class="headerlink" title="MOV R0,R1 指令的指令周期"></a>MOV R0,R1 指令的指令周期</h4><p>它需要两个CPU周期</p><h5 id="取指周期"><a href="#取指周期" class="headerlink" title="取指周期"></a>取指周期</h5><p>1.PC–&gt;ABUS(地址总线)–&gt;指令Cache，译码并启动   <strong>PC读，指令Cache启动</strong></p><p>2.指令Cache–&gt;IR    <strong>指令Cache读，IR写</strong></p><p>3.PC+1–&gt;PC，为下条指令做准备  <strong>PC增加</strong></p><p>4.IR中的操作码被译码或测试，CPU识别出是指令MOV</p><h5 id="执行指令周期"><a href="#执行指令周期" class="headerlink" title="执行指令周期"></a>执行指令周期</h5><p>1.R1–&gt;ALU ，R1中数据通过ALU传送    <strong>R1读，ALU传送控制</strong></p><p>2.ALU–&gt;DBUS（<strong>地址总线</strong>）–&gt;DR–&gt;R0  <strong>ALU输出，DR锁存，R0写</strong></p><h4 id="LAD-R1-6-指令周期"><a href="#LAD-R1-6-指令周期" class="headerlink" title="LAD R1,6 指令周期"></a>LAD R1,6 指令周期</h4><h5 id="取指周期-1"><a href="#取指周期-1" class="headerlink" title="取指周期"></a>取指周期</h5><p>与MOV一致</p><h5 id="执行周期"><a href="#执行周期" class="headerlink" title="执行周期"></a>执行周期</h5><p>IR–&gt;DBUS–&gt;AR  I<strong>R读，AR锁存</strong></p><p>AR–&gt;ABUS–&gt;数据Cache，译码并启动    <strong>数据Cache启动</strong></p><p>数据Cache –&gt;DBUS–&gt;DR–&gt;R1  <strong>数据Cache读，DR锁存，R1写</strong></p><p>  执行周期需要两个CPU周期的原因：源操作数的地址和源操作数都需要经过DBUS传送</p><h4 id="ADD-R1-R2指令周期"><a href="#ADD-R1-R2指令周期" class="headerlink" title="ADD R1,R2指令周期"></a>ADD R1,R2指令周期</h4><h5 id="取指周期-2"><a href="#取指周期-2" class="headerlink" title="取指周期"></a>取指周期</h5><p>同MOV</p><h5 id="执行周期-1"><a href="#执行周期-1" class="headerlink" title="执行周期"></a>执行周期</h5><p>R1、R2 –&gt; ALU  <strong>R1,R2读</strong></p><p>ALU做加运算，将两数相加  <strong>ALU加</strong></p><p>ALU –&gt;DBUS –&gt;DR –&gt;R2 <strong>ALU输出，DR锁存，R2写</strong></p><h4 id="STO-R2-R3-指令周期"><a href="#STO-R2-R3-指令周期" class="headerlink" title="STO R2 ,(R3)指令周期"></a>STO R2 ,(R3)指令周期</h4><h5 id="取指周期-3"><a href="#取指周期-3" class="headerlink" title="取指周期"></a>取指周期</h5><p>同MOV</p><h5 id="执行周期-2"><a href="#执行周期-2" class="headerlink" title="执行周期"></a>执行周期</h5><p>R3 –&gt;DBUS–&gt;AR 发出地址启动数据Cache <strong>R3读，AR锁存</strong></p><p>   该过程为间址周期</p><p>R2 –&gt; DBUS –&gt;数据Cache <strong>R2读，数据Cache写</strong></p><h4 id="方框语言表示指令周期"><a href="#方框语言表示指令周期" class="headerlink" title="方框语言表示指令周期"></a>方框语言表示指令周期</h4><p>1.方框</p><p>代表一个CPU周期</p><p>2.菱形</p><p>通常用来表示某种判别或测试</p><p>3.~</p><p>表示一条指令已经执行完毕，转入公操作</p><p><img src="image4.png" alt="image4"></p><h2 id="5-3时序产生器和控制方式"><a href="#5-3时序产生器和控制方式" class="headerlink" title="5.3时序产生器和控制方式"></a>5.3时序产生器和控制方式</h2><h2 id="5-4微程序控制器"><a href="#5-4微程序控制器" class="headerlink" title="5.4微程序控制器"></a>5.4微程序控制器</h2><h3 id="微程序控制原理"><a href="#微程序控制原理" class="headerlink" title="微程序控制原理"></a>微程序控制原理</h3><h4 id="利用软件方法来设计硬件"><a href="#利用软件方法来设计硬件" class="headerlink" title="利用软件方法来设计硬件"></a>利用软件方法来设计硬件</h4><p>规整性、灵活性、可维护性等特点</p><p>广泛使用</p><h4 id="基本思想"><a href="#基本思想" class="headerlink" title="基本思想"></a>基本思想</h4><p>把操作控制信号编成“微指令”</p><h4 id="微操作分类"><a href="#微操作分类" class="headerlink" title="微操作分类"></a>微操作分类</h4><p>相容性微操作：同时或者在同一个CPU周期可以并行执行的微操作</p><p>相斥性微操作：上面反之          </p><h4 id="微指令和微程序"><a href="#微指令和微程序" class="headerlink" title="微指令和微程序"></a>微指令和微程序</h4><p><strong>微指令</strong>一般包含操作控制和顺序控制</p><p>  <strong>操作控制</strong>：用于发出管理和指挥全机工作的控制信号</p><p>  <strong>顺序控制</strong>：用于决定产生下一条微指令的地址</p><p>所有的微指令都存放于控制存储器中，使用<strong>地址</strong>访问</p><p>微程序：</p><p>  能够实现一条机器指令功能的多条微指令序列</p><p>  每条机器指令都对应着一段微程序</p><h4 id="微程序控制器原理框图"><a href="#微程序控制器原理框图" class="headerlink" title="微程序控制器原理框图"></a>微程序控制器原理框图</h4><p><strong>控制存储器（CM</strong>）：存放实现指令系统所需要的全部微指令 —–<strong>主存储器（MM）</strong></p><p><strong>微指令寄存器：</strong>存放当前正在执行的一条微指令，由微地址寄存器和微命令寄存器构成</p><p>​微地址寄存器：决定要访问的下一条微指令的地址</p><p>​微命令寄存器：保存一条微指令的操作控制字段和判别测试字段的信息</p><p><strong>地址转移逻辑：</strong> 跳跃寻址微指令时，负责微地址的修改</p><p>​</p><h3 id="微程序设计技术"><a href="#微程序设计技术" class="headerlink" title="微程序设计技术"></a>微程序设计技术</h3><h4 id="微命令编码"><a href="#微命令编码" class="headerlink" title="微命令编码"></a>微命令编码</h4><h5 id="直接表示法："><a href="#直接表示法：" class="headerlink" title="直接表示法："></a>直接表示法：</h5><p>操作控制字段中每一位代表一个微命令，</p><p>简单直观，执行快</p><p>容量较大</p><h5 id="编码表示法："><a href="#编码表示法：" class="headerlink" title="编码表示法："></a>编码表示法：</h5><p>将微指令操作控制字段划分为若干个子字段，每个子字段的所有微指令进行统一编码，每个子字段的不同编码表示不同的微命令</p><p><strong>遵循原则</strong> ：相斥的微命令划分在同一个字段，每个子字段应该留出一个<strong>空操作状态</strong>，每个子字段所定义的微指令不宜太多</p><h4 id="微地址的形成方法"><a href="#微地址的形成方法" class="headerlink" title="微地址的形成方法"></a>微地址的形成方法</h4><p><strong>微程序的入口地址：</strong></p><p>  微程序的第一条微指令所在控存单元的地址；</p><p>​      机器执行周期的第一条微指令</p><p><strong>现行微指令</strong> ：正在执行的微指令，因此地址叫做现行微地址</p><p><strong>后继微指令</strong> ：下一条要执行的微指令</p><h4 id="微指令格式"><a href="#微指令格式" class="headerlink" title="微指令格式"></a>微指令格式</h4><p>​                                                                                                                                                                                                                                                                                              </p><h2 id="5-5硬连线控制器"><a href="#5-5硬连线控制器" class="headerlink" title="5.5硬连线控制器"></a>5.5硬连线控制器</h2><p>硬布线控制器是由门电路和触发器构成的复杂树形网络，<strong>速度比微程序快</strong>，但是一旦构成，<strong>无法增加新的控制功能</strong></p><h3 id="微命令和微操作"><a href="#微命令和微操作" class="headerlink" title="微命令和微操作"></a>微命令和微操作</h3><h4 id="控制部件和执行部件的联系"><a href="#控制部件和执行部件的联系" class="headerlink" title="控制部件和执行部件的联系"></a>控制部件和执行部件的联系</h4><p>控制部件向执行部件发出控制信号；</p><p>执行部件向控制部件返回状态信息</p><h4 id="微命令"><a href="#微命令" class="headerlink" title="微命令"></a>微命令</h4><p>控制部件通过控制线向执行部件发出的各种控制命令</p><h4 id="微操作"><a href="#微操作" class="headerlink" title="微操作"></a>微操作</h4><p>执行部件接受微命令后所执行的操作</p><h4 id="状态测试"><a href="#状态测试" class="headerlink" title="状态测试"></a>状态测试</h4><p>执行部件通过反馈线向控制部件反映当前操作状态，以使控制部件决定下一步的微命令</p><p><img src="%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%5Cimage5.png" alt="image5"></p><h2 id="5-6流水CPU"><a href="#5-6流水CPU" class="headerlink" title="5.6流水CPU"></a>5.6流水CPU</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>blog</title>
      <link href="/2023/05/07/Blog/"/>
      <url>/2023/05/07/Blog/</url>
      
        <content type="html"><![CDATA[<h1 id="debug"><a href="#debug" class="headerlink" title="debug"></a>debug</h1><h2 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h2><p>博客图片无法显示</p><p>方法如下：</p><p>1.根目录下打开 <strong>git bash here</strong></p><p>2.输入命令：<strong>npm install hexo-asset-image –save</strong></p><p>3.在博客的根目录下找：<strong>node_modules<code>--&gt;</code>hexo-asset-image<code>--&gt;</code>index.js</strong></p><p>在第55行把如下代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="variable language_">this</span>).<span class="title function_">attr</span>(<span class="string">&#x27;src&#x27;</span>, config.<span class="property">root</span> + link + src);</span><br></pre></td></tr></table></figure><p>修改成</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="variable language_">this</span>).<span class="title function_">attr</span>(<span class="string">&#x27;src&#x27;</span>, src);</span><br></pre></td></tr></table></figure><p>然后保存</p><p>4.把_config.yml中的post_asset_folder: false   改成  post_asset_folder: true</p><p>当你创建一个md文件时，会自动生成一个与你的文章同名的文件夹，可以用来存放图片</p><p>5.图片地址的表示</p><p><img src="image4.png" alt="image4"></p><p>[]里面的是图片的描述，加载不出来的时候会显示这个</p><p>后面()里面的是地址，图片是放在同名的文件夹下的，直接就是图片名字，没有加其他的地址</p><p>当然也可以加上地址（我更习惯加上地址，不加的话Typora不能预览）</p><p><img src="image5.png" alt="image5"></p><h2 id="hexo-d部署错误"><a href="#hexo-d部署错误" class="headerlink" title="hexo d部署错误"></a>hexo d部署错误</h2><p><img src="image-20231103154219793.png" alt="image-20231103154219793"></p><ul><li>原因分析:</li></ul><p>　其实出现这个问题，很大可能是因为https和http的proxy的对应的分别是https和http开proxy server，而https的proxy server可能无法正常工作。一个work around是把https的proxy server换成http的proxy server:</p><p>  修改_config.yml文件的deploy部分，将https 修改为http url 或者 设置为git url, 配置为https oauth2 加token</p><ul><li>设置为git url(推荐)</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">    type: git</span><br><span class="line">    repo: git@github.com:your_github_id/your_github_id.github.io.git</span><br><span class="line">    branch: main</span><br></pre></td></tr></table></figure><h1 id="完善博客"><a href="#完善博客" class="headerlink" title="完善博客"></a>完善博客</h1><h2 id="添加评论（valien）"><a href="#添加评论（valien）" class="headerlink" title="添加评论（valien）"></a>添加评论（valien）</h2><p>1.创建<a href="https://www.leancloud.cn/">LeanCloud</a>账号，用国内版的，但是你的域名要备案，如果没有备案的话下面就不用看了，原本国际版是可以用的但是现在好像不能了。</p><p>2.创建应用，随便输入名称</p><p><img src="image1.png" alt="image1"></p><p>3.点击设置，在应用凭证那里有AppID 和 AppKey 复制下来留着用</p><p>4.更改配置，在_config.butterfly.yml文件里找到comments修改</p><p><img src="image2.png" alt="image2"></p><p>然后再在该文件下找valine，修改</p><p><img src="image3.png" alt="image3"></p><p>之后再hexo三部曲。</p><p>最后，我自己没弄好评论，我的域名没有备案，我原本是想用leanCloud的国际版的，但是也不行，搜了发现国际版不支持了。so就先这样</p><h2 id="加载动画"><a href="#加载动画" class="headerlink" title="加载动画"></a>加载动画</h2><p><a href="https://akilar.top/posts/3d221bf2/">教程地址</a></p><p>1.修改**<code>[Blogroot]\themes\butterfly\layout\includes\loading\loading.pug</code>，** 下面有很多样式可以选择，我用的是wizard，下面主要是wizard的使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">if theme.preloader.enable</span><br><span class="line">  case theme.preloader.load_style    </span><br><span class="line">    when &#x27;gear&#x27;</span><br><span class="line">      include ./load_style/gear.pug</span><br><span class="line">    when &#x27;ironheart&#x27;</span><br><span class="line">      include ./load_style/ironheart.pug</span><br><span class="line">    when &#x27;scarecrow&#x27;</span><br><span class="line">      include ./load_style/scarecrow.pug</span><br><span class="line">    when &#x27;triangles&#x27;</span><br><span class="line">      include ./load_style/triangles.pug</span><br><span class="line">    when &#x27;wizard&#x27;</span><br><span class="line">      include ./load_style/wizard.pug</span><br><span class="line">    when &#x27;image&#x27;</span><br><span class="line">      include ./load_style/image.pug</span><br><span class="line">    default</span><br><span class="line">      include ./load_style/default.pug</span><br></pre></td></tr></table></figure><p>2.新建动画结构模板存放的文件夹在[Blogroot]\themes\butterfly\layout\includes\loading\load_style\目录下</p><p>新建<code>[Blogroot]\themes\butterfly\layout\includes\loading\load_style\wizard.pug</code>,巫师施法加载动画。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">#loading-box</span><br><span class="line">  .loading-left-bg</span><br><span class="line">  .loading-right-bg</span><br><span class="line">  .wizard-scene</span><br><span class="line">    .wizard-objects</span><br><span class="line">      .wizard-square</span><br><span class="line">      .wizard-circle</span><br><span class="line">      .wizard-triangle</span><br><span class="line">    .wizard</span><br><span class="line">      .wizard-body</span><br><span class="line">      .wizard-right-arm</span><br><span class="line">        .wizard-right-hand</span><br><span class="line">      .wizard-left-arm</span><br><span class="line">        .wizard-left-hand</span><br><span class="line">      .wizard-head</span><br><span class="line">        .wizard-beard</span><br><span class="line">        .wizard-face</span><br><span class="line">          .wizard-adds</span><br><span class="line">        .wizard-hat</span><br><span class="line">          .wizard-hat-of-the-hat</span><br><span class="line">          .wizard-four-point-star.--first</span><br><span class="line">          .wizard-four-point-star.--second</span><br><span class="line">          .wizard-four-point-star.--third</span><br></pre></td></tr></table></figure><p>3.修改<code>[Blogroot]\themes\butterfly\source\css\_layout\loading.styl</code>，复制以下代码替换全部内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">if hexo-config(&#x27;preloader.enable&#x27;)</span><br><span class="line">  if hexo-config(&#x27;preloader.load_style&#x27;) == &#x27;gear&#x27;</span><br><span class="line">    @import &#x27;./_load_style/gear&#x27;</span><br><span class="line">  else if hexo-config(&#x27;preloader.load_style&#x27;) == &#x27;ironheart&#x27;</span><br><span class="line">    @import &#x27;./_load_style/ironheart&#x27;</span><br><span class="line">  else if hexo-config(&#x27;preloader.load_style&#x27;) == &#x27;scarecrow&#x27;</span><br><span class="line">    @import &#x27;./_load_style/scarecrow&#x27;</span><br><span class="line">  else if hexo-config(&#x27;preloader.load_style&#x27;) == &#x27;triangles&#x27;</span><br><span class="line">    @import &#x27;./_load_style/triangles&#x27;</span><br><span class="line">  else if hexo-config(&#x27;preloader.load_style&#x27;) == &#x27;wizard&#x27;</span><br><span class="line">    @import &#x27;./_load_style/wizard&#x27;</span><br><span class="line">  else if hexo-config(&#x27;preloader.load_style&#x27;) == &#x27;image&#x27;</span><br><span class="line">    @import &#x27;./_load_style/image&#x27;</span><br><span class="line">  else</span><br><span class="line">    @import &#x27;./_load_style/default&#x27;</span><br></pre></td></tr></table></figure><p>4.新建动画样式模板存放的文件夹，如无特别提示，所有动画样式均存放在<code>[Blogroot]\themes\butterfly\source\css\_load_style\</code>目录下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br><span class="line">819</span><br><span class="line">820</span><br><span class="line">821</span><br><span class="line">822</span><br><span class="line">823</span><br><span class="line">824</span><br><span class="line">825</span><br><span class="line">826</span><br><span class="line">827</span><br></pre></td><td class="code"><pre><span class="line">.loading-bg</span><br><span class="line">  position fixed</span><br><span class="line">  z-index 1000</span><br><span class="line">  width 50%</span><br><span class="line">  height 100%</span><br><span class="line">  background var(--preloader-bg)</span><br><span class="line">#loading-box</span><br><span class="line">  .loading-left-bg</span><br><span class="line">    @extend .loading-bg</span><br><span class="line">    left 0</span><br><span class="line">  .loading-right-bg</span><br><span class="line">    @extend .loading-bg</span><br><span class="line">    right 0</span><br><span class="line">  &amp;.loaded</span><br><span class="line">    z-index -1000</span><br><span class="line">    .loading-left-bg</span><br><span class="line">      transition all 1.0s</span><br><span class="line">      transform translate(-100%, 0)</span><br><span class="line">    .loading-right-bg</span><br><span class="line">      transition all 1.0s</span><br><span class="line">      transform translate(100%, 0)</span><br><span class="line">#loading-box</span><br><span class="line">  position fixed</span><br><span class="line">  z-index 1000</span><br><span class="line">  display -webkit-box</span><br><span class="line">  display flex</span><br><span class="line">  -webkit-box-align center</span><br><span class="line">  align-items center</span><br><span class="line">  -webkit-box-pack center</span><br><span class="line">  justify-content center</span><br><span class="line">  -webkit-box-orient vertical</span><br><span class="line">  -webkit-box-direction normal</span><br><span class="line">  flex-direction column</span><br><span class="line">  flex-wrap wrap</span><br><span class="line">  width 100vw</span><br><span class="line">  height 100vh</span><br><span class="line">  overflow hidden</span><br><span class="line"></span><br><span class="line">  &amp;.loaded</span><br><span class="line">    .wizard-scene</span><br><span class="line">      display none</span><br><span class="line"></span><br><span class="line">.wizard-scene</span><br><span class="line">  position fixed</span><br><span class="line">  z-index 1001</span><br><span class="line">  display -webkit-box</span><br><span class="line">  display flex</span><br><span class="line"></span><br><span class="line">.wizard</span><br><span class="line">  position relative</span><br><span class="line">  width 190px</span><br><span class="line">  height 240px</span><br><span class="line"></span><br><span class="line">.wizard-body</span><br><span class="line">  position absolute</span><br><span class="line">  bottom 0</span><br><span class="line">  left 68px</span><br><span class="line">  height 100px</span><br><span class="line">  width 60px</span><br><span class="line">  background #3f64ce</span><br><span class="line">  &amp;::after</span><br><span class="line">    content &quot;&quot;</span><br><span class="line">    position absolute</span><br><span class="line">    bottom 0</span><br><span class="line">    left 20px</span><br><span class="line">    height 100px</span><br><span class="line">    width 60px</span><br><span class="line">    background #3f64ce</span><br><span class="line">    -webkit-transform skewX(14deg)</span><br><span class="line">    transform skewX(14deg)</span><br><span class="line"></span><br><span class="line">.wizard-right-arm</span><br><span class="line">  position absolute</span><br><span class="line">  bottom 74px</span><br><span class="line">  left 110px</span><br><span class="line">  height 44px</span><br><span class="line">  width 90px</span><br><span class="line">  background #3f64ce</span><br><span class="line">  border-radius 22px</span><br><span class="line">  -webkit-transform-origin 16px 22px</span><br><span class="line">  transform-origin 16px 22px</span><br><span class="line">  -webkit-transform rotate(70deg)</span><br><span class="line">  transform rotate(70deg)</span><br><span class="line">  -webkit-animation right_arm 10s ease-in-out infinite</span><br><span class="line">  animation right_arm 10s ease-in-out infinite</span><br><span class="line">  .right-hand</span><br><span class="line">    position absolute</span><br><span class="line">    right 8px</span><br><span class="line">    bottom 8px</span><br><span class="line">    width 30px</span><br><span class="line">    height 30px</span><br><span class="line">    border-radius 50%</span><br><span class="line">    background #f1c5b4</span><br><span class="line">    -webkit-transform-origin center center</span><br><span class="line">    transform-origin center center</span><br><span class="line">    -webkit-transform rotate(-40deg)</span><br><span class="line">    transform rotate(-40deg)</span><br><span class="line">    -webkit-animation right_hand 10s ease-in-out infinite</span><br><span class="line">    animation right_hand 10s ease-in-out infinite</span><br><span class="line">  .wizard-right-hand</span><br><span class="line">    &amp;::after</span><br><span class="line">      content &quot;&quot;</span><br><span class="line">      position absolute</span><br><span class="line">      right 0px</span><br><span class="line">      top -8px</span><br><span class="line">      width 15px</span><br><span class="line">      height 30px</span><br><span class="line">      border-radius 10px</span><br><span class="line">      background #f1c5b4</span><br><span class="line">      -webkit-transform translateY(16px)</span><br><span class="line">      transform translateY(16px)</span><br><span class="line">      -webkit-animation right_finger 10s ease-in-out infinite</span><br><span class="line">      animation right_finger 10s ease-in-out infinite</span><br><span class="line"></span><br><span class="line">.wizard-left-arm</span><br><span class="line">  position absolute</span><br><span class="line">  bottom 74px</span><br><span class="line">  left 26px</span><br><span class="line">  height 44px</span><br><span class="line">  width 70px</span><br><span class="line">  background #3f64ce</span><br><span class="line">  border-bottom-left-radius 8px</span><br><span class="line">  -webkit-transform-origin 60px 26px</span><br><span class="line">  transform-origin 60px 26px</span><br><span class="line">  -webkit-transform rotate(-70deg)</span><br><span class="line">  transform rotate(-70deg)</span><br><span class="line">  -webkit-animation left_arm 10s ease-in-out infinite</span><br><span class="line">  animation left_arm 10s ease-in-out infinite</span><br><span class="line">  .wizard-left-hand</span><br><span class="line">    position absolute</span><br><span class="line">    left -18px</span><br><span class="line">    top 0</span><br><span class="line">    width 18px</span><br><span class="line">    height 30px</span><br><span class="line">    border-top-left-radius 35px</span><br><span class="line">    border-bottom-left-radius 35px</span><br><span class="line">    background #f1c5b4</span><br><span class="line">    &amp;::after</span><br><span class="line">      content &quot;&quot;</span><br><span class="line">      position absolute</span><br><span class="line">      right 0</span><br><span class="line">      top 0</span><br><span class="line">      width 30px</span><br><span class="line">      height 15px</span><br><span class="line">      border-radius 20px</span><br><span class="line">      background #f1c5b4</span><br><span class="line">      -webkit-transform-origin right bottom</span><br><span class="line">      transform-origin right bottom</span><br><span class="line">      -webkit-transform scaleX(0)</span><br><span class="line">      transform scaleX(0)</span><br><span class="line">      -webkit-animation left_finger 10s ease-in-out infinite</span><br><span class="line">      animation left_finger 10s ease-in-out infinite</span><br><span class="line"></span><br><span class="line">.wizard-head</span><br><span class="line">  position absolute</span><br><span class="line">  top 0</span><br><span class="line">  left 14px</span><br><span class="line">  width 160px</span><br><span class="line">  height 210px</span><br><span class="line">  -webkit-transform-origin center center</span><br><span class="line">  transform-origin center center</span><br><span class="line">  -webkit-transform rotate(-3deg)</span><br><span class="line">  transform rotate(-3deg)</span><br><span class="line">  -webkit-animation head 10s ease-in-out infinite</span><br><span class="line">  animation head 10s ease-in-out infinite</span><br><span class="line">  .wizard-beard</span><br><span class="line">    position absolute</span><br><span class="line">    bottom 0</span><br><span class="line">    left 38px</span><br><span class="line">    height 106px</span><br><span class="line">    width 80px</span><br><span class="line">    border-bottom-right-radius 55%</span><br><span class="line">    background #ffffff</span><br><span class="line">    &amp;::after</span><br><span class="line">      content &quot;&quot;</span><br><span class="line">      position absolute</span><br><span class="line">      top 16px</span><br><span class="line">      left -10px</span><br><span class="line">      width 40px</span><br><span class="line">      height 20px</span><br><span class="line">      border-radius 20px</span><br><span class="line">      background #ffffff</span><br><span class="line">  .wizard-face</span><br><span class="line">    position absolute</span><br><span class="line">    bottom 76px</span><br><span class="line">    left 38px</span><br><span class="line">    height 30px</span><br><span class="line">    width 60px</span><br><span class="line">    background #f1c5b4</span><br><span class="line">    &amp;::before</span><br><span class="line">      content &quot;&quot;</span><br><span class="line">      position absolute</span><br><span class="line">      top 0px</span><br><span class="line">      left 40px</span><br><span class="line">      width 20px</span><br><span class="line">      height 40px</span><br><span class="line">      border-bottom-right-radius 20px</span><br><span class="line">      border-bottom-left-radius 20px</span><br><span class="line">      background #f1c5b4</span><br><span class="line">    &amp;::after</span><br><span class="line">      content &quot;&quot;</span><br><span class="line">      position absolute</span><br><span class="line">      top 16px</span><br><span class="line">      left -10px</span><br><span class="line">      width 50px</span><br><span class="line">      height 20px</span><br><span class="line">      border-radius 20px</span><br><span class="line">      border-bottom-right-radius 0px</span><br><span class="line">      background #ffffff</span><br><span class="line">    .wizard-adds</span><br><span class="line">      position absolute</span><br><span class="line">      top 0px</span><br><span class="line">      left -10px</span><br><span class="line">      width 40px</span><br><span class="line">      height 20px</span><br><span class="line">      border-radius 20px</span><br><span class="line">      background #f1c5b4</span><br><span class="line">      &amp;::after</span><br><span class="line">        content &quot;&quot;</span><br><span class="line">        position absolute</span><br><span class="line">        top 5px</span><br><span class="line">        left 80px</span><br><span class="line">        width 15px</span><br><span class="line">        height 20px</span><br><span class="line">        border-bottom-right-radius 20px</span><br><span class="line">        border-top-right-radius 20px</span><br><span class="line">        background #f1c5b4</span><br><span class="line">  .wizard-hat</span><br><span class="line">    position absolute</span><br><span class="line">    bottom 106px</span><br><span class="line">    left 0</span><br><span class="line">    width 160px</span><br><span class="line">    height 20px</span><br><span class="line">    border-radius 20px</span><br><span class="line">    background #3f64ce</span><br><span class="line">    &amp;::before</span><br><span class="line">      content &quot;&quot;</span><br><span class="line">      position absolute</span><br><span class="line">      top -70px</span><br><span class="line">      left 50%</span><br><span class="line">      -webkit-transform translatex(-50%)</span><br><span class="line">      transform translatex(-50%)</span><br><span class="line">      width 0</span><br><span class="line">      height 0</span><br><span class="line">      border-style solid</span><br><span class="line">      border-width 0 34px 70px 50px</span><br><span class="line">      border-color transparent transparent #3f64ce transparent</span><br><span class="line">    &amp;::after</span><br><span class="line">      content &quot;&quot;</span><br><span class="line">      position absolute</span><br><span class="line">      top 0</span><br><span class="line">      left 0</span><br><span class="line">      width 160px</span><br><span class="line">      height 20px</span><br><span class="line">      background #3f64ce</span><br><span class="line">      border-radius 20px</span><br><span class="line">    .wizard-hat-of-the-hat</span><br><span class="line">      position absolute</span><br><span class="line">      bottom 78px</span><br><span class="line">      left 79px</span><br><span class="line">      width 0</span><br><span class="line">      height 0</span><br><span class="line">      border-style solid</span><br><span class="line">      border-width 0 25px 25px 19px</span><br><span class="line">      border-color transparent transparent #3f64ce transparent</span><br><span class="line">      &amp;::after</span><br><span class="line">        content &quot;&quot;</span><br><span class="line">        position absolute</span><br><span class="line">        top 6px</span><br><span class="line">        left -4px</span><br><span class="line">        width 35px</span><br><span class="line">        height 10px</span><br><span class="line">        border-radius 10px</span><br><span class="line">        border-bottom-left-radius 0px</span><br><span class="line">        background #3f64ce</span><br><span class="line">        -webkit-transform rotate(40deg)</span><br><span class="line">        transform rotate(40deg)</span><br><span class="line">    .wizard-four-point-star</span><br><span class="line">      position absolute</span><br><span class="line">      width 12px</span><br><span class="line">      height 12px</span><br><span class="line">      &amp;::after</span><br><span class="line">        -webkit-transform rotate(156.66deg) skew(45deg)</span><br><span class="line">        transform rotate(156.66deg) skew(45deg)</span><br><span class="line">      &amp;.--first</span><br><span class="line">        bottom 28px</span><br><span class="line">        left 46px</span><br><span class="line">      &amp;.--second</span><br><span class="line">        bottom 40px</span><br><span class="line">        left 80px</span><br><span class="line">      &amp;.--third</span><br><span class="line">        bottom 15px</span><br><span class="line">        left 108px</span><br><span class="line"></span><br><span class="line">.wizard-head .wizard-hat .wizard-four-point-star::after, .wizard-head .wizard-hat .wizard-four-point-star::before</span><br><span class="line">  content &quot;&quot;</span><br><span class="line">  position absolute</span><br><span class="line">  background #ffffff</span><br><span class="line">  display block</span><br><span class="line">  left 0</span><br><span class="line">  width 141.4213%</span><br><span class="line">  top 0</span><br><span class="line">  bottom 0</span><br><span class="line">  border-radius 10%</span><br><span class="line">  -webkit-transform rotate(66.66deg) skewX(45deg)</span><br><span class="line">  transform rotate(66.66deg) skewX(45deg)</span><br><span class="line"></span><br><span class="line">.wizard-objects</span><br><span class="line">  position relative</span><br><span class="line">  width 200px</span><br><span class="line">  height 240px</span><br><span class="line"></span><br><span class="line">.wizard-square</span><br><span class="line">  position absolute</span><br><span class="line">  bottom -60px</span><br><span class="line">  left -5px</span><br><span class="line">  width 120px</span><br><span class="line">  height 120px</span><br><span class="line">  border-radius 50%</span><br><span class="line">  -webkit-transform rotate(-360deg)</span><br><span class="line">  transform rotate(-360deg)</span><br><span class="line">  -webkit-animation path_square 10s ease-in-out infinite</span><br><span class="line">  animation path_square 10s ease-in-out infinite</span><br><span class="line">  &amp;::after</span><br><span class="line">    content &quot;&quot;</span><br><span class="line">    position absolute</span><br><span class="line">    top 10px</span><br><span class="line">    left 0</span><br><span class="line">    width 50px</span><br><span class="line">    height 50px</span><br><span class="line">    background #9ab3f5</span><br><span class="line"></span><br><span class="line">.wizard-circle</span><br><span class="line">  position absolute</span><br><span class="line">  bottom 10px</span><br><span class="line">  left 0</span><br><span class="line">  width 100px</span><br><span class="line">  height 100px</span><br><span class="line">  border-radius 50%</span><br><span class="line">  -webkit-transform rotate(-360deg)</span><br><span class="line">  transform rotate(-360deg)</span><br><span class="line">  -webkit-animation path_circle 10s ease-in-out infinite</span><br><span class="line">  animation path_circle 10s ease-in-out infinite</span><br><span class="line">  &amp;::after</span><br><span class="line">    content &quot;&quot;</span><br><span class="line">    position absolute</span><br><span class="line">    bottom -10px</span><br><span class="line">    left 25px</span><br><span class="line">    width 50px</span><br><span class="line">    height 50px</span><br><span class="line">    border-radius 50%</span><br><span class="line">    background #c56183</span><br><span class="line"></span><br><span class="line">.wizard-triangle</span><br><span class="line">  position absolute</span><br><span class="line">  bottom -62px</span><br><span class="line">  left -10px</span><br><span class="line">  width 110px</span><br><span class="line">  height 110px</span><br><span class="line">  border-radius 50%</span><br><span class="line">  -webkit-transform rotate(-360deg)</span><br><span class="line">  transform rotate(-360deg)</span><br><span class="line">  -webkit-animation path_triangle 10s ease-in-out infinite</span><br><span class="line">  animation path_triangle 10s ease-in-out infinite</span><br><span class="line">  &amp;::after</span><br><span class="line">    content &quot;&quot;</span><br><span class="line">    position absolute</span><br><span class="line">    top 0</span><br><span class="line">    right -10px</span><br><span class="line">    width 0</span><br><span class="line">    height 0</span><br><span class="line">    border-style solid</span><br><span class="line">    border-width 0 28px 48px 28px</span><br><span class="line">    border-color transparent transparent #89beb3 transparent</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/** 10s animation - 10% = 1s */</span><br><span class="line">@-webkit-keyframes right_arm</span><br><span class="line">  0%</span><br><span class="line">    -webkit-transform rotate(70deg)</span><br><span class="line">    transform rotate(70deg)</span><br><span class="line">  10%</span><br><span class="line">    -webkit-transform rotate(8deg)</span><br><span class="line">    transform rotate(8deg)</span><br><span class="line">  15%</span><br><span class="line">    -webkit-transform rotate(20deg)</span><br><span class="line">    transform rotate(20deg)</span><br><span class="line">  20%</span><br><span class="line">    -webkit-transform rotate(10deg)</span><br><span class="line">    transform rotate(10deg)</span><br><span class="line">  25%</span><br><span class="line">    -webkit-transform rotate(26deg)</span><br><span class="line">    transform rotate(26deg)</span><br><span class="line">  30%</span><br><span class="line">    -webkit-transform rotate(10deg)</span><br><span class="line">    transform rotate(10deg)</span><br><span class="line">  35%</span><br><span class="line">    -webkit-transform rotate(28deg)</span><br><span class="line">    transform rotate(28deg)</span><br><span class="line">  40%</span><br><span class="line">    -webkit-transform rotate(9deg)</span><br><span class="line">    transform rotate(9deg)</span><br><span class="line">  45%</span><br><span class="line">    -webkit-transform rotate(28deg)</span><br><span class="line">    transform rotate(28deg)</span><br><span class="line">  50%</span><br><span class="line">    -webkit-transform rotate(8deg)</span><br><span class="line">    transform rotate(8deg)</span><br><span class="line">  58%</span><br><span class="line">    -webkit-transform rotate(74deg)</span><br><span class="line">    transform rotate(74deg)</span><br><span class="line">  62%</span><br><span class="line">    -webkit-transform rotate(70deg)</span><br><span class="line">    transform rotate(70deg)</span><br><span class="line"></span><br><span class="line">@keyframes right_arm</span><br><span class="line">  0%</span><br><span class="line">    -webkit-transform rotate(70deg)</span><br><span class="line">    transform rotate(70deg)</span><br><span class="line">  10%</span><br><span class="line">    -webkit-transform rotate(8deg)</span><br><span class="line">    transform rotate(8deg)</span><br><span class="line">  15%</span><br><span class="line">    -webkit-transform rotate(20deg)</span><br><span class="line">    transform rotate(20deg)</span><br><span class="line">  20%</span><br><span class="line">    -webkit-transform rotate(10deg)</span><br><span class="line">    transform rotate(10deg)</span><br><span class="line">  25%</span><br><span class="line">    -webkit-transform rotate(26deg)</span><br><span class="line">    transform rotate(26deg)</span><br><span class="line">  30%</span><br><span class="line">    -webkit-transform rotate(10deg)</span><br><span class="line">    transform rotate(10deg)</span><br><span class="line">  35%</span><br><span class="line">    -webkit-transform rotate(28deg)</span><br><span class="line">    transform rotate(28deg)</span><br><span class="line">  40%</span><br><span class="line">    -webkit-transform rotate(9deg)</span><br><span class="line">    transform rotate(9deg)</span><br><span class="line">  45%</span><br><span class="line">    -webkit-transform rotate(28deg)</span><br><span class="line">    transform rotate(28deg)</span><br><span class="line">  50%</span><br><span class="line">    -webkit-transform rotate(8deg)</span><br><span class="line">    transform rotate(8deg)</span><br><span class="line">  58%</span><br><span class="line">    -webkit-transform rotate(74deg)</span><br><span class="line">    transform rotate(74deg)</span><br><span class="line">  62%</span><br><span class="line">    -webkit-transform rotate(70deg)</span><br><span class="line">    transform rotate(70deg)</span><br><span class="line"></span><br><span class="line">@-webkit-keyframes left_arm</span><br><span class="line">  0%</span><br><span class="line">    -webkit-transform rotate(-70deg)</span><br><span class="line">    transform rotate(-70deg)</span><br><span class="line">  10%</span><br><span class="line">    -webkit-transform rotate(6deg)</span><br><span class="line">    transform rotate(6deg)</span><br><span class="line">  15%</span><br><span class="line">    -webkit-transform rotate(-18deg)</span><br><span class="line">    transform rotate(-18deg)</span><br><span class="line">  20%</span><br><span class="line">    -webkit-transform rotate(5deg)</span><br><span class="line">    transform rotate(5deg)</span><br><span class="line">  25%</span><br><span class="line">    -webkit-transform rotate(-18deg)</span><br><span class="line">    transform rotate(-18deg)</span><br><span class="line">  30%</span><br><span class="line">    -webkit-transform rotate(5deg)</span><br><span class="line">    transform rotate(5deg)</span><br><span class="line">  35%</span><br><span class="line">    -webkit-transform rotate(-17deg)</span><br><span class="line">    transform rotate(-17deg)</span><br><span class="line">  40%</span><br><span class="line">    -webkit-transform rotate(5deg)</span><br><span class="line">    transform rotate(5deg)</span><br><span class="line">  45%</span><br><span class="line">    -webkit-transform rotate(-18deg)</span><br><span class="line">    transform rotate(-18deg)</span><br><span class="line">  50%</span><br><span class="line">    -webkit-transform rotate(6deg)</span><br><span class="line">    transform rotate(6deg)</span><br><span class="line">  58%</span><br><span class="line">    -webkit-transform rotate(-74deg)</span><br><span class="line">    transform rotate(-74deg)</span><br><span class="line">  62%</span><br><span class="line">    -webkit-transform rotate(-70deg)</span><br><span class="line">    transform rotate(-70deg)</span><br><span class="line"></span><br><span class="line">@keyframes left_arm</span><br><span class="line">  0%</span><br><span class="line">    -webkit-transform rotate(-70deg)</span><br><span class="line">    transform rotate(-70deg)</span><br><span class="line">  10%</span><br><span class="line">    -webkit-transform rotate(6deg)</span><br><span class="line">    transform rotate(6deg)</span><br><span class="line">  15%</span><br><span class="line">    -webkit-transform rotate(-18deg)</span><br><span class="line">    transform rotate(-18deg)</span><br><span class="line">  20%</span><br><span class="line">    -webkit-transform rotate(5deg)</span><br><span class="line">    transform rotate(5deg)</span><br><span class="line">  25%</span><br><span class="line">    -webkit-transform rotate(-18deg)</span><br><span class="line">    transform rotate(-18deg)</span><br><span class="line">  30%</span><br><span class="line">    -webkit-transform rotate(5deg)</span><br><span class="line">    transform rotate(5deg)</span><br><span class="line">  35%</span><br><span class="line">    -webkit-transform rotate(-17deg)</span><br><span class="line">    transform rotate(-17deg)</span><br><span class="line">  40%</span><br><span class="line">    -webkit-transform rotate(5deg)</span><br><span class="line">    transform rotate(5deg)</span><br><span class="line">  45%</span><br><span class="line">    -webkit-transform rotate(-18deg)</span><br><span class="line">    transform rotate(-18deg)</span><br><span class="line">  50%</span><br><span class="line">    -webkit-transform rotate(6deg)</span><br><span class="line">    transform rotate(6deg)</span><br><span class="line">  58%</span><br><span class="line">    -webkit-transform rotate(-74deg)</span><br><span class="line">    transform rotate(-74deg)</span><br><span class="line">  62%</span><br><span class="line">    -webkit-transform rotate(-70deg)</span><br><span class="line">    transform rotate(-70deg)</span><br><span class="line"></span><br><span class="line">@-webkit-keyframes right_hand</span><br><span class="line">  0%</span><br><span class="line">    -webkit-transform rotate(-40deg)</span><br><span class="line">    transform rotate(-40deg)</span><br><span class="line">  10%</span><br><span class="line">    -webkit-transform rotate(-20deg)</span><br><span class="line">    transform rotate(-20deg)</span><br><span class="line">  15%</span><br><span class="line">    -webkit-transform rotate(-5deg)</span><br><span class="line">    transform rotate(-5deg)</span><br><span class="line">  20%</span><br><span class="line">    -webkit-transform rotate(-60deg)</span><br><span class="line">    transform rotate(-60deg)</span><br><span class="line">  25%</span><br><span class="line">    -webkit-transform rotate(0deg)</span><br><span class="line">    transform rotate(0deg)</span><br><span class="line">  30%</span><br><span class="line">    -webkit-transform rotate(-60deg)</span><br><span class="line">    transform rotate(-60deg)</span><br><span class="line">  35%</span><br><span class="line">    -webkit-transform rotate(0deg)</span><br><span class="line">    transform rotate(0deg)</span><br><span class="line">  40%</span><br><span class="line">    -webkit-transform rotate(-40deg)</span><br><span class="line">    transform rotate(-40deg)</span><br><span class="line">  45%</span><br><span class="line">    -webkit-transform rotate(-60deg)</span><br><span class="line">    transform rotate(-60deg)</span><br><span class="line">  50%</span><br><span class="line">    -webkit-transform rotate(10deg)</span><br><span class="line">    transform rotate(10deg)</span><br><span class="line">  60%</span><br><span class="line">    -webkit-transform rotate(-40deg)</span><br><span class="line">    transform rotate(-40deg)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@keyframes right_hand</span><br><span class="line">  0%</span><br><span class="line">    -webkit-transform rotate(-40deg)</span><br><span class="line">    transform rotate(-40deg)</span><br><span class="line">  10%</span><br><span class="line">    -webkit-transform rotate(-20deg)</span><br><span class="line">    transform rotate(-20deg)</span><br><span class="line">  15%</span><br><span class="line">    -webkit-transform rotate(-5deg)</span><br><span class="line">    transform rotate(-5deg)</span><br><span class="line">  20%</span><br><span class="line">    -webkit-transform rotate(-60deg)</span><br><span class="line">    transform rotate(-60deg)</span><br><span class="line">  25%</span><br><span class="line">    -webkit-transform rotate(0deg)</span><br><span class="line">    transform rotate(0deg)</span><br><span class="line">  30%</span><br><span class="line">    -webkit-transform rotate(-60deg)</span><br><span class="line">    transform rotate(-60deg)</span><br><span class="line">  35%</span><br><span class="line">    -webkit-transform rotate(0deg)</span><br><span class="line">    transform rotate(0deg)</span><br><span class="line">  40%</span><br><span class="line">    -webkit-transform rotate(-40deg)</span><br><span class="line">    transform rotate(-40deg)</span><br><span class="line">  45%</span><br><span class="line">    -webkit-transform rotate(-60deg)</span><br><span class="line">    transform rotate(-60deg)</span><br><span class="line">  50%</span><br><span class="line">    -webkit-transform rotate(10deg)</span><br><span class="line">    transform rotate(10deg)</span><br><span class="line">  60%</span><br><span class="line">    -webkit-transform rotate(-40deg)</span><br><span class="line">    transform rotate(-40deg)</span><br><span class="line"></span><br><span class="line">@-webkit-keyframes right_finger</span><br><span class="line">  0%</span><br><span class="line">    -webkit-transform translateY(16px)</span><br><span class="line">    transform translateY(16px)</span><br><span class="line">  10%</span><br><span class="line">    -webkit-transform none</span><br><span class="line">    transform none</span><br><span class="line">  50%</span><br><span class="line">    -webkit-transform none</span><br><span class="line">    transform none</span><br><span class="line">  60%</span><br><span class="line">    -webkit-transform translateY(16px)</span><br><span class="line">    transform translateY(16px)</span><br><span class="line"></span><br><span class="line">@keyframes right_finger</span><br><span class="line">  0%</span><br><span class="line">    -webkit-transform translateY(16px)</span><br><span class="line">    transform translateY(16px)</span><br><span class="line">  10%</span><br><span class="line">    -webkit-transform none</span><br><span class="line">    transform none</span><br><span class="line">  50%</span><br><span class="line">    -webkit-transform none</span><br><span class="line">    transform none</span><br><span class="line">  60%</span><br><span class="line">    -webkit-transform translateY(16px)</span><br><span class="line">    transform translateY(16px)</span><br><span class="line"></span><br><span class="line">@-webkit-keyframes left_finger</span><br><span class="line">  0%</span><br><span class="line">    -webkit-transform scaleX(0)</span><br><span class="line">    transform scaleX(0)</span><br><span class="line">  10%</span><br><span class="line">    -webkit-transform scaleX(1) rotate(6deg)</span><br><span class="line">    transform scaleX(1) rotate(6deg)</span><br><span class="line">  15%</span><br><span class="line">    -webkit-transform scaleX(1) rotate(0deg)</span><br><span class="line">    transform scaleX(1) rotate(0deg)</span><br><span class="line">  20%</span><br><span class="line">    -webkit-transform scaleX(1) rotate(8deg)</span><br><span class="line">    transform scaleX(1) rotate(8deg)</span><br><span class="line">  25%</span><br><span class="line">    -webkit-transform scaleX(1) rotate(0deg)</span><br><span class="line">    transform scaleX(1) rotate(0deg)</span><br><span class="line">  30%</span><br><span class="line">    -webkit-transform scaleX(1) rotate(7deg)</span><br><span class="line">    transform scaleX(1) rotate(7deg)</span><br><span class="line">  35%</span><br><span class="line">    -webkit-transform scaleX(1) rotate(0deg)</span><br><span class="line">    transform scaleX(1) rotate(0deg)</span><br><span class="line">  40%</span><br><span class="line">    -webkit-transform scaleX(1) rotate(5deg)</span><br><span class="line">    transform scaleX(1) rotate(5deg)</span><br><span class="line">  45%</span><br><span class="line">    -webkit-transform scaleX(1) rotate(0deg)</span><br><span class="line">    transform scaleX(1) rotate(0deg)</span><br><span class="line">  50%</span><br><span class="line">    -webkit-transform scaleX(1) rotate(6deg)</span><br><span class="line">    transform scaleX(1) rotate(6deg)</span><br><span class="line">  58%</span><br><span class="line">    -webkit-transform scaleX(0)</span><br><span class="line">    transform scaleX(0)</span><br><span class="line"></span><br><span class="line">@keyframes left_finger</span><br><span class="line">  0%</span><br><span class="line">    -webkit-transform scaleX(0)</span><br><span class="line">    transform scaleX(0)</span><br><span class="line">  10%</span><br><span class="line">    -webkit-transform scaleX(1) rotate(6deg)</span><br><span class="line">    transform scaleX(1) rotate(6deg)</span><br><span class="line">  15%</span><br><span class="line">    -webkit-transform scaleX(1) rotate(0deg)</span><br><span class="line">    transform scaleX(1) rotate(0deg)</span><br><span class="line">  20%</span><br><span class="line">    -webkit-transform scaleX(1) rotate(8deg)</span><br><span class="line">    transform scaleX(1) rotate(8deg)</span><br><span class="line">  25%</span><br><span class="line">    -webkit-transform scaleX(1) rotate(0deg)</span><br><span class="line">    transform scaleX(1) rotate(0deg)</span><br><span class="line">  30%</span><br><span class="line">    -webkit-transform scaleX(1) rotate(7deg)</span><br><span class="line">    transform scaleX(1) rotate(7deg)</span><br><span class="line">  35%</span><br><span class="line">    -webkit-transform scaleX(1) rotate(0deg)</span><br><span class="line">    transform scaleX(1) rotate(0deg)</span><br><span class="line">  40%</span><br><span class="line">    -webkit-transform scaleX(1) rotate(5deg)</span><br><span class="line">    transform scaleX(1) rotate(5deg)</span><br><span class="line">  45%</span><br><span class="line">    -webkit-transform scaleX(1) rotate(0deg)</span><br><span class="line">    transform scaleX(1) rotate(0deg)</span><br><span class="line">  50%</span><br><span class="line">    -webkit-transform scaleX(1) rotate(6deg)</span><br><span class="line">    transform scaleX(1) rotate(6deg)</span><br><span class="line">  58%</span><br><span class="line">    -webkit-transform scaleX(0)</span><br><span class="line">    transform scaleX(0)</span><br><span class="line"></span><br><span class="line">@-webkit-keyframes head</span><br><span class="line">  0%</span><br><span class="line">    -webkit-transform rotate(-3deg)</span><br><span class="line">    transform rotate(-3deg)</span><br><span class="line">  10%</span><br><span class="line">    -webkit-transform translatex(10px) rotate(7deg)</span><br><span class="line">    transform translatex(10px) rotate(7deg)</span><br><span class="line">  50%</span><br><span class="line">    -webkit-transform translatex(0px) rotate(0deg)</span><br><span class="line">    transform translatex(0px) rotate(0deg)</span><br><span class="line">  56%</span><br><span class="line">    -webkit-transform rotate(-3deg)</span><br><span class="line">    transform rotate(-3deg)</span><br><span class="line"></span><br><span class="line">@keyframes head</span><br><span class="line">  0%</span><br><span class="line">    -webkit-transform rotate(-3deg)</span><br><span class="line">    transform rotate(-3deg)</span><br><span class="line">  10%</span><br><span class="line">    -webkit-transform translatex(10px) rotate(7deg)</span><br><span class="line">    transform translatex(10px) rotate(7deg)</span><br><span class="line">  50%</span><br><span class="line">    -webkit-transform translatex(0px) rotate(0deg)</span><br><span class="line">    transform translatex(0px) rotate(0deg)</span><br><span class="line">  56%</span><br><span class="line">    -webkit-transform rotate(-3deg)</span><br><span class="line">    transform rotate(-3deg)</span><br><span class="line">/** 10s animation - 10% = 1s */</span><br><span class="line">@-webkit-keyframes path_circle</span><br><span class="line">  0%</span><br><span class="line">    -webkit-transform translateY(0)</span><br><span class="line">    transform translateY(0)</span><br><span class="line">  10%</span><br><span class="line">    -webkit-transform translateY(-100px) rotate(-5deg)</span><br><span class="line">    transform translateY(-100px) rotate(-5deg)</span><br><span class="line">  55%</span><br><span class="line">    -webkit-transform translateY(-100px) rotate(-360deg)</span><br><span class="line">    transform translateY(-100px) rotate(-360deg)</span><br><span class="line">  58%</span><br><span class="line">    -webkit-transform translateY(-100px) rotate(-360deg)</span><br><span class="line">    transform translateY(-100px) rotate(-360deg)</span><br><span class="line">  63%</span><br><span class="line">    -webkit-transform rotate(-360deg)</span><br><span class="line">    transform rotate(-360deg)</span><br><span class="line"></span><br><span class="line">@keyframes path_circle</span><br><span class="line">  0%</span><br><span class="line">    -webkit-transform translateY(0)</span><br><span class="line">    transform translateY(0)</span><br><span class="line">  10%</span><br><span class="line">    -webkit-transform translateY(-100px) rotate(-5deg)</span><br><span class="line">    transform translateY(-100px) rotate(-5deg)</span><br><span class="line">  55%</span><br><span class="line">    -webkit-transform translateY(-100px) rotate(-360deg)</span><br><span class="line">    transform translateY(-100px) rotate(-360deg)</span><br><span class="line">  58%</span><br><span class="line">    -webkit-transform translateY(-100px) rotate(-360deg)</span><br><span class="line">    transform translateY(-100px) rotate(-360deg)</span><br><span class="line">  63%</span><br><span class="line">    -webkit-transform rotate(-360deg)</span><br><span class="line">    transform rotate(-360deg)</span><br><span class="line"></span><br><span class="line">@-webkit-keyframes path_square</span><br><span class="line">  0%</span><br><span class="line">    -webkit-transform translateY(0)</span><br><span class="line">    transform translateY(0)</span><br><span class="line">  10%</span><br><span class="line">    -webkit-transform translateY(-155px) translatex(-15px) rotate(10deg)</span><br><span class="line">    transform translateY(-155px) translatex(-15px) rotate(10deg)</span><br><span class="line">  55%</span><br><span class="line">    -webkit-transform translateY(-155px) translatex(-15px) rotate(-350deg)</span><br><span class="line">    transform translateY(-155px) translatex(-15px) rotate(-350deg)</span><br><span class="line">  57%</span><br><span class="line">    -webkit-transform translateY(-155px) translatex(-15px) rotate(-350deg)</span><br><span class="line">    transform translateY(-155px) translatex(-15px) rotate(-350deg)</span><br><span class="line">  63%</span><br><span class="line">    -webkit-transform rotate(-360deg)</span><br><span class="line">    transform rotate(-360deg)</span><br><span class="line"></span><br><span class="line">@keyframes path_square</span><br><span class="line">  0%</span><br><span class="line">    -webkit-transform translateY(0)</span><br><span class="line">    transform translateY(0)</span><br><span class="line">  10%</span><br><span class="line">    -webkit-transform translateY(-155px) translatex(-15px) rotate(10deg)</span><br><span class="line">    transform translateY(-155px) translatex(-15px) rotate(10deg)</span><br><span class="line">  55%</span><br><span class="line">    -webkit-transform translateY(-155px) translatex(-15px) rotate(-350deg)</span><br><span class="line">    transform translateY(-155px) translatex(-15px) rotate(-350deg)</span><br><span class="line">  57%</span><br><span class="line">    -webkit-transform translateY(-155px) translatex(-15px) rotate(-350deg)</span><br><span class="line">    transform translateY(-155px) translatex(-15px) rotate(-350deg)</span><br><span class="line">  63%</span><br><span class="line">    -webkit-transform rotate(-360deg)</span><br><span class="line">    transform rotate(-360deg)</span><br><span class="line"></span><br><span class="line">@-webkit-keyframes path_triangle</span><br><span class="line">  0%</span><br><span class="line">    -webkit-transform translateY(0)</span><br><span class="line">    transform translateY(0)</span><br><span class="line">  10%</span><br><span class="line">    -webkit-transform translateY(-172px) translatex(10px) rotate(-10deg)</span><br><span class="line">    transform translateY(-172px) translatex(10px) rotate(-10deg)</span><br><span class="line">  55%</span><br><span class="line">    -webkit-transform translateY(-172px) translatex(10px) rotate(-365deg)</span><br><span class="line">    transform translateY(-172px) translatex(10px) rotate(-365deg)</span><br><span class="line">  58%</span><br><span class="line">    -webkit-transform translateY(-172px) translatex(10px) rotate(-365deg)</span><br><span class="line">    transform translateY(-172px) translatex(10px) rotate(-365deg)</span><br><span class="line">  63%</span><br><span class="line">    -webkit-transform rotate(-360deg)</span><br><span class="line">    transform rotate(-360deg)</span><br><span class="line"></span><br><span class="line">@keyframes path_triangle</span><br><span class="line">  0%</span><br><span class="line">    -webkit-transform translateY(0)</span><br><span class="line">    transform translateY(0)</span><br><span class="line">  10%</span><br><span class="line">    -webkit-transform translateY(-172px) translatex(10px) rotate(-10deg)</span><br><span class="line">    transform translateY(-172px) translatex(10px) rotate(-10deg)</span><br><span class="line">  55%</span><br><span class="line">    -webkit-transform translateY(-172px) translatex(10px) rotate(-365deg)</span><br><span class="line">    transform translateY(-172px) translatex(10px) rotate(-365deg)</span><br><span class="line">  58%</span><br><span class="line">    -webkit-transform translateY(-172px) translatex(10px) rotate(-365deg)</span><br><span class="line">    transform translateY(-172px) translatex(10px) rotate(-365deg)</span><br><span class="line">  63%</span><br><span class="line">    -webkit-transform rotate(-360deg)</span><br><span class="line">    transform rotate(-360deg)</span><br></pre></td></tr></table></figure><p>5.修改<code>[Blogroot]\themes\butterfly\layout\includes\layout.pug</code>，以适配接下来需要添加的配置项</p><p>‘-’代表删除</p><p>‘+’代表加上</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">    body</span><br><span class="line">-     if theme.preloader</span><br><span class="line">+     if theme.preloader.enable</span><br><span class="line">        !=partial(&#x27;includes/loading/loading&#x27;, &#123;&#125;, &#123;cache: true&#125;)</span><br></pre></td></tr></table></figure><p>6.修改<code>[Blogroot]\themes\butterfly\source\css\var.styl</code>，添加自定义修改背景色的配置项。(大概98行的位置)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">      // preloader</span><br><span class="line">-     $preloader-bg = #37474f</span><br><span class="line">+     $preloader-bg = hexo-config(&#x27;preloader.enable&#x27;) &amp;&amp; hexo-config(&#x27;preloader.load_color&#x27;) ? convert(hexo-config(&#x27;preloader.load_color&#x27;)) : #37474f</span><br><span class="line">      $preloader-word-color = #fff</span><br></pre></td></tr></table></figure><p>7.修改<code>[Blogroot]\_config.butterfly.yml</code>的<code>preloader</code>配置项。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">    # Loading Animation (加載動畫)</span><br><span class="line">-   preloader: true</span><br><span class="line">+   preloader:</span><br><span class="line">+     enable: true # true|false</span><br><span class="line">+     load_color: &#x27;#000000&#x27; # &#x27;#37474f&#x27;</span><br><span class="line">+     load_style: wizard # default|gear|ironheart|scarecrow|triangles|wizard|image</span><br><span class="line">+     load_image:  # url</span><br></pre></td></tr></table></figure><p>8.设置超时自动结束</p><p>[Blogroot]\themes\butterfly\layout\includes\loading\fullpage-loading.pug</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">-   script.</span><br><span class="line">+   script(async).</span><br><span class="line">      var preloader = &#123;</span><br><span class="line">        endLoading: () =&gt; &#123;</span><br><span class="line">          document.body.style.overflow = &#x27;auto&#x27;;</span><br><span class="line">          document.getElementById(&#x27;loading-box&#x27;).classList.add(&quot;loaded&quot;)</span><br><span class="line">        &#125;,</span><br><span class="line">        initLoading: () =&gt; &#123;</span><br><span class="line">          document.body.style.overflow = &#x27;&#x27;;</span><br><span class="line">          document.getElementById(&#x27;loading-box&#x27;).classList.remove(&quot;loaded&quot;)</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      window.addEventListener(&#x27;load&#x27;,()=&gt; &#123;preloader.endLoading()&#125;)</span><br><span class="line">+     setTimeout(function()&#123;preloader.endLoading();&#125;, 5000);</span><br></pre></td></tr></table></figure><p>弄了挺久，也踩了不少坑，比如这个巫师会一直在不消失、博客内容看不到</p><h2 id="加载进度条"><a href="#加载进度条" class="headerlink" title="加载进度条"></a>加载进度条</h2><p><strong>butterfly 4.5 以上版本</strong></p><p>修改<code>themes/butterfly/layout/includes/loading/index.pug</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">if theme.preloader.source === 1</span><br><span class="line">  include ./fullpage-loading.pug</span><br><span class="line">else if theme.preloader.source === 2</span><br><span class="line">  include ./pace.pug</span><br><span class="line">else</span><br><span class="line">  include ./fullpage-loading.pug</span><br><span class="line">  include ./pace.pug</span><br></pre></td></tr></table></figure><p>修改<code>_config.butterfly.yml</code>中<code>preloader</code>选项, 改完以后<code>source: 1</code>为满屏加载无<code>pace胶囊</code>,<code>source: 2</code>为<code>pace胶囊</code>无满屏动画, <code>source: 3</code>是两者都启用。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># Loading Animation (加载动画)</span><br><span class="line">preloader:</span><br><span class="line">  enable: true</span><br><span class="line">  # source</span><br><span class="line">  # 1. fullpage-loading</span><br><span class="line">  # 2. pace (progress bar)</span><br><span class="line">  # else all</span><br><span class="line">  source: 3</span><br><span class="line">  # pace theme (see https://codebyzach.github.io/pace/)</span><br><span class="line">  pace_css_url: https://fastly.jsdelivr.net/gh/xlenco/JS-X@main/pace.js/pace.css</span><br></pre></td></tr></table></figure><h2 id="动态文字"><a href="#动态文字" class="headerlink" title="动态文字"></a>动态文字</h2><p>在文件_config.butterfly.yml中的subtitle下面加文字就行</p><h1 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h1><h2 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line"></span><br><span class="line">hexo generate   (若要本地预览就先执行 hexo server) </span><br><span class="line"></span><br><span class="line">hexo deploy</span><br><span class="line">组合：</span><br><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>快捷命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hexo c == hexo clean      # 清除缓存  </span><br><span class="line">hexo g == hexo generate   # 生成静态文件</span><br><span class="line">hexo d == hexo deploy     # 部署到github中，更新网页端的内容</span><br><span class="line">hexo s == hexo server     # 通过启动本地服务器，预览文章效果</span><br><span class="line">hexo n == hexo new       </span><br></pre></td></tr></table></figure><p>新建文章</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new &quot;文章题目&quot;</span><br></pre></td></tr></table></figure><h2 id="脚本实现更新"><a href="#脚本实现更新" class="headerlink" title="脚本实现更新"></a>脚本实现更新</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line"># 进入博客目录</span><br><span class="line">cd /path/to/your/hexo/blog</span><br><span class="line"></span><br><span class="line"># 拉取最新的代码</span><br><span class="line">git pull</span><br><span class="line"></span><br><span class="line"># 清理之前生成的静态文件</span><br><span class="line">hexo clean</span><br><span class="line"></span><br><span class="line"># 生成静态页面</span><br><span class="line">hexo generate</span><br><span class="line"></span><br><span class="line"># 部署到服务器</span><br><span class="line">hexo deploy</span><br><span class="line"></span><br><span class="line">echo &quot;Hexo博客已更新完成！&quot;</span><br><span class="line"></span><br><span class="line"># 等待用户按下回车键</span><br><span class="line">read -p &quot;Press [Enter] to exit...&quot;</span><br></pre></td></tr></table></figure><h1 id="希腊字母输入"><a href="#希腊字母输入" class="headerlink" title="希腊字母输入"></a>希腊字母输入</h1><p><img src="image-20231210214201578.png" alt="image-20231210214201578"></p><h1 id="mobile"><a href="#mobile" class="headerlink" title="mobile"></a>mobile</h1><p>打开mumu模拟器之后，打开终端输入adb connect 127.0.0.1:7555,然后输入adb shell。</p><p>进入 data&#x2F;local&#x2F;tmp&#x2F;</p><p>然后启动frida server端</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">adb connect 127.0.0.1:7555</span><br><span class="line">adb shell</span><br><span class="line">cd /data/local/tmp</span><br><span class="line">./firda-server</span><br></pre></td></tr></table></figure><p>然后注入，-f后面是模块名字</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">frida -U -f &quot;com.example.challengemobile&quot; -l hook.js</span><br><span class="line"></span><br><span class="line">//查进程</span><br><span class="line">frida-ps -U</span><br><span class="line">//或者：-U 后面加进程id </span><br><span class="line">frida -U PID -l hook.js</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
